{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"wom.py <p>An asynchronous wrapper for the Wise Old Man API.</p> <p>The library aims to make it easy to interact with the Wise Old Man API by providing service methods matching all available endpoints and model classes for data consistency.</p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Stable</li> <li>Development</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Python version 3.8 or greater is required to use wom.py.</p>"},{"location":"#stable","title":"Stable","text":"<pre><code>pip install -U wom.py\n</code></pre>"},{"location":"#development","title":"Development","text":"<pre><code>pip install -U git+https://github.com/Jonxslays/wom.py\n</code></pre> <p>For more information on using <code>pip</code>, check out the pip documentation.</p>"},{"location":"#problems","title":"Problems","text":"<p>If you're experiencing a problem with the library, please open an issue here, after first confirming a similar issue was not already created.</p>"},{"location":"#what-is-wise-old-man","title":"What is Wise Old Man","text":"<p>Wise Old Man is an open source Oldschool Runescape player progress tracker.</p> <p>If you're interested in learning more about the Wise Old Man project, consider checking out any of these links:</p> <ul> <li>Website</li> <li>API documentation</li> <li>Github repository</li> <li>Discord community</li> <li>Support the developers on Patreon</li> </ul> <p>Some of the popular features include:</p> <ul> <li>Experience tracking</li> <li>Boss killcounts</li> <li>Player achievements</li> <li>Group competitions</li> <li>Global leaderboards</li> <li>A discord bot for interacting with the API</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>wom.py is open to contributions.</p> <p>Come back soon\u2122 once I've written the contributing guide.</p>"},{"location":"#license","title":"License","text":"<p>wom.py is licensed under the MIT License.</p>"},{"location":"reference/client/","title":"client","text":"<p>This module houses the wom.py <code>Client</code>.</p> <p>Services related to different WOM endpoints are available for use on the client. All functionality is encompassed in these service methods.</p> <p>Example</p> <pre><code>from wom import Client\nclient = Client(user_agent=\"@your_discord_handle#1234\")\nawait client.start()\nresult = await client.players.search_players(\"Jonxslays\", limit=1)\nif result.is_ok:\nprint(result.unwrap())\nelse:\nprint(f\"ERROR: {result.unwrap_err()}\")\nawait client.close()\n</code></pre>"},{"location":"reference/client/#wom.client.Client","title":"Client","text":"<p>An asynchronous client used for interacting with the Wise Old Man API.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>t.Optional[str]</code> <p>The optional WOM api key to use with requests.</p> <code>None</code> <p>Other Parameters:</p> Name Type Description <code>user_agent</code> <code>t.Optional[str]</code> <p>The optional user agent to use with requests. If none is provided a library default will be used. Defaults to <code>None</code>.</p> <code>api_base_url</code> <code>t.Optional[str]</code> <p>The optional alternate api base url to use for requests. Useful for development against a local version of the WOM api. Defaults to <code>None</code>.</p> <p>Note</p> <p>None of the arguments are required, although user agent is highly encouraged.</p> Example <pre><code>from os import environ\nimport wom\nclient = wom.Client(\nenviron[\"WOM_API_KEY\"],\nuser_agent=\"@me#1234\",\napi_base_url=environ[\"LOCAL_WOM_DOMAIN\"],\n)\nawait client.start()  # Start the client\n# ... Use the client\nawait client.close()  # Close the client\n</code></pre> Source code in <code>wom/client.py</code> <pre><code>class Client:\n\"\"\"An asynchronous client used for interacting with the\n    Wise Old Man API.\n    Args:\n        api_key: The optional WOM api key to use with requests.\n    Keyword Args:\n        user_agent: The optional user agent to use with requests. If none is\n            provided a library default will be used. Defaults to `None`.\n        api_base_url: The optional alternate api base url to use for requests.\n            Useful for development against a local version of the WOM api.\n            Defaults to `None`.\n    !!! note\n        None of the arguments are required, although user agent is highly\n        encouraged.\n    ??? example\n        ```py\n        from os import environ\n        import wom\n        client = wom.Client(\n            environ[\"WOM_API_KEY\"],\n            user_agent=\"@me#1234\",\n            api_base_url=environ[\"LOCAL_WOM_DOMAIN\"],\n        )\n        await client.start()  # Start the client\n        # ... Use the client\n        await client.close()  # Close the client\n        ```\n    \"\"\"\n__slots__ = (\n\"_competitions\",\n\"_deltas\",\n\"_efficiency\",\n\"_groups\",\n\"_http\",\n\"_names\",\n\"_players\",\n\"_records\",\n\"_serializer\",\n)\ndef __init__(\nself,\napi_key: t.Optional[str] = None,\n*,\nuser_agent: t.Optional[str] = None,\napi_base_url: t.Optional[str] = None,\n) -&gt; None:\nself._serializer = serializer.Serializer()\nself._http = services.HttpService(api_key, user_agent, api_base_url)\nself.__init_core_services()\n@property\ndef competitions(self) -&gt; services.CompetitionService:\n\"\"\"The [`CompetitionService`][wom.CompetitionService] used to\n        make competition related requests.\n        \"\"\"\nreturn self._competitions\n@property\ndef deltas(self) -&gt; services.DeltaService:\n\"\"\"The [`DeltaService`][wom.DeltaService] used to make delta\n        related requests.\n        \"\"\"\nreturn self._deltas\n@property\ndef efficiency(self) -&gt; services.EfficiencyService:\n\"\"\"The [`EfficiencyService`][wom.EfficiencyService] used to make\n        efficiency related requests.\n        \"\"\"\nreturn self._efficiency\n@property\ndef groups(self) -&gt; services.GroupService:\n\"\"\"The [`GroupService`][wom.GroupService] used to make group\n        related requests.\n        \"\"\"\nreturn self._groups\n@property\ndef names(self) -&gt; services.NameChangeService:\n\"\"\"The [`NameChangeService`][wom.NameChangeService] used to make\n        name change related requests.\n        \"\"\"\nreturn self._names\n@property\ndef players(self) -&gt; services.PlayerService:\n\"\"\"The [`PlayerService`][wom.PlayerService] used to\n        make player related requests.\n        \"\"\"\nreturn self._players\n@property\ndef records(self) -&gt; services.RecordService:\n\"\"\"The [`RecordService`][wom.RecordService] used to\n        make record related requests.\n        \"\"\"\nreturn self._records\ndef __init_service(self, service: t.Type[ServiceT]) -&gt; ServiceT:\nif not issubclass(service, services.BaseService):\nraise TypeError(f\"{service.__name__!r} can not be initialized as a service.\")\nreturn service(self._http, self._serializer)  # type: ignore[return-value]\ndef __init_core_services(self) -&gt; None:\nself._deltas = self.__init_service(services.DeltaService)\nself._groups = self.__init_service(services.GroupService)\nself._players = self.__init_service(services.PlayerService)\nself._records = self.__init_service(services.RecordService)\nself._names = self.__init_service(services.NameChangeService)\nself._efficiency = self.__init_service(services.EfficiencyService)\nself._competitions = self.__init_service(services.CompetitionService)\ndef set_api_key(self, api_key: str) -&gt; None:\n\"\"\"Sets the api key used by the http service.\n        Args:\n            api_key: The new api key to use.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            client.set_api_key(\"abc123\")\n            ```\n        \"\"\"\nself._http.set_api_key(api_key)\ndef unset_api_key(self) -&gt; None:\n\"\"\"Un-sets the current api key so it isn't sent with requests.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(api_key=\"abc123\")\n            client.unset_api_key()\n            ```\n        \"\"\"\nself._http.unset_api_key()\ndef set_user_agent(self, user_agent: str) -&gt; None:\n\"\"\"Sets the user agent used by the http service.\n        Args:\n            user_agent: The new user agent to use.\n        !!! note\n            To remove a previously set user agent, call this method\n            with an empty string as the user agent.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            client.set_user_agent(\"@Hi#0000\")\n            ```\n        \"\"\"\nself._http.set_user_agent(user_agent)\ndef set_api_base_url(self, base_url: str) -&gt; None:\n\"\"\"Sets the api base url used by the http service.\n        Args:\n            base_url: The new base url to use.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            client.set_api_base_url(\"https://api.wiseoldman.net/v2\")\n            ```\n        \"\"\"\nself._http.set_base_url(base_url)\nasync def start(self) -&gt; None:\n\"\"\"Starts the client session to be used for http requests.\n        !!! warning\n            If this is not called before you use any of the services,\n            your program will crash with a `RuntimeError`.\n        !!! note\n            Don't forget to close the client!\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            ```\n        \"\"\"\nawait self._http.start()\nasync def close(self) -&gt; None:\n\"\"\"Closes the existing client session, if it's still open.\n        !!! tip\n            Only call this once, at the end of your program or if you are done\n            with the client completely.\n            This method will do nothing if the Client was never started.\n        !!! warning\n            If this is not called before your program terminates, you will\n            receive an error in your console.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.close()\n            ```\n        \"\"\"\nawait self._http.close()\n</code></pre>"},{"location":"reference/client/#wom.client.Client.competitions","title":"competitions  <code>property</code>","text":"<pre><code>competitions: services.CompetitionService\n</code></pre> <p>The <code>CompetitionService</code> used to make competition related requests.</p>"},{"location":"reference/client/#wom.client.Client.deltas","title":"deltas  <code>property</code>","text":"<pre><code>deltas: services.DeltaService\n</code></pre> <p>The <code>DeltaService</code> used to make delta related requests.</p>"},{"location":"reference/client/#wom.client.Client.efficiency","title":"efficiency  <code>property</code>","text":"<pre><code>efficiency: services.EfficiencyService\n</code></pre> <p>The <code>EfficiencyService</code> used to make efficiency related requests.</p>"},{"location":"reference/client/#wom.client.Client.groups","title":"groups  <code>property</code>","text":"<pre><code>groups: services.GroupService\n</code></pre> <p>The <code>GroupService</code> used to make group related requests.</p>"},{"location":"reference/client/#wom.client.Client.names","title":"names  <code>property</code>","text":"<pre><code>names: services.NameChangeService\n</code></pre> <p>The <code>NameChangeService</code> used to make name change related requests.</p>"},{"location":"reference/client/#wom.client.Client.players","title":"players  <code>property</code>","text":"<pre><code>players: services.PlayerService\n</code></pre> <p>The <code>PlayerService</code> used to make player related requests.</p>"},{"location":"reference/client/#wom.client.Client.records","title":"records  <code>property</code>","text":"<pre><code>records: services.RecordService\n</code></pre> <p>The <code>RecordService</code> used to make record related requests.</p>"},{"location":"reference/client/#wom.client.Client.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Closes the existing client session, if it's still open.</p> <p>Tip</p> <p>Only call this once, at the end of your program or if you are done with the client completely.</p> <p>This method will do nothing if the Client was never started.</p> <p>Warning</p> <p>If this is not called before your program terminates, you will receive an error in your console.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.close()\n</code></pre> Source code in <code>wom/client.py</code> <pre><code>async def close(self) -&gt; None:\n\"\"\"Closes the existing client session, if it's still open.\n    !!! tip\n        Only call this once, at the end of your program or if you are done\n        with the client completely.\n        This method will do nothing if the Client was never started.\n    !!! warning\n        If this is not called before your program terminates, you will\n        receive an error in your console.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.close()\n        ```\n    \"\"\"\nawait self._http.close()\n</code></pre>"},{"location":"reference/client/#wom.client.Client.set_api_base_url","title":"set_api_base_url","text":"<pre><code>set_api_base_url(base_url: str) -&gt; None\n</code></pre> <p>Sets the api base url used by the http service.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>The new base url to use.</p> required Example <pre><code>import wom\nclient = wom.Client(...)\nclient.set_api_base_url(\"https://api.wiseoldman.net/v2\")\n</code></pre> Source code in <code>wom/client.py</code> <pre><code>def set_api_base_url(self, base_url: str) -&gt; None:\n\"\"\"Sets the api base url used by the http service.\n    Args:\n        base_url: The new base url to use.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        client.set_api_base_url(\"https://api.wiseoldman.net/v2\")\n        ```\n    \"\"\"\nself._http.set_base_url(base_url)\n</code></pre>"},{"location":"reference/client/#wom.client.Client.set_api_key","title":"set_api_key","text":"<pre><code>set_api_key(api_key: str) -&gt; None\n</code></pre> <p>Sets the api key used by the http service.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The new api key to use.</p> required Example <pre><code>import wom\nclient = wom.Client(...)\nclient.set_api_key(\"abc123\")\n</code></pre> Source code in <code>wom/client.py</code> <pre><code>def set_api_key(self, api_key: str) -&gt; None:\n\"\"\"Sets the api key used by the http service.\n    Args:\n        api_key: The new api key to use.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        client.set_api_key(\"abc123\")\n        ```\n    \"\"\"\nself._http.set_api_key(api_key)\n</code></pre>"},{"location":"reference/client/#wom.client.Client.set_user_agent","title":"set_user_agent","text":"<pre><code>set_user_agent(user_agent: str) -&gt; None\n</code></pre> <p>Sets the user agent used by the http service.</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>The new user agent to use.</p> required <p>Note</p> <p>To remove a previously set user agent, call this method with an empty string as the user agent.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nclient.set_user_agent(\"@Hi#0000\")\n</code></pre> Source code in <code>wom/client.py</code> <pre><code>def set_user_agent(self, user_agent: str) -&gt; None:\n\"\"\"Sets the user agent used by the http service.\n    Args:\n        user_agent: The new user agent to use.\n    !!! note\n        To remove a previously set user agent, call this method\n        with an empty string as the user agent.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        client.set_user_agent(\"@Hi#0000\")\n        ```\n    \"\"\"\nself._http.set_user_agent(user_agent)\n</code></pre>"},{"location":"reference/client/#wom.client.Client.start","title":"start  <code>async</code>","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Starts the client session to be used for http requests.</p> <p>Warning</p> <p>If this is not called before you use any of the services, your program will crash with a <code>RuntimeError</code>.</p> <p>Note</p> <p>Don't forget to close the client!</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\n</code></pre> Source code in <code>wom/client.py</code> <pre><code>async def start(self) -&gt; None:\n\"\"\"Starts the client session to be used for http requests.\n    !!! warning\n        If this is not called before you use any of the services,\n        your program will crash with a `RuntimeError`.\n    !!! note\n        Don't forget to close the client!\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        ```\n    \"\"\"\nawait self._http.start()\n</code></pre>"},{"location":"reference/client/#wom.client.Client.unset_api_key","title":"unset_api_key","text":"<pre><code>unset_api_key() -&gt; None\n</code></pre> <p>Un-sets the current api key so it isn't sent with requests.</p> Example <pre><code>import wom\nclient = wom.Client(api_key=\"abc123\")\nclient.unset_api_key()\n</code></pre> Source code in <code>wom/client.py</code> <pre><code>def unset_api_key(self) -&gt; None:\n\"\"\"Un-sets the current api key so it isn't sent with requests.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(api_key=\"abc123\")\n        client.unset_api_key()\n        ```\n    \"\"\"\nself._http.unset_api_key()\n</code></pre>"},{"location":"reference/enums/","title":"enums","text":"<p>Global enums used throughout the project.</p>"},{"location":"reference/enums/#wom.enums.Activities","title":"Activities","text":"<p>         Bases: <code>Metric</code></p> <p>Activities from OSRS.</p> Source code in <code>wom/enums.py</code> <pre><code>class Activities(Metric):\n\"\"\"Activities from OSRS.\"\"\"\nLeaguePoints = \"league_points\"\nBountyHunterHunter = \"bounty_hunter_hunter\"\nBountyHunterRogue = \"bounty_hunter_rogue\"\nClueScrollsAll = \"clue_scrolls_all\"\nClueScrollsBeginner = \"clue_scrolls_beginner\"\nClueScrollsEasy = \"clue_scrolls_easy\"\nClueScrollsMedium = \"clue_scrolls_medium\"\nClueScrollsHard = \"clue_scrolls_hard\"\nClueScrollsElite = \"clue_scrolls_elite\"\nClueScrollsMaster = \"clue_scrolls_master\"\nLastManStanding = \"last_man_standing\"\nPvpArena = \"pvp_arena\"\nSoulWarsZeal = \"soul_wars_zeal\"\nGuardiansOfTheRift = \"guardians_of_the_rift\"\n</code></pre>"},{"location":"reference/enums/#wom.enums.BaseEnum","title":"BaseEnum","text":"<p>         Bases: <code>Enum</code></p> <p>The base enum all library enums inherit from.</p> Source code in <code>wom/enums.py</code> <pre><code>class BaseEnum(Enum):\n\"\"\"The base enum all library enums inherit from.\"\"\"\ndef __str__(self) -&gt; str:\nreturn self.value  # type: ignore[no-any-return]\n@classmethod\ndef from_str(cls: t.Type[T], value: str) -&gt; T:\n\"\"\"Generate this enum from the given value.\n        Args:\n            value: The value to generate from.\n        Returns:\n            The generated enum.\n        \"\"\"\nreturn cls(value)\n@classmethod\ndef from_str_maybe(cls: t.Type[T], value: str) -&gt; t.Optional[T]:\n\"\"\"Attempt to generate this enum from the given value.\n        Args:\n            value: The value to generate from.\n        Returns:\n            The generated enum or `None` if the value was not a valid\n                enum variant.\n        \"\"\"\ntry:\nreturn cls(value)\nexcept ValueError:\nreturn None\n</code></pre>"},{"location":"reference/enums/#wom.enums.BaseEnum.from_str","title":"from_str  <code>classmethod</code>","text":"<pre><code>from_str(value: str) -&gt; T\n</code></pre> <p>Generate this enum from the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The value to generate from.</p> required <p>Returns:</p> Type Description <code>T</code> <p>The generated enum.</p> Source code in <code>wom/enums.py</code> <pre><code>@classmethod\ndef from_str(cls: t.Type[T], value: str) -&gt; T:\n\"\"\"Generate this enum from the given value.\n    Args:\n        value: The value to generate from.\n    Returns:\n        The generated enum.\n    \"\"\"\nreturn cls(value)\n</code></pre>"},{"location":"reference/enums/#wom.enums.BaseEnum.from_str_maybe","title":"from_str_maybe  <code>classmethod</code>","text":"<pre><code>from_str_maybe(value: str) -&gt; t.Optional[T]\n</code></pre> <p>Attempt to generate this enum from the given value.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The value to generate from.</p> required <p>Returns:</p> Type Description <code>t.Optional[T]</code> <p>The generated enum or <code>None</code> if the value was not a valid enum variant.</p> Source code in <code>wom/enums.py</code> <pre><code>@classmethod\ndef from_str_maybe(cls: t.Type[T], value: str) -&gt; t.Optional[T]:\n\"\"\"Attempt to generate this enum from the given value.\n    Args:\n        value: The value to generate from.\n    Returns:\n        The generated enum or `None` if the value was not a valid\n            enum variant.\n    \"\"\"\ntry:\nreturn cls(value)\nexcept ValueError:\nreturn None\n</code></pre>"},{"location":"reference/enums/#wom.enums.Bosses","title":"Bosses","text":"<p>         Bases: <code>Metric</code></p> <p>Bosses from OSRS.</p> Source code in <code>wom/enums.py</code> <pre><code>class Bosses(Metric):\n\"\"\"Bosses from OSRS.\"\"\"\nAbyssalSire = \"abyssal_sire\"\nAlchemicalHydra = \"alchemical_hydra\"\nArtio = \"artio\"\nBarrowsChests = \"barrows_chests\"\nBryophyta = \"bryophyta\"\nCallisto = \"callisto\"\nCalvarion = \"calvarion\"\nCerberus = \"cerberus\"\nChambersOfXeric = \"chambers_of_xeric\"\nChambersOfXericChallenge = \"chambers_of_xeric_challenge_mode\"\nChaosElemental = \"chaos_elemental\"\nChaosFanatic = \"chaos_fanatic\"\nCommanderZilyana = \"commander_zilyana\"\nCorporealBeast = \"corporeal_beast\"\nCrazyArchaeologist = \"crazy_archaeologist\"\nDagannothPrime = \"dagannoth_prime\"\nDagannothRex = \"dagannoth_rex\"\nDagannothSupreme = \"dagannoth_supreme\"\nDerangedArchaeologist = \"deranged_archaeologist\"\nGeneralGraardor = \"general_graardor\"\nGiantMole = \"giant_mole\"\nGrotesqueGuardians = \"grotesque_guardians\"\nHespori = \"hespori\"\nKalphiteQueen = \"kalphite_queen\"\nKingBlackDragon = \"king_black_dragon\"\nKraken = \"kraken\"\nKreearra = \"kreearra\"\nKrilTsutsaroth = \"kril_tsutsaroth\"\nMimic = \"mimic\"\nNex = \"nex\"\nNightmare = \"nightmare\"\nPhosanisNightmare = \"phosanis_nightmare\"\nObor = \"obor\"\nPhantomMuspah = \"phantom_muspah\"\nSarachnis = \"sarachnis\"\nScorpia = \"scorpia\"\nSkotizo = \"skotizo\"\nSpindel = \"spindel\"\nTempoross = \"tempoross\"\nTheGauntlet = \"the_gauntlet\"\nTheCorruptedGauntlet = \"the_corrupted_gauntlet\"\nTheatreOfBlood = \"theatre_of_blood\"\nTheatreOfBloodHard = \"theatre_of_blood_hard_mode\"\nThermonuclearSmokeDevil = \"thermonuclear_smoke_devil\"\nTombsOfAmascut = \"tombs_of_amascut\"\nTombsOfAmascutExpert = \"tombs_of_amascut_expert\"\nTzKalZuk = \"tzkal_zuk\"\nTzTokJad = \"tztok_jad\"\nVenenatis = \"venenatis\"\nVetion = \"vetion\"\nVorkath = \"vorkath\"\nWintertodt = \"wintertodt\"\nZalcano = \"zalcano\"\nZulrah = \"zulrah\"\n</code></pre>"},{"location":"reference/enums/#wom.enums.ComputedMetrics","title":"ComputedMetrics","text":"<p>         Bases: <code>Metric</code></p> <p>A metric that is computed, i.e. efficient hours played and bossed.</p> Source code in <code>wom/enums.py</code> <pre><code>class ComputedMetrics(Metric):\n\"\"\"A metric that is computed, i.e. efficient hours played and\n    bossed.\n    \"\"\"\nEhp = \"ehp\"\nEhb = \"ehb\"\n</code></pre>"},{"location":"reference/enums/#wom.enums.Metric","title":"Metric","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Represents a metric, this enum has no attributes itself.</p> <p>Tip</p> <p>Will always be one of <code>Activities</code>, <code>Bosses</code>, <code>ComputedMetrics</code>, or <code>Skills</code>.</p> Source code in <code>wom/enums.py</code> <pre><code>class Metric(BaseEnum):\n\"\"\"Represents a metric, this enum has no attributes itself.\n    !!! tip\n        Will always be one of [`Activities`][wom.Activities],\n        [`Bosses`][wom.Bosses], [`ComputedMetrics`][wom.ComputedMetrics],\n        or [`Skills`][wom.Skills].\n    \"\"\"\n@classmethod\ndef from_str(cls: t.Type[T], value: str) -&gt; T:\nif cls is not Metric:\nreturn cls(value)\nchildren = {Skills, Activities, Bosses, ComputedMetrics}\nfor child in children:\ntry:\nreturn child(value)  # type: ignore\nexcept ValueError:\ncontinue\nraise RuntimeError(f\"No {cls} variant for {value!r}.\")\n@classmethod\ndef from_str_maybe(cls: t.Type[T], value: str) -&gt; t.Optional[T]:\nif cls is not Metric:\nreturn super(Metric, cls).from_str_maybe(value)  # pyright: ignore\nchildren = {Skills, Activities, Bosses, ComputedMetrics}\nfor child in children:\ntry:\nreturn child(value)  # type: ignore\nexcept ValueError:\ncontinue\nreturn None\n</code></pre>"},{"location":"reference/enums/#wom.enums.Period","title":"Period","text":"<p>         Bases: <code>BaseEnum</code></p> <p>A period of time used by the API.</p> Source code in <code>wom/enums.py</code> <pre><code>class Period(BaseEnum):\n\"\"\"A period of time used by the API.\"\"\"\nFiveMins = \"five_min\"\nDay = \"day\"\nWeek = \"week\"\nMonth = \"month\"\nYear = \"year\"\n</code></pre>"},{"location":"reference/enums/#wom.enums.Skills","title":"Skills","text":"<p>         Bases: <code>Metric</code></p> <p>Skills from OSRS.</p> Source code in <code>wom/enums.py</code> <pre><code>class Skills(Metric):\n\"\"\"Skills from OSRS.\"\"\"\nOverall = \"overall\"\nAttack = \"attack\"\nDefence = \"defence\"\nStrength = \"strength\"\nHitpoints = \"hitpoints\"\nRanged = \"ranged\"\nPrayer = \"prayer\"\nMagic = \"magic\"\nCooking = \"cooking\"\nWoodcutting = \"woodcutting\"\nFletching = \"fletching\"\nFishing = \"fishing\"\nFiremaking = \"firemaking\"\nCrafting = \"crafting\"\nSmithing = \"smithing\"\nMining = \"mining\"\nHerblore = \"herblore\"\nAgility = \"agility\"\nThieving = \"thieving\"\nSlayer = \"slayer\"\nFarming = \"farming\"\nRunecrafting = \"runecrafting\"\nHunter = \"hunter\"\nConstruction = \"construction\"\n</code></pre>"},{"location":"reference/errors/","title":"errors","text":"<p>This module contains various exceptions used by the project.</p>"},{"location":"reference/errors/#wom.errors.UnwrapError","title":"UnwrapError","text":"<p>         Bases: <code>WomError</code></p> <p>Raised when calling <code>unwrap()</code> or <code>unwrap_err()</code> incorrectly.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The error message.</p> required Source code in <code>wom/errors.py</code> <pre><code>class UnwrapError(WomError):\n\"\"\"Raised when calling [`unwrap()`][wom.Result.unwrap] or\n    [`unwrap_err()`][wom.Result.unwrap_err] incorrectly.\n    Args:\n        message: The error message.\n    \"\"\"\n__slots__ = ()\ndef __init__(self, message: str) -&gt; None:\nsuper().__init__(f\"Unwrap failed: {message}\")\n</code></pre>"},{"location":"reference/errors/#wom.errors.WomError","title":"WomError","text":"<p>         Bases: <code>Exception</code></p> <p>The base error all wom errors inherit from.</p> Source code in <code>wom/errors.py</code> <pre><code>class WomError(Exception):\n\"\"\"The base error all wom errors inherit from.\"\"\"\n__slots__ = ()\n</code></pre>"},{"location":"reference/models/","title":"models","text":"<p>This module contains the models used to represent data returned by the WOM API.</p> <p>Enums related to specific services are also housed in the module.</p> <p>Tip</p> <p>Most of the models here you won't create, but a few you will. Those will be documented as such.</p>"},{"location":"reference/models/#wom.models.Achievement","title":"Achievement","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents an achievement made by a player.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass Achievement(BaseModel):\n\"\"\"Represents an achievement made by a player.\"\"\"\nplayer_id: int\n\"\"\"The unique ID of the player.\"\"\"\nname: str\n\"\"\"The name of the achievement.\"\"\"\nmetric: enums.Metric\n\"\"\"The [`Metric`][wom.Metric] for this achievement.\"\"\"\nmeasure: AchievementMeasure\n\"\"\"The [`AchievementMeasure`][wom.AchievementMeasure] that\n    the player obtained.\n    \"\"\"\nthreshold: int\n\"\"\"The threshold for this achievement.\"\"\"\ncreated_at: datetime\n\"\"\"The date the achievement was achieved.\"\"\"\naccuracy: t.Optional[int]\n\"\"\"The margin of error for the achievements creation date.\n    !!! note\n        Can be `None` if the achievement hasn't been recalculated since\n        the addition of this field (~ Feb 2023). It can also be -1 for\n        achievements with unknown dates.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.Achievement.accuracy","title":"accuracy  <code>instance-attribute</code>","text":"<pre><code>accuracy: t.Optional[int]\n</code></pre> <p>The margin of error for the achievements creation date.</p> <p>Note</p> <p>Can be <code>None</code> if the achievement hasn't been recalculated since the addition of this field (~ Feb 2023). It can also be -1 for achievements with unknown dates.</p>"},{"location":"reference/models/#wom.models.players.models.Achievement.created_at","title":"created_at  <code>instance-attribute</code>","text":"<pre><code>created_at: datetime\n</code></pre> <p>The date the achievement was achieved.</p>"},{"location":"reference/models/#wom.models.players.models.Achievement.measure","title":"measure  <code>instance-attribute</code>","text":"<pre><code>measure: AchievementMeasure\n</code></pre> <p>The <code>AchievementMeasure</code> that the player obtained.</p>"},{"location":"reference/models/#wom.models.players.models.Achievement.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.Metric\n</code></pre> <p>The <code>Metric</code> for this achievement.</p>"},{"location":"reference/models/#wom.models.players.models.Achievement.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the achievement.</p>"},{"location":"reference/models/#wom.models.players.models.Achievement.player_id","title":"player_id  <code>instance-attribute</code>","text":"<pre><code>player_id: int\n</code></pre> <p>The unique ID of the player.</p>"},{"location":"reference/models/#wom.models.players.models.Achievement.threshold","title":"threshold  <code>instance-attribute</code>","text":"<pre><code>threshold: int\n</code></pre> <p>The threshold for this achievement.</p>"},{"location":"reference/models/#wom.models.AchievementMeasure","title":"AchievementMeasure","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Measures used to categorize achievements.</p> Source code in <code>wom/models/players/enums.py</code> <pre><code>class AchievementMeasure(BaseEnum):\n\"\"\"Measures used to categorize achievements.\"\"\"\nLevels = \"levels\"\nExperience = \"experience\"\nKills = \"kills\"\nScore = \"score\"\nValue = \"value\"\n</code></pre>"},{"location":"reference/models/#wom.models.AchievementProgress","title":"AchievementProgress","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents progress made toward an achievement.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass AchievementProgress(BaseModel):\n\"\"\"Represents progress made toward an achievement.\"\"\"\nplayer_id: int\n\"\"\"The unique ID of the player.\"\"\"\nname: str\n\"\"\"The name of the achievement.\"\"\"\nmetric: enums.Metric\n\"\"\"The [`Metric`][wom.Metric] for this achievement.\"\"\"\nmeasure: AchievementMeasure\n\"\"\"The [`AchievementMeasure`][wom.AchievementMeasure] that\n    the player obtained.\n    \"\"\"\nthreshold: int\n\"\"\"The threshold for this achievement.\"\"\"\ncreated_at: t.Optional[datetime]\n\"\"\"The date the achievement was achieved, or `None` if it has not\n    been achieved.\n    \"\"\"\naccuracy: t.Optional[int]\n\"\"\"The margin of error for the achievements creation date.\n    !!! note\n        Can be `None` if the achievement hasn't been recalculated since\n        the addition of this field (~ Feb 2023). It can also be -1 for\n        achievements with unknown dates.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.AchievementProgress.accuracy","title":"accuracy  <code>instance-attribute</code>","text":"<pre><code>accuracy: t.Optional[int]\n</code></pre> <p>The margin of error for the achievements creation date.</p> <p>Note</p> <p>Can be <code>None</code> if the achievement hasn't been recalculated since the addition of this field (~ Feb 2023). It can also be -1 for achievements with unknown dates.</p>"},{"location":"reference/models/#wom.models.players.models.AchievementProgress.created_at","title":"created_at  <code>instance-attribute</code>","text":"<pre><code>created_at: t.Optional[datetime]\n</code></pre> <p>The date the achievement was achieved, or <code>None</code> if it has not been achieved.</p>"},{"location":"reference/models/#wom.models.players.models.AchievementProgress.measure","title":"measure  <code>instance-attribute</code>","text":"<pre><code>measure: AchievementMeasure\n</code></pre> <p>The <code>AchievementMeasure</code> that the player obtained.</p>"},{"location":"reference/models/#wom.models.players.models.AchievementProgress.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.Metric\n</code></pre> <p>The <code>Metric</code> for this achievement.</p>"},{"location":"reference/models/#wom.models.players.models.AchievementProgress.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the achievement.</p>"},{"location":"reference/models/#wom.models.players.models.AchievementProgress.player_id","title":"player_id  <code>instance-attribute</code>","text":"<pre><code>player_id: int\n</code></pre> <p>The unique ID of the player.</p>"},{"location":"reference/models/#wom.models.players.models.AchievementProgress.threshold","title":"threshold  <code>instance-attribute</code>","text":"<pre><code>threshold: int\n</code></pre> <p>The threshold for this achievement.</p>"},{"location":"reference/models/#wom.models.Activity","title":"Activity","text":"<p>         Bases: <code>BaseModel</code></p> <p>Details regarding a particular activity.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass Activity(BaseModel):\n\"\"\"Details regarding a particular activity.\"\"\"\nmetric: enums.Activities\n\"\"\"The [`Activities`][wom.Activities] being measured.\"\"\"\nrank: int\n\"\"\"The players rank in the activity.\"\"\"\nscore: int\n\"\"\"The players score in the activity.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.Activity.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.Activities\n</code></pre> <p>The <code>Activities</code> being measured.</p>"},{"location":"reference/models/#wom.models.players.models.Activity.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>The players rank in the activity.</p>"},{"location":"reference/models/#wom.models.players.models.Activity.score","title":"score  <code>instance-attribute</code>","text":"<pre><code>score: int\n</code></pre> <p>The players score in the activity.</p>"},{"location":"reference/models/#wom.models.ActivityGains","title":"ActivityGains","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents activity gains made by a player.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass ActivityGains(BaseModel):\n\"\"\"Represents activity gains made by a player.\"\"\"\nmetric: enums.Activities\n\"\"\"The [`Activities`][wom.Activities] being measured.\"\"\"\nrank: Gains\n\"\"\"The rank [`Gains`][wom.Gains].\"\"\"\nscore: Gains\n\"\"\"The score [`Gains`][wom.Gains].\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.ActivityGains.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.Activities\n</code></pre> <p>The <code>Activities</code> being measured.</p>"},{"location":"reference/models/#wom.models.players.models.ActivityGains.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: Gains\n</code></pre> <p>The rank <code>Gains</code>.</p>"},{"location":"reference/models/#wom.models.players.models.ActivityGains.score","title":"score  <code>instance-attribute</code>","text":"<pre><code>score: Gains\n</code></pre> <p>The score <code>Gains</code>.</p>"},{"location":"reference/models/#wom.models.ActivityLeader","title":"ActivityLeader","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a leader in a particular activity.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass ActivityLeader(BaseModel):\n\"\"\"Represents a leader in a particular activity.\"\"\"\nmetric: enums.Activities\n\"\"\"The [`Activities`][wom.Activities] being measured.\"\"\"\nrank: int\n\"\"\"The players rank in the activity.\"\"\"\nscore: int\n\"\"\"The players score in the activity.\"\"\"\nplayer: t.Optional[Player]\n\"\"\"The player leading in this metric, or `None` if none do.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.ActivityLeader.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.Activities\n</code></pre> <p>The <code>Activities</code> being measured.</p>"},{"location":"reference/models/#wom.models.groups.models.ActivityLeader.player","title":"player  <code>instance-attribute</code>","text":"<pre><code>player: t.Optional[Player]\n</code></pre> <p>The player leading in this metric, or <code>None</code> if none do.</p>"},{"location":"reference/models/#wom.models.groups.models.ActivityLeader.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>The players rank in the activity.</p>"},{"location":"reference/models/#wom.models.groups.models.ActivityLeader.score","title":"score  <code>instance-attribute</code>","text":"<pre><code>score: int\n</code></pre> <p>The players score in the activity.</p>"},{"location":"reference/models/#wom.models.BaseModel","title":"BaseModel","text":"<p>The base model all library models inherit from.</p> Source code in <code>wom/models/base.py</code> <pre><code>@attrs.define\nclass BaseModel:\n\"\"\"The base model all library models inherit from.\"\"\"\ndef to_dict(self) -&gt; t.Dict[str, t.Any]:\n\"\"\"Converts this class into a dictionary.\n        Returns:\n            The requested dictionary.\n        \"\"\"\nreturn attrs.asdict(self)\n</code></pre>"},{"location":"reference/models/#wom.models.base.BaseModel.to_dict","title":"to_dict","text":"<pre><code>to_dict() -&gt; t.Dict[str, t.Any]\n</code></pre> <p>Converts this class into a dictionary.</p> <p>Returns:</p> Type Description <code>t.Dict[str, t.Any]</code> <p>The requested dictionary.</p> Source code in <code>wom/models/base.py</code> <pre><code>def to_dict(self) -&gt; t.Dict[str, t.Any]:\n\"\"\"Converts this class into a dictionary.\n    Returns:\n        The requested dictionary.\n    \"\"\"\nreturn attrs.asdict(self)\n</code></pre>"},{"location":"reference/models/#wom.models.Boss","title":"Boss","text":"<p>         Bases: <code>BaseModel</code></p> <p>Details regarding a particular boss.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass Boss(BaseModel):\n\"\"\"Details regarding a particular boss.\"\"\"\nmetric: enums.Bosses\n\"\"\"The [`Bosses`][wom.Bosses] being measured.\"\"\"\nrank: int\n\"\"\"The players rank in killing the boss.\"\"\"\nkills: int\n\"\"\"The number of kills the player has.\"\"\"\nehb: float\n\"\"\"The players efficient hours bossed for the boss.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.Boss.ehb","title":"ehb  <code>instance-attribute</code>","text":"<pre><code>ehb: float\n</code></pre> <p>The players efficient hours bossed for the boss.</p>"},{"location":"reference/models/#wom.models.players.models.Boss.kills","title":"kills  <code>instance-attribute</code>","text":"<pre><code>kills: int\n</code></pre> <p>The number of kills the player has.</p>"},{"location":"reference/models/#wom.models.players.models.Boss.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.Bosses\n</code></pre> <p>The <code>Bosses</code> being measured.</p>"},{"location":"reference/models/#wom.models.players.models.Boss.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>The players rank in killing the boss.</p>"},{"location":"reference/models/#wom.models.BossGains","title":"BossGains","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents boss gains made by a player.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass BossGains(BaseModel):\n\"\"\"Represents boss gains made by a player.\"\"\"\nmetric: enums.Bosses\n\"\"\"The [`Bosses`][wom.Bosses] being measured.\"\"\"\nehb: Gains\n\"\"\"The efficient hours bossed [`Gains`][wom.Gains].\"\"\"\nrank: Gains\n\"\"\"The rank [`Gains`][wom.Gains].\"\"\"\nkills: Gains\n\"\"\"The boss kill [`Gains`][wom.Gains].\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.BossGains.ehb","title":"ehb  <code>instance-attribute</code>","text":"<pre><code>ehb: Gains\n</code></pre> <p>The efficient hours bossed <code>Gains</code>.</p>"},{"location":"reference/models/#wom.models.players.models.BossGains.kills","title":"kills  <code>instance-attribute</code>","text":"<pre><code>kills: Gains\n</code></pre> <p>The boss kill <code>Gains</code>.</p>"},{"location":"reference/models/#wom.models.players.models.BossGains.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.Bosses\n</code></pre> <p>The <code>Bosses</code> being measured.</p>"},{"location":"reference/models/#wom.models.players.models.BossGains.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: Gains\n</code></pre> <p>The rank <code>Gains</code>.</p>"},{"location":"reference/models/#wom.models.BossLeader","title":"BossLeader","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a leader in a particular boss.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass BossLeader(BaseModel):\n\"\"\"Represents a leader in a particular boss.\"\"\"\nmetric: enums.Bosses\n\"\"\"The [`Bosses`][wom.Bosses] being measured.\"\"\"\nrank: int\n\"\"\"The players rank in killing the boss.\"\"\"\nkills: int\n\"\"\"The number of kills the player has.\"\"\"\nplayer: t.Optional[Player]\n\"\"\"The player leading in this metric, or `None` if none do.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.BossLeader.kills","title":"kills  <code>instance-attribute</code>","text":"<pre><code>kills: int\n</code></pre> <p>The number of kills the player has.</p>"},{"location":"reference/models/#wom.models.groups.models.BossLeader.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.Bosses\n</code></pre> <p>The <code>Bosses</code> being measured.</p>"},{"location":"reference/models/#wom.models.groups.models.BossLeader.player","title":"player  <code>instance-attribute</code>","text":"<pre><code>player: t.Optional[Player]\n</code></pre> <p>The player leading in this metric, or <code>None</code> if none do.</p>"},{"location":"reference/models/#wom.models.groups.models.BossLeader.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>The players rank in killing the boss.</p>"},{"location":"reference/models/#wom.models.Competition","title":"Competition","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a competition.</p> Source code in <code>wom/models/competitions/models.py</code> <pre><code>@attrs.define(init=False)\nclass Competition(BaseModel):\n\"\"\"Represents a competition.\"\"\"\nid: int\n\"\"\"The unique ID of the competition.\"\"\"\ntitle: str\n\"\"\"The title of the competition.\"\"\"\nmetric: enums.Metric\n\"\"\"The metric being measured.\"\"\"\ntype: CompetitionType\n\"\"\"The [CompetitionType][wom.CompetitionType].\"\"\"\nstarts_at: datetime\n\"\"\"The date the competition started at.\"\"\"\nends_at: datetime\n\"\"\"The date the competition ended at.\"\"\"\ngroup_id: t.Optional[int]\n\"\"\"The optional group id associated with the competition.\"\"\"\nscore: int\n\"\"\"The competition's score.\"\"\"\ncreated_at: datetime\n\"\"\"The date the competition was created.\"\"\"\nupdated_at: datetime\n\"\"\"The date the competition was updated.\"\"\"\nparticipant_count: int\n\"\"\"The number of players participating.\"\"\"\ngroup: t.Optional[Group]\n\"\"\"The [`Group`][wom.Group] associated with the competition, if\n    there is one.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.competitions.models.Competition.created_at","title":"created_at  <code>instance-attribute</code>","text":"<pre><code>created_at: datetime\n</code></pre> <p>The date the competition was created.</p>"},{"location":"reference/models/#wom.models.competitions.models.Competition.ends_at","title":"ends_at  <code>instance-attribute</code>","text":"<pre><code>ends_at: datetime\n</code></pre> <p>The date the competition ended at.</p>"},{"location":"reference/models/#wom.models.competitions.models.Competition.group","title":"group  <code>instance-attribute</code>","text":"<pre><code>group: t.Optional[Group]\n</code></pre> <p>The <code>Group</code> associated with the competition, if there is one.</p>"},{"location":"reference/models/#wom.models.competitions.models.Competition.group_id","title":"group_id  <code>instance-attribute</code>","text":"<pre><code>group_id: t.Optional[int]\n</code></pre> <p>The optional group id associated with the competition.</p>"},{"location":"reference/models/#wom.models.competitions.models.Competition.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The unique ID of the competition.</p>"},{"location":"reference/models/#wom.models.competitions.models.Competition.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.Metric\n</code></pre> <p>The metric being measured.</p>"},{"location":"reference/models/#wom.models.competitions.models.Competition.participant_count","title":"participant_count  <code>instance-attribute</code>","text":"<pre><code>participant_count: int\n</code></pre> <p>The number of players participating.</p>"},{"location":"reference/models/#wom.models.competitions.models.Competition.score","title":"score  <code>instance-attribute</code>","text":"<pre><code>score: int\n</code></pre> <p>The competition's score.</p>"},{"location":"reference/models/#wom.models.competitions.models.Competition.starts_at","title":"starts_at  <code>instance-attribute</code>","text":"<pre><code>starts_at: datetime\n</code></pre> <p>The date the competition started at.</p>"},{"location":"reference/models/#wom.models.competitions.models.Competition.title","title":"title  <code>instance-attribute</code>","text":"<pre><code>title: str\n</code></pre> <p>The title of the competition.</p>"},{"location":"reference/models/#wom.models.competitions.models.Competition.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: CompetitionType\n</code></pre> <p>The CompetitionType.</p>"},{"location":"reference/models/#wom.models.competitions.models.Competition.updated_at","title":"updated_at  <code>instance-attribute</code>","text":"<pre><code>updated_at: datetime\n</code></pre> <p>The date the competition was updated.</p>"},{"location":"reference/models/#wom.models.CompetitionDetail","title":"CompetitionDetail","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents competition details.</p> Source code in <code>wom/models/competitions/models.py</code> <pre><code>@attrs.define(init=False)\nclass CompetitionDetail(BaseModel):\n\"\"\"Represents competition details.\"\"\"\ncompetition: Competition\n\"\"\"The [`Competition`][wom.Competition] that is being detailed.\"\"\"\nparticipations: t.List[CompetitionParticipationDetail]\n\"\"\"A list of [`CompetitionParticipationDetail`]\n    [wom.CompetitionParticipationDetail] participations for this\n    competition.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionDetail.competition","title":"competition  <code>instance-attribute</code>","text":"<pre><code>competition: Competition\n</code></pre> <p>The <code>Competition</code> that is being detailed.</p>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionDetail.participations","title":"participations  <code>instance-attribute</code>","text":"<pre><code>participations: t.List[CompetitionParticipationDetail]\n</code></pre> <p>A list of <code>CompetitionParticipationDetail</code> participations for this competition.</p>"},{"location":"reference/models/#wom.models.CompetitionHistoryDataPoint","title":"CompetitionHistoryDataPoint","text":"<p>         Bases: <code>BaseModel</code></p> <p>A competition history data point.</p> Source code in <code>wom/models/competitions/models.py</code> <pre><code>@attrs.define(init=False)\nclass CompetitionHistoryDataPoint(BaseModel):\n\"\"\"A competition history data point.\"\"\"\ndate: datetime\n\"\"\"The date this data point occurred.\"\"\"\nvalue: int\n\"\"\"The value of the data point.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionHistoryDataPoint.date","title":"date  <code>instance-attribute</code>","text":"<pre><code>date: datetime\n</code></pre> <p>The date this data point occurred.</p>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionHistoryDataPoint.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: int\n</code></pre> <p>The value of the data point.</p>"},{"location":"reference/models/#wom.models.CompetitionParticipation","title":"CompetitionParticipation","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a competition participation.</p> Source code in <code>wom/models/competitions/models.py</code> <pre><code>@attrs.define(init=False)\nclass CompetitionParticipation(BaseModel):\n\"\"\"Represents a competition participation.\"\"\"\ndata: Participation\n\"\"\"The [`Participation`][wom.models.Participation] achieved in this\n    competition.\n    \"\"\"\nplayer: Player\n\"\"\"The [`Player`][wom.Player] that participated in this competition.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionParticipation.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: Participation\n</code></pre> <p>The <code>Participation</code> achieved in this competition.</p>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionParticipation.player","title":"player  <code>instance-attribute</code>","text":"<pre><code>player: Player\n</code></pre> <p>The <code>Player</code> that participated in this competition.</p>"},{"location":"reference/models/#wom.models.CompetitionParticipationDetail","title":"CompetitionParticipationDetail","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents competition participation details.</p> Source code in <code>wom/models/competitions/models.py</code> <pre><code>@attrs.define(init=False)\nclass CompetitionParticipationDetail(BaseModel):\n\"\"\"Represents competition participation details.\"\"\"\nparticipation: CompetitionParticipation\n\"\"\"The [`CompetitionParticipation`][wom.CompetitionParticipation]\n    in these details.\n    \"\"\"\nprogress: CompetitionProgress\n\"\"\"The [`CompetitionProgress`][wom.CompetitionProgress] that was\n    made.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionParticipationDetail.participation","title":"participation  <code>instance-attribute</code>","text":"<pre><code>participation: CompetitionParticipation\n</code></pre> <p>The <code>CompetitionParticipation</code> in these details.</p>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionParticipationDetail.progress","title":"progress  <code>instance-attribute</code>","text":"<pre><code>progress: CompetitionProgress\n</code></pre> <p>The <code>CompetitionProgress</code> that was made.</p>"},{"location":"reference/models/#wom.models.CompetitionProgress","title":"CompetitionProgress","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents progress in a competition.</p> Source code in <code>wom/models/competitions/models.py</code> <pre><code>@attrs.define(init=False)\nclass CompetitionProgress(BaseModel):\n\"\"\"Represents progress in a competition.\"\"\"\nstart: int\n\"\"\"The starting value for the competition's metric.\"\"\"\nend: int\n\"\"\"The ending value for the competition's metric.\"\"\"\ngained: int\n\"\"\"The amount of progress gained in the metric.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionProgress.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end: int\n</code></pre> <p>The ending value for the competition's metric.</p>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionProgress.gained","title":"gained  <code>instance-attribute</code>","text":"<pre><code>gained: int\n</code></pre> <p>The amount of progress gained in the metric.</p>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionProgress.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start: int\n</code></pre> <p>The starting value for the competition's metric.</p>"},{"location":"reference/models/#wom.models.CompetitionStatus","title":"CompetitionStatus","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Potential competition statuses.</p> Source code in <code>wom/models/competitions/enums.py</code> <pre><code>class CompetitionStatus(BaseEnum):\n\"\"\"Potential competition statuses.\"\"\"\nUpcoming = \"upcoming\"\nOngoing = \"ongoing\"\nFinished = \"finished\"\n</code></pre>"},{"location":"reference/models/#wom.models.CompetitionType","title":"CompetitionType","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Competition types available on WOM.</p> Source code in <code>wom/models/competitions/enums.py</code> <pre><code>class CompetitionType(BaseEnum):\n\"\"\"Competition types available on WOM.\"\"\"\nClassic = \"classic\"\nTeam = \"team\"\n</code></pre>"},{"location":"reference/models/#wom.models.CompetitionWithParticipations","title":"CompetitionWithParticipations","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a competition with participations.</p> Source code in <code>wom/models/competitions/models.py</code> <pre><code>@attrs.define(init=False)\nclass CompetitionWithParticipations(BaseModel):\n\"\"\"Represents a competition with participations.\"\"\"\ncompetition: Competition\n\"\"\"The [`Competition`][wom.Competition] itself.\"\"\"\nparticipations: t.List[CompetitionParticipation]\n\"\"\"A list containing the [`CompetitionParticipations`]\n    [wom.CompetitionParticipation].\n    \"\"\"\nverification_code: t.Optional[str]\n\"\"\"The verification code for the competition.\n    !!! note\n        Only returned when a competition is created and will be\n        `None` otherwise.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionWithParticipations.competition","title":"competition  <code>instance-attribute</code>","text":"<pre><code>competition: Competition\n</code></pre> <p>The <code>Competition</code> itself.</p>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionWithParticipations.participations","title":"participations  <code>instance-attribute</code>","text":"<pre><code>participations: t.List[CompetitionParticipation]\n</code></pre> <p>A list containing the <code>CompetitionParticipations</code>.</p>"},{"location":"reference/models/#wom.models.competitions.models.CompetitionWithParticipations.verification_code","title":"verification_code  <code>instance-attribute</code>","text":"<pre><code>verification_code: t.Optional[str]\n</code></pre> <p>The verification code for the competition.</p> <p>Note</p> <p>Only returned when a competition is created and will be <code>None</code> otherwise.</p>"},{"location":"reference/models/#wom.models.ComputedGains","title":"ComputedGains","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents computed gains made by a player.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass ComputedGains(BaseModel):\n\"\"\"Represents computed gains made by a player.\"\"\"\nmetric: enums.ComputedMetrics\n\"\"\"The [`ComputedMetrics`][wom.ComputedMetrics] being measured.\"\"\"\nrank: Gains\n\"\"\"The rank [`Gains`][wom.Gains].\"\"\"\nvalue: Gains\n\"\"\"The value [`Gains`][wom.Gains].\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.ComputedGains.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.ComputedMetrics\n</code></pre> <p>The <code>ComputedMetrics</code> being measured.</p>"},{"location":"reference/models/#wom.models.players.models.ComputedGains.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: Gains\n</code></pre> <p>The rank <code>Gains</code>.</p>"},{"location":"reference/models/#wom.models.players.models.ComputedGains.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: Gains\n</code></pre> <p>The value <code>Gains</code>.</p>"},{"location":"reference/models/#wom.models.ComputedMetric","title":"ComputedMetric","text":"<p>         Bases: <code>BaseModel</code></p> <p>Details regarding a computed metric.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass ComputedMetric(BaseModel):\n\"\"\"Details regarding a computed metric.\"\"\"\nmetric: enums.ComputedMetrics\n\"\"\"The [`ComputedMetrics`][wom.ComputedMetrics] being\n    measured.\n    \"\"\"\nrank: int\n\"\"\"The players rank in the computed metric.\"\"\"\nvalue: float\n\"\"\"The value of the computed metric.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.ComputedMetric.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.ComputedMetrics\n</code></pre> <p>The <code>ComputedMetrics</code> being measured.</p>"},{"location":"reference/models/#wom.models.players.models.ComputedMetric.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>The players rank in the computed metric.</p>"},{"location":"reference/models/#wom.models.players.models.ComputedMetric.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: float\n</code></pre> <p>The value of the computed metric.</p>"},{"location":"reference/models/#wom.models.ComputedMetricLeader","title":"ComputedMetricLeader","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a leader in a particular computed metric.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass ComputedMetricLeader(BaseModel):\n\"\"\"Represents a leader in a particular computed metric.\"\"\"\nmetric: enums.ComputedMetrics\n\"\"\"The [`ComputedMetrics`][wom.ComputedMetrics] being\n    measured.\n    \"\"\"\nrank: int\n\"\"\"The players rank in the computed metric.\"\"\"\nvalue: int\n\"\"\"The value of the computed metric.\"\"\"\nplayer: t.Optional[Player]\n\"\"\"The player leading in this metric, or `None` if none do.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.ComputedMetricLeader.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.ComputedMetrics\n</code></pre> <p>The <code>ComputedMetrics</code> being measured.</p>"},{"location":"reference/models/#wom.models.groups.models.ComputedMetricLeader.player","title":"player  <code>instance-attribute</code>","text":"<pre><code>player: t.Optional[Player]\n</code></pre> <p>The player leading in this metric, or <code>None</code> if none do.</p>"},{"location":"reference/models/#wom.models.groups.models.ComputedMetricLeader.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>The players rank in the computed metric.</p>"},{"location":"reference/models/#wom.models.groups.models.ComputedMetricLeader.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: int\n</code></pre> <p>The value of the computed metric.</p>"},{"location":"reference/models/#wom.models.Country","title":"Country","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Countries in the world.</p> Source code in <code>wom/models/players/enums.py</code> <pre><code>class Country(BaseEnum):\n\"\"\"Countries in the world.\"\"\"\nAd = \"AD\"\nAe = \"AE\"\nAf = \"AF\"\nAg = \"AG\"\nAi = \"AI\"\nAl = \"AL\"\nAm = \"AM\"\nAo = \"AO\"\nAq = \"AQ\"\nAr = \"AR\"\nAs = \"AS\"\nAt = \"AT\"\nAu = \"AU\"\nAw = \"AW\"\nAx = \"AX\"\nAz = \"AZ\"\nBa = \"BA\"\nBb = \"BB\"\nBd = \"BD\"\nBe = \"BE\"\nBf = \"BF\"\nBg = \"BG\"\nBh = \"BH\"\nBi = \"BI\"\nBj = \"BJ\"\nBl = \"BL\"\nBm = \"BM\"\nBn = \"BN\"\nBo = \"BO\"\nBq = \"BQ\"\nBr = \"BR\"\nBs = \"BS\"\nBt = \"BT\"\nBv = \"BV\"\nBw = \"BW\"\nBy = \"BY\"\nBz = \"BZ\"\nCa = \"CA\"\nCc = \"CC\"\nCd = \"CD\"\nCf = \"CF\"\nCg = \"CG\"\nCh = \"CH\"\nCi = \"CI\"\nCk = \"CK\"\nCl = \"CL\"\nCm = \"CM\"\nCn = \"CN\"\nCo = \"CO\"\nCr = \"CR\"\nCu = \"CU\"\nCv = \"CV\"\nCw = \"CW\"\nCx = \"CX\"\nCy = \"CY\"\nCz = \"CZ\"\nDe = \"DE\"\nDj = \"DJ\"\nDk = \"DK\"\nDm = \"DM\"\nDo = \"DO\"\nDz = \"DZ\"\nEc = \"EC\"\nEe = \"EE\"\nEg = \"EG\"\nEh = \"EH\"\nEr = \"ER\"\nEs = \"ES\"\nEt = \"ET\"\nFi = \"FI\"\nFj = \"FJ\"\nFk = \"FK\"\nFm = \"FM\"\nFo = \"FO\"\nFr = \"FR\"\nGa = \"GA\"\nGb = \"GB\"\nGd = \"GD\"\nGe = \"GE\"\nGf = \"GF\"\nGg = \"GG\"\nGh = \"GH\"\nGi = \"GI\"\nGl = \"GL\"\nGm = \"GM\"\nGn = \"GN\"\nGp = \"GP\"\nGq = \"GQ\"\nGr = \"GR\"\nGs = \"GS\"\nGt = \"GT\"\nGu = \"GU\"\nGw = \"GW\"\nGy = \"GY\"\nHk = \"HK\"\nHm = \"HM\"\nHn = \"HN\"\nHr = \"HR\"\nHt = \"HT\"\nHu = \"HU\"\nId = \"ID\"\nIe = \"IE\"\nIl = \"IL\"\nIm = \"IM\"\nIn = \"IN\"\nIo = \"IO\"\nIq = \"IQ\"\nIr = \"IR\"\nIs = \"IS\"\nIt = \"IT\"\nJe = \"JE\"\nJm = \"JM\"\nJo = \"JO\"\nJp = \"JP\"\nKe = \"KE\"\nKg = \"KG\"\nKh = \"KH\"\nKi = \"KI\"\nKm = \"KM\"\nKn = \"KN\"\nKp = \"KP\"\nKr = \"KR\"\nKw = \"KW\"\nKy = \"KY\"\nKz = \"KZ\"\nLa = \"LA\"\nLb = \"LB\"\nLc = \"LC\"\nLi = \"LI\"\nLk = \"LK\"\nLr = \"LR\"\nLs = \"LS\"\nLt = \"LT\"\nLu = \"LU\"\nLv = \"LV\"\nLy = \"LY\"\nMa = \"MA\"\nMc = \"MC\"\nMd = \"MD\"\nMe = \"ME\"\nMf = \"MF\"\nMg = \"MG\"\nMh = \"MH\"\nMk = \"MK\"\nMl = \"ML\"\nMm = \"MM\"\nMn = \"MN\"\nMo = \"MO\"\nMp = \"MP\"\nMq = \"MQ\"\nMr = \"MR\"\nMs = \"MS\"\nMt = \"MT\"\nMu = \"MU\"\nMv = \"MV\"\nMw = \"MW\"\nMx = \"MX\"\nMy = \"MY\"\nMz = \"MZ\"\nNa = \"NA\"\nNc = \"NC\"\nNe = \"NE\"\nNf = \"NF\"\nNg = \"NG\"\nNi = \"NI\"\nNl = \"NL\"\nNo = \"NO\"\nNp = \"NP\"\nNr = \"NR\"\nNu = \"NU\"\nNz = \"NZ\"\nOm = \"OM\"\nPa = \"PA\"\nPe = \"PE\"\nPf = \"PF\"\nPg = \"PG\"\nPh = \"PH\"\nPk = \"PK\"\nPl = \"PL\"\nPm = \"PM\"\nPn = \"PN\"\nPr = \"PR\"\nPs = \"PS\"\nPt = \"PT\"\nPw = \"PW\"\nPy = \"PY\"\nQa = \"QA\"\nRe = \"RE\"\nRo = \"RO\"\nRs = \"RS\"\nRu = \"RU\"\nRw = \"RW\"\nSa = \"SA\"\nSb = \"SB\"\nSc = \"SC\"\nSd = \"SD\"\nSe = \"SE\"\nSg = \"SG\"\nSh = \"SH\"\nSi = \"SI\"\nSj = \"SJ\"\nSk = \"SK\"\nSl = \"SL\"\nSm = \"SM\"\nSn = \"SN\"\nSo = \"SO\"\nSr = \"SR\"\nSs = \"SS\"\nSt = \"ST\"\nSv = \"SV\"\nSx = \"SX\"\nSy = \"SY\"\nSz = \"SZ\"\nTc = \"TC\"\nTd = \"TD\"\nTf = \"TF\"\nTg = \"TG\"\nTh = \"TH\"\nTj = \"TJ\"\nTk = \"TK\"\nTl = \"TL\"\nTm = \"TM\"\nTn = \"TN\"\nTo = \"TO\"\nTr = \"TR\"\nTt = \"TT\"\nTv = \"TV\"\nTw = \"TW\"\nTz = \"TZ\"\nUa = \"UA\"\nUg = \"UG\"\nUm = \"UM\"\nUs = \"US\"\nUy = \"UY\"\nUz = \"UZ\"\nVa = \"VA\"\nVc = \"VC\"\nVe = \"VE\"\nVg = \"VG\"\nVi = \"VI\"\nVn = \"VN\"\nVu = \"VU\"\nWf = \"WF\"\nWs = \"WS\"\nYe = \"YE\"\nYt = \"YT\"\nZa = \"ZA\"\nZm = \"ZM\"\nZw = \"ZW\"\n</code></pre>"},{"location":"reference/models/#wom.models.DeltaLeaderboardEntry","title":"DeltaLeaderboardEntry","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a leaderboard entry over the given delta.</p> Source code in <code>wom/models/deltas/models.py</code> <pre><code>@attrs.define(init=False)\nclass DeltaLeaderboardEntry(BaseModel):\n\"\"\"Represents a leaderboard entry over the given delta.\"\"\"\nplayer_id: int\n\"\"\"The ID of the player holding this leaderboard entry.\"\"\"\ngained: int\n\"\"\"The value gained over the delta.\"\"\"\nstart_date: datetime\n\"\"\"The start date of the delta.\"\"\"\nend_date: datetime\n\"\"\"The end date of the delta.\"\"\"\nplayer: Player\n\"\"\"The [`Player`][wom.Player] holding this leaderboard entry.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.deltas.models.DeltaLeaderboardEntry.end_date","title":"end_date  <code>instance-attribute</code>","text":"<pre><code>end_date: datetime\n</code></pre> <p>The end date of the delta.</p>"},{"location":"reference/models/#wom.models.deltas.models.DeltaLeaderboardEntry.gained","title":"gained  <code>instance-attribute</code>","text":"<pre><code>gained: int\n</code></pre> <p>The value gained over the delta.</p>"},{"location":"reference/models/#wom.models.deltas.models.DeltaLeaderboardEntry.player","title":"player  <code>instance-attribute</code>","text":"<pre><code>player: Player\n</code></pre> <p>The <code>Player</code> holding this leaderboard entry.</p>"},{"location":"reference/models/#wom.models.deltas.models.DeltaLeaderboardEntry.player_id","title":"player_id  <code>instance-attribute</code>","text":"<pre><code>player_id: int\n</code></pre> <p>The ID of the player holding this leaderboard entry.</p>"},{"location":"reference/models/#wom.models.deltas.models.DeltaLeaderboardEntry.start_date","title":"start_date  <code>instance-attribute</code>","text":"<pre><code>start_date: datetime\n</code></pre> <p>The start date of the delta.</p>"},{"location":"reference/models/#wom.models.DeniedNameChangeReviewContext","title":"DeniedNameChangeReviewContext","text":"<p>         Bases: <code>NameChangeReviewContext</code></p> <p>The review context for a name change that was denied.</p> Source code in <code>wom/models/names/models.py</code> <pre><code>@attrs.define(init=False)\nclass DeniedNameChangeReviewContext(NameChangeReviewContext):  # type: ignore[override]\n\"\"\"The review context for a name change that was denied.\"\"\"\nreason: t.Literal[\nNameChangeReviewReason.ManualReview,\nNameChangeReviewReason.OldStatsNotFound,\nNameChangeReviewReason.NewNameNotFound,\nNameChangeReviewReason.NegativeGains,\n]\n\"\"\"The reason this name change was denied.\"\"\"\nnegative_gains: t.Optional[t.Dict[enums.Metric, int]]\n\"\"\"The negative gains that were observed, if there were any. Only populated\n    when the reason is `NegativeGains`.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.names.models.DeniedNameChangeReviewContext.negative_gains","title":"negative_gains  <code>instance-attribute</code>","text":"<pre><code>negative_gains: t.Optional[t.Dict[enums.Metric, int]]\n</code></pre> <p>The negative gains that were observed, if there were any. Only populated when the reason is <code>NegativeGains</code>.</p>"},{"location":"reference/models/#wom.models.names.models.DeniedNameChangeReviewContext.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason: t.Literal[\nNameChangeReviewReason.ManualReview,\nNameChangeReviewReason.OldStatsNotFound,\nNameChangeReviewReason.NewNameNotFound,\nNameChangeReviewReason.NegativeGains,\n]\n</code></pre> <p>The reason this name change was denied.</p>"},{"location":"reference/models/#wom.models.Gains","title":"Gains","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents gains made by a player.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass Gains(BaseModel):\n\"\"\"Represents gains made by a player.\"\"\"\ngained: float\n\"\"\"The amount gained.\"\"\"\nstart: float\n\"\"\"The starting amount.\"\"\"\nend: float\n\"\"\"The ending amount.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.Gains.end","title":"end  <code>instance-attribute</code>","text":"<pre><code>end: float\n</code></pre> <p>The ending amount.</p>"},{"location":"reference/models/#wom.models.players.models.Gains.gained","title":"gained  <code>instance-attribute</code>","text":"<pre><code>gained: float\n</code></pre> <p>The amount gained.</p>"},{"location":"reference/models/#wom.models.players.models.Gains.start","title":"start  <code>instance-attribute</code>","text":"<pre><code>start: float\n</code></pre> <p>The starting amount.</p>"},{"location":"reference/models/#wom.models.Group","title":"Group","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a group of players on WOM.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass Group(BaseModel):\n\"\"\"Represents a group of players on WOM.\"\"\"\nid: int\n\"\"\"The unique ID for this group.\"\"\"\nname: str\n\"\"\"The groups name.\"\"\"\nclan_chat: str\n\"\"\"The clan chat for this group.\"\"\"\ndescription: t.Optional[str]\n\"\"\"The groups optional description.\"\"\"\nhomeworld: t.Optional[int]\n\"\"\"The groups optional homeworld.\"\"\"\nverified: bool\n\"\"\"Whether or not this group is verified.\"\"\"\nscore: int\n\"\"\"The groups score.\"\"\"\ncreated_at: datetime\n\"\"\"The date the group was created.\"\"\"\nupdated_at: datetime\n\"\"\"The date the group was updated.\"\"\"\nmember_count: int\n\"\"\"The number of members in the group.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.Group.clan_chat","title":"clan_chat  <code>instance-attribute</code>","text":"<pre><code>clan_chat: str\n</code></pre> <p>The clan chat for this group.</p>"},{"location":"reference/models/#wom.models.groups.models.Group.created_at","title":"created_at  <code>instance-attribute</code>","text":"<pre><code>created_at: datetime\n</code></pre> <p>The date the group was created.</p>"},{"location":"reference/models/#wom.models.groups.models.Group.description","title":"description  <code>instance-attribute</code>","text":"<pre><code>description: t.Optional[str]\n</code></pre> <p>The groups optional description.</p>"},{"location":"reference/models/#wom.models.groups.models.Group.homeworld","title":"homeworld  <code>instance-attribute</code>","text":"<pre><code>homeworld: t.Optional[int]\n</code></pre> <p>The groups optional homeworld.</p>"},{"location":"reference/models/#wom.models.groups.models.Group.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The unique ID for this group.</p>"},{"location":"reference/models/#wom.models.groups.models.Group.member_count","title":"member_count  <code>instance-attribute</code>","text":"<pre><code>member_count: int\n</code></pre> <p>The number of members in the group.</p>"},{"location":"reference/models/#wom.models.groups.models.Group.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The groups name.</p>"},{"location":"reference/models/#wom.models.groups.models.Group.score","title":"score  <code>instance-attribute</code>","text":"<pre><code>score: int\n</code></pre> <p>The groups score.</p>"},{"location":"reference/models/#wom.models.groups.models.Group.updated_at","title":"updated_at  <code>instance-attribute</code>","text":"<pre><code>updated_at: datetime\n</code></pre> <p>The date the group was updated.</p>"},{"location":"reference/models/#wom.models.groups.models.Group.verified","title":"verified  <code>instance-attribute</code>","text":"<pre><code>verified: bool\n</code></pre> <p>Whether or not this group is verified.</p>"},{"location":"reference/models/#wom.models.GroupDetail","title":"GroupDetail","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents details about a group.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass GroupDetail(BaseModel):\n\"\"\"Represents details about a group.\"\"\"\ngroup: Group\n\"\"\"The [`Group`][wom.Group] itself.\"\"\"\nmemberships: t.List[GroupMembership]\n\"\"\"A list of [`GroupMemberships`][wom.GroupMembership].\"\"\"\nverification_code: t.Optional[str]\n\"\"\"The optional verification code for the group.\n    !!! note\n        This will only be present on group creation.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.GroupDetail.group","title":"group  <code>instance-attribute</code>","text":"<pre><code>group: Group\n</code></pre> <p>The <code>Group</code> itself.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupDetail.memberships","title":"memberships  <code>instance-attribute</code>","text":"<pre><code>memberships: t.List[GroupMembership]\n</code></pre> <p>A list of <code>GroupMemberships</code>.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupDetail.verification_code","title":"verification_code  <code>instance-attribute</code>","text":"<pre><code>verification_code: t.Optional[str]\n</code></pre> <p>The optional verification code for the group.</p> <p>Note</p> <p>This will only be present on group creation.</p>"},{"location":"reference/models/#wom.models.GroupHiscoresActivityItem","title":"GroupHiscoresActivityItem","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a group hiscores item for activities.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass GroupHiscoresActivityItem(BaseModel):\n\"\"\"Represents a group hiscores item for activities.\"\"\"\nrank: int\n\"\"\"The rank of the hiscore.\"\"\"\nscore: int\n\"\"\"The activity score.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.GroupHiscoresActivityItem.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>The rank of the hiscore.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupHiscoresActivityItem.score","title":"score  <code>instance-attribute</code>","text":"<pre><code>score: int\n</code></pre> <p>The activity score.</p>"},{"location":"reference/models/#wom.models.GroupHiscoresBossItem","title":"GroupHiscoresBossItem","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a group hiscores item for bosses.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass GroupHiscoresBossItem(BaseModel):\n\"\"\"Represents a group hiscores item for bosses.\"\"\"\nrank: int\n\"\"\"The rank of the hiscore.\"\"\"\nkills: int\n\"\"\"The number of boss kills.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.GroupHiscoresBossItem.kills","title":"kills  <code>instance-attribute</code>","text":"<pre><code>kills: int\n</code></pre> <p>The number of boss kills.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupHiscoresBossItem.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>The rank of the hiscore.</p>"},{"location":"reference/models/#wom.models.GroupHiscoresComputedMetricItem","title":"GroupHiscoresComputedMetricItem","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a group hiscores item for computed metrics.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass GroupHiscoresComputedMetricItem(BaseModel):\n\"\"\"Represents a group hiscores item for computed metrics.\"\"\"\nrank: int\n\"\"\"The rank of the hiscore.\"\"\"\nvalue: int\n\"\"\"The value of the computed metric.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.GroupHiscoresComputedMetricItem.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>The rank of the hiscore.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupHiscoresComputedMetricItem.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: int\n</code></pre> <p>The value of the computed metric.</p>"},{"location":"reference/models/#wom.models.GroupHiscoresEntry","title":"GroupHiscoresEntry","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a group hiscores entry.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass GroupHiscoresEntry(BaseModel):\n\"\"\"Represents a group hiscores entry.\"\"\"\nplayer: Player\n\"\"\"The [`Player`][wom.Player] responsible for the entry.\"\"\"\ndata: t.Union[\nGroupHiscoresActivityItem,\nGroupHiscoresBossItem,\nGroupHiscoresSkillItem,\nGroupHiscoresComputedMetricItem,\n]\n\"\"\"The data for this hiscores entry.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.GroupHiscoresEntry.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: t.Union[\nGroupHiscoresActivityItem,\nGroupHiscoresBossItem,\nGroupHiscoresSkillItem,\nGroupHiscoresComputedMetricItem,\n]\n</code></pre> <p>The data for this hiscores entry.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupHiscoresEntry.player","title":"player  <code>instance-attribute</code>","text":"<pre><code>player: Player\n</code></pre> <p>The <code>Player</code> responsible for the entry.</p>"},{"location":"reference/models/#wom.models.GroupHiscoresSkillItem","title":"GroupHiscoresSkillItem","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a group hiscores item for skills.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass GroupHiscoresSkillItem(BaseModel):\n\"\"\"Represents a group hiscores item for skills.\"\"\"\nrank: int\n\"\"\"The rank of the hiscore.\"\"\"\nlevel: int\n\"\"\"The level of the skill.\"\"\"\nexperience: int\n\"\"\"The experience in the skill.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.GroupHiscoresSkillItem.experience","title":"experience  <code>instance-attribute</code>","text":"<pre><code>experience: int\n</code></pre> <p>The experience in the skill.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupHiscoresSkillItem.level","title":"level  <code>instance-attribute</code>","text":"<pre><code>level: int\n</code></pre> <p>The level of the skill.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupHiscoresSkillItem.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>The rank of the hiscore.</p>"},{"location":"reference/models/#wom.models.GroupMemberFragment","title":"GroupMemberFragment","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a condensed group member.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username of the group member.</p> required <code>role</code> <code>t.Optional[GroupRole]</code> <p>The optional <code>GroupRole</code> to give the member.</p> <code>None</code> <p>Tip</p> <p>This is a model class that you will create in order to send data to some endpoints.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define\nclass GroupMemberFragment(BaseModel):\n\"\"\"Represents a condensed group member.\n    Args:\n        username: The username of the group member.\n        role: The optional [`GroupRole`][wom.models.GroupRole] to\n            give the member.\n    !!! tip\n        This is a model class that you will create in order to send\n        data to some endpoints.\n    \"\"\"\ndef __init__(self, username: str, role: t.Optional[GroupRole] = None) -&gt; None:\nself.username = username\nself.role = role\nusername: str\n\"\"\"The group members username.\"\"\"\nrole: t.Optional[GroupRole]\n\"\"\"The optional [`GroupRole`][wom.GroupRole] for the member.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.GroupMemberFragment.role","title":"role  <code>instance-attribute</code>","text":"<pre><code>role: t.Optional[GroupRole]\n</code></pre> <p>The optional <code>GroupRole</code> for the member.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupMemberFragment.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username: str\n</code></pre> <p>The group members username.</p>"},{"location":"reference/models/#wom.models.GroupMembership","title":"GroupMembership","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a group membership.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass GroupMembership(BaseModel):\n\"\"\"Represents a group membership.\"\"\"\nplayer: Player\n\"\"\"The [`Player`][wom.Player] that is a member.\"\"\"\nmembership: Membership\n\"\"\"The [`Membership`][wom.Membership] itself.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.GroupMembership.membership","title":"membership  <code>instance-attribute</code>","text":"<pre><code>membership: Membership\n</code></pre> <p>The <code>Membership</code> itself.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupMembership.player","title":"player  <code>instance-attribute</code>","text":"<pre><code>player: Player\n</code></pre> <p>The <code>Player</code> that is a member.</p>"},{"location":"reference/models/#wom.models.GroupRole","title":"GroupRole","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Roles that can be assigned to group members.</p> Source code in <code>wom/models/groups/enums.py</code> <pre><code>class GroupRole(BaseEnum):\n\"\"\"Roles that can be assigned to group members.\"\"\"\nAchiever = \"achiever\"\nAdamant = \"adamant\"\nAdept = \"adept\"\nAdministrator = \"administrator\"\nAdmiral = \"admiral\"\nAdventurer = \"adventurer\"\nAir = \"air\"\nAnchor = \"anchor\"\nApothecary = \"apothecary\"\nArcher = \"archer\"\nArmadylean = \"armadylean\"\nArtillery = \"artillery\"\nArtisan = \"artisan\"\nAsgarnian = \"asgarnian\"\nAssassin = \"assassin\"\nAssistant = \"assistant\"\nAstral = \"astral\"\nAthlete = \"athlete\"\nAttacker = \"attacker\"\nBandit = \"bandit\"\nBandosian = \"bandosian\"\nBarbarian = \"barbarian\"\nBattlemage = \"battlemage\"\nBeast = \"beast\"\nBerserker = \"berserker\"\nBlisterwood = \"blisterwood\"\nBlood = \"blood\"\nBlue = \"blue\"\nBob = \"bob\"\nBody = \"body\"\nBrassican = \"brassican\"\nBrawler = \"brawler\"\nBrigadier = \"brigadier\"\nBrigand = \"brigand\"\nBronze = \"bronze\"\nBruiser = \"bruiser\"\nBulwark = \"bulwark\"\nBurglar = \"burglar\"\nBurnt = \"burnt\"\nCadet = \"cadet\"\nCaptain = \"captain\"\nCarry = \"carry\"\nChampion = \"champion\"\nChaos = \"chaos\"\nCleric = \"cleric\"\nCollector = \"collector\"\nColonel = \"colonel\"\nCommander = \"commander\"\nCompetitor = \"competitor\"\nCompletionist = \"completionist\"\nConstructor = \"constructor\"\nCook = \"cook\"\nCoordinator = \"coordinator\"\nCorporal = \"corporal\"\nCosmic = \"cosmic\"\nCouncillor = \"councillor\"\nCrafter = \"crafter\"\nCrew = \"crew\"\nCrusader = \"crusader\"\nCutpurse = \"cutpurse\"\nDeath = \"death\"\nDefender = \"defender\"\nDefiler = \"defiler\"\nDeputy_owner = \"deputy_owner\"\nDestroyer = \"destroyer\"\nDiamond = \"diamond\"\nDiseased = \"diseased\"\nDoctor = \"doctor\"\nDogsbody = \"dogsbody\"\nDragon = \"dragon\"\nDragonstone = \"dragonstone\"\nDruid = \"druid\"\nDuellist = \"duellist\"\nEarth = \"earth\"\nElite = \"elite\"\nEmerald = \"emerald\"\nEnforcer = \"enforcer\"\nEpic = \"epic\"\nExecutive = \"executive\"\nExpert = \"expert\"\nExplorer = \"explorer\"\nFarmer = \"farmer\"\nFeeder = \"feeder\"\nFighter = \"fighter\"\nFire = \"fire\"\nFiremaker = \"firemaker\"\nFirestarter = \"firestarter\"\nFisher = \"fisher\"\nFletcher = \"fletcher\"\nForager = \"forager\"\nFremennik = \"fremennik\"\nGamer = \"gamer\"\nGatherer = \"gatherer\"\nGeneral = \"general\"\nGnome_child = \"gnome_child\"\nGnome_elder = \"gnome_elder\"\nGoblin = \"goblin\"\nGold = \"gold\"\nGoon = \"goon\"\nGreen = \"green\"\nGrey = \"grey\"\nGuardian = \"guardian\"\nGuthixian = \"guthixian\"\nHarpoon = \"harpoon\"\nHealer = \"healer\"\nHellcat = \"hellcat\"\nHelper = \"helper\"\nHerbologist = \"herbologist\"\nHero = \"hero\"\nHoly = \"holy\"\nHoarder = \"hoarder\"\nHunter = \"hunter\"\nIgnitor = \"ignitor\"\nIllusionist = \"illusionist\"\nImp = \"imp\"\nInfantry = \"infantry\"\nInquisitor = \"inquisitor\"\nIron = \"iron\"\nJade = \"jade\"\nJusticiar = \"justiciar\"\nKandarin = \"kandarin\"\nKaramjan = \"karamjan\"\nKharidian = \"kharidian\"\nKitten = \"kitten\"\nKnight = \"knight\"\nLabourer = \"labourer\"\nLaw = \"law\"\nLeader = \"leader\"\nLearner = \"learner\"\nLegacy = \"legacy\"\nLegend = \"legend\"\nLegionnaire = \"legionnaire\"\nLieutenant = \"lieutenant\"\nLooter = \"looter\"\nLumberjack = \"lumberjack\"\nMagic = \"magic\"\nMagician = \"magician\"\nMajor = \"major\"\nMaple = \"maple\"\nMarshal = \"marshal\"\nMaster = \"master\"\nMaxed = \"maxed\"\nMediator = \"mediator\"\nMedic = \"medic\"\nMentor = \"mentor\"\nMember = \"member\"\nMerchant = \"merchant\"\nMind = \"mind\"\nMiner = \"miner\"\nMinion = \"minion\"\nMisthalinian = \"misthalinian\"\nMithril = \"mithril\"\nModerator = \"moderator\"\nMonarch = \"monarch\"\nMorytanian = \"morytanian\"\nMystic = \"mystic\"\nMyth = \"myth\"\nNatural = \"natural\"\nNature = \"nature\"\nNecromancer = \"necromancer\"\nNinja = \"ninja\"\nNoble = \"noble\"\nNovice = \"novice\"\nNurse = \"nurse\"\nOak = \"oak\"\nOfficer = \"officer\"\nOnyx = \"onyx\"\nOpal = \"opal\"\nOracle = \"oracle\"\nOrange = \"orange\"\nOwner = \"owner\"\nPage = \"page\"\nPaladin = \"paladin\"\nPawn = \"pawn\"\nPilgrim = \"pilgrim\"\nPine = \"pine\"\nPink = \"pink\"\nPrefect = \"prefect\"\nPriest = \"priest\"\nPrivate = \"private\"\nProdigy = \"prodigy\"\nProselyte = \"proselyte\"\nProspector = \"prospector\"\nProtector = \"protector\"\nPure = \"pure\"\nPurple = \"purple\"\nPyromancer = \"pyromancer\"\nQuester = \"quester\"\nRacer = \"racer\"\nRaider = \"raider\"\nRanger = \"ranger\"\nRecord_chaser = \"record_chaser\"\nRecruit = \"recruit\"\nRecruiter = \"recruiter\"\nRed_topaz = \"red_topaz\"\nRed = \"red\"\nRogue = \"rogue\"\nRuby = \"ruby\"\nRune = \"rune\"\nRunecrafter = \"runecrafter\"\nSage = \"sage\"\nSapphire = \"sapphire\"\nSaradominist = \"saradominist\"\nSaviour = \"saviour\"\nScavenger = \"scavenger\"\nScholar = \"scholar\"\nScourge = \"scourge\"\nScout = \"scout\"\nScribe = \"scribe\"\nSeer = \"seer\"\nSenator = \"senator\"\nSentry = \"sentry\"\nSerenist = \"serenist\"\nSergeant = \"sergeant\"\nShaman = \"shaman\"\nSheriff = \"sheriff\"\nShort_green_guy = \"short_green_guy\"\nSkiller = \"skiller\"\nSkulled = \"skulled\"\nSlayer = \"slayer\"\nSmiter = \"smiter\"\nSmith = \"smith\"\nSmuggler = \"smuggler\"\nSniper = \"sniper\"\nSoul = \"soul\"\nSpecialist = \"specialist\"\nSpeed_runner = \"speed_runner\"\nSpellcaster = \"spellcaster\"\nSquire = \"squire\"\nStaff = \"staff\"\nSteel = \"steel\"\nStrider = \"strider\"\nStriker = \"striker\"\nSummoner = \"summoner\"\nSuperior = \"superior\"\nSupervisor = \"supervisor\"\nTeacher = \"teacher\"\nTemplar = \"templar\"\nTherapist = \"therapist\"\nThief = \"thief\"\nTirannian = \"tirannian\"\nTrialist = \"trialist\"\nTrickster = \"trickster\"\nTzkal = \"tzkal\"\nTztok = \"tztok\"\nUnholy = \"unholy\"\nVagrant = \"vagrant\"\nVanguard = \"vanguard\"\nWalker = \"walker\"\nWanderer = \"wanderer\"\nWarden = \"warden\"\nWarlock = \"warlock\"\nWarrior = \"warrior\"\nWater = \"water\"\nWild = \"wild\"\nWillow = \"willow\"\nWily = \"wily\"\nWintumber = \"wintumber\"\nWitch = \"witch\"\nWizard = \"wizard\"\nWorker = \"worker\"\nWrath = \"wrath\"\nXerician = \"xerician\"\nYellow = \"yellow\"\nYew = \"yew\"\nZamorakian = \"zamorakian\"\nZarosian = \"zarosian\"\nZealot = \"zealot\"\nZenyte = \"zenyte\"\n</code></pre>"},{"location":"reference/models/#wom.models.GroupStatistics","title":"GroupStatistics","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents accumulated group statistics.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass GroupStatistics(BaseModel):\n\"\"\"Represents accumulated group statistics.\"\"\"\nmaxed_combat_count: int\n\"\"\"The number of maxed combat players in the group.\"\"\"\nmaxed_total_count: int\n\"\"\"The number of maxed total level players in the group.\"\"\"\nmaxed_200ms_count: int\n\"\"\"The number of maxed 200M xp players in the group.\"\"\"\naverage_stats: Snapshot\n\"\"\"The average group statistics in a [`Snapshot`][wom.Snapshot].\"\"\"\nmetric_leaders: MetricLeaders\n\"\"\"The [`MetricLeaders`][wom.MetricLeaders] in this group for each\n    metric.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.GroupStatistics.average_stats","title":"average_stats  <code>instance-attribute</code>","text":"<pre><code>average_stats: Snapshot\n</code></pre> <p>The average group statistics in a <code>Snapshot</code>.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupStatistics.maxed_200ms_count","title":"maxed_200ms_count  <code>instance-attribute</code>","text":"<pre><code>maxed_200ms_count: int\n</code></pre> <p>The number of maxed 200M xp players in the group.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupStatistics.maxed_combat_count","title":"maxed_combat_count  <code>instance-attribute</code>","text":"<pre><code>maxed_combat_count: int\n</code></pre> <p>The number of maxed combat players in the group.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupStatistics.maxed_total_count","title":"maxed_total_count  <code>instance-attribute</code>","text":"<pre><code>maxed_total_count: int\n</code></pre> <p>The number of maxed total level players in the group.</p>"},{"location":"reference/models/#wom.models.groups.models.GroupStatistics.metric_leaders","title":"metric_leaders  <code>instance-attribute</code>","text":"<pre><code>metric_leaders: MetricLeaders\n</code></pre> <p>The <code>MetricLeaders</code> in this group for each metric.</p>"},{"location":"reference/models/#wom.models.HttpErrorResponse","title":"HttpErrorResponse","text":"<p>         Bases: <code>BaseModel</code></p> <p>Indicates something went wrong during the request.</p> Source code in <code>wom/models/http.py</code> <pre><code>@attrs.define\nclass HttpErrorResponse(BaseModel):\n\"\"\"Indicates something went wrong during the request.\"\"\"\nstatus: int\n\"\"\"The HTTP status code.\"\"\"\nmessage: str\n\"\"\"The error message.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.http.HttpErrorResponse.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre> <p>The error message.</p>"},{"location":"reference/models/#wom.models.http.HttpErrorResponse.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: int\n</code></pre> <p>The HTTP status code.</p>"},{"location":"reference/models/#wom.models.HttpSuccessResponse","title":"HttpSuccessResponse","text":"<p>         Bases: <code>BaseModel</code></p> <p>Indicates a successful HTTP response.</p> Source code in <code>wom/models/http.py</code> <pre><code>@attrs.define\nclass HttpSuccessResponse(BaseModel):\n\"\"\"Indicates a successful HTTP response.\"\"\"\nstatus: int\n\"\"\"The HTTP status code.\"\"\"\nmessage: str\n\"\"\"The success message.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.http.HttpSuccessResponse.message","title":"message  <code>instance-attribute</code>","text":"<pre><code>message: str\n</code></pre> <p>The success message.</p>"},{"location":"reference/models/#wom.models.http.HttpSuccessResponse.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: int\n</code></pre> <p>The HTTP status code.</p>"},{"location":"reference/models/#wom.models.Membership","title":"Membership","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a membership in a group.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass Membership(BaseModel):\n\"\"\"Represents a membership in a group.\"\"\"\nplayer_id: int\n\"\"\"The unique ID of the player in this membership.\"\"\"\ngroup_id: int\n\"\"\"The group ID this membership belongs to.\"\"\"\nrole: t.Optional[GroupRole]\n\"\"\"The optional [`GroupRole`][wom.GroupRole] for this membership.\"\"\"\ncreated_at: datetime\n\"\"\"The date this membership was created.\"\"\"\nupdated_at: datetime\n\"\"\"The date this membership was updated.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.Membership.created_at","title":"created_at  <code>instance-attribute</code>","text":"<pre><code>created_at: datetime\n</code></pre> <p>The date this membership was created.</p>"},{"location":"reference/models/#wom.models.groups.models.Membership.group_id","title":"group_id  <code>instance-attribute</code>","text":"<pre><code>group_id: int\n</code></pre> <p>The group ID this membership belongs to.</p>"},{"location":"reference/models/#wom.models.groups.models.Membership.player_id","title":"player_id  <code>instance-attribute</code>","text":"<pre><code>player_id: int\n</code></pre> <p>The unique ID of the player in this membership.</p>"},{"location":"reference/models/#wom.models.groups.models.Membership.role","title":"role  <code>instance-attribute</code>","text":"<pre><code>role: t.Optional[GroupRole]\n</code></pre> <p>The optional <code>GroupRole</code> for this membership.</p>"},{"location":"reference/models/#wom.models.groups.models.Membership.updated_at","title":"updated_at  <code>instance-attribute</code>","text":"<pre><code>updated_at: datetime\n</code></pre> <p>The date this membership was updated.</p>"},{"location":"reference/models/#wom.models.MetricLeaders","title":"MetricLeaders","text":"<p>         Bases: <code>BaseModel</code></p> <p>The leaders for each metric in a group.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass MetricLeaders(BaseModel):\n\"\"\"The leaders for each metric in a group.\"\"\"\nskills: t.Dict[enums.Skills, SkillLeader]\n\"\"\"A mapping of [`Skills`][wom.Skills] keys to [`SkillLeader`]\n    [wom.SkillLeader] values.\n    \"\"\"\nbosses: t.Dict[enums.Bosses, BossLeader]\n\"\"\"A mapping of [`Bosses`][wom.Bosses] keys to [`BossLeader`]\n    [wom.BossLeader] values.\n    \"\"\"\nactivities: t.Dict[enums.Activities, ActivityLeader]\n\"\"\"A mapping of [`Activities`][wom.Activities] keys to [`ActivityLeader`]\n    [wom.ActivityLeader] values.\n    \"\"\"\ncomputed: t.Dict[enums.ComputedMetrics, ComputedMetricLeader]\n\"\"\"A mapping of [`ComputedMetrics`][wom.ComputedMetrics] keys to\n    [`ComputedMetricLeader`][wom.ComputedMetricLeader] values.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.MetricLeaders.activities","title":"activities  <code>instance-attribute</code>","text":"<pre><code>activities: t.Dict[enums.Activities, ActivityLeader]\n</code></pre> <p>A mapping of <code>Activities</code> keys to <code>ActivityLeader</code> values.</p>"},{"location":"reference/models/#wom.models.groups.models.MetricLeaders.bosses","title":"bosses  <code>instance-attribute</code>","text":"<pre><code>bosses: t.Dict[enums.Bosses, BossLeader]\n</code></pre> <p>A mapping of <code>Bosses</code> keys to <code>BossLeader</code> values.</p>"},{"location":"reference/models/#wom.models.groups.models.MetricLeaders.computed","title":"computed  <code>instance-attribute</code>","text":"<pre><code>computed: t.Dict[\nenums.ComputedMetrics, ComputedMetricLeader\n]\n</code></pre> <p>A mapping of <code>ComputedMetrics</code> keys to <code>ComputedMetricLeader</code> values.</p>"},{"location":"reference/models/#wom.models.groups.models.MetricLeaders.skills","title":"skills  <code>instance-attribute</code>","text":"<pre><code>skills: t.Dict[enums.Skills, SkillLeader]\n</code></pre> <p>A mapping of <code>Skills</code> keys to <code>SkillLeader</code> values.</p>"},{"location":"reference/models/#wom.models.NameChange","title":"NameChange","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a player name change.</p> Source code in <code>wom/models/names/models.py</code> <pre><code>@attrs.define(init=False)\nclass NameChange(BaseModel):\n\"\"\"Represents a player name change.\"\"\"\nid: int\n\"\"\"The unique ID of this name change.\"\"\"\nplayer_id: int\n\"\"\"The player ID associated with the name change.\"\"\"\nold_name: str\n\"\"\"The old username of the player.\"\"\"\nnew_name: str\n\"\"\"The new username of the player.\"\"\"\nstatus: NameChangeStatus\n\"\"\"The [`status`][wom.NameChangeStatus] of the name change.\"\"\"\nreview_context: t.Optional[NameChangeReviewContext]\n\"\"\"The [review context][wom.NameChangeReviewContext] associated with\n    this name change, if it was denied or skipped.\n    \"\"\"\nresolved_at: t.Optional[datetime]\n\"\"\"The date the name change was approved or denied.\"\"\"\nupdated_at: datetime\n\"\"\"The date the name change was updated.\"\"\"\ncreated_at: datetime\n\"\"\"The date the name change was created.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.names.models.NameChange.created_at","title":"created_at  <code>instance-attribute</code>","text":"<pre><code>created_at: datetime\n</code></pre> <p>The date the name change was created.</p>"},{"location":"reference/models/#wom.models.names.models.NameChange.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The unique ID of this name change.</p>"},{"location":"reference/models/#wom.models.names.models.NameChange.new_name","title":"new_name  <code>instance-attribute</code>","text":"<pre><code>new_name: str\n</code></pre> <p>The new username of the player.</p>"},{"location":"reference/models/#wom.models.names.models.NameChange.old_name","title":"old_name  <code>instance-attribute</code>","text":"<pre><code>old_name: str\n</code></pre> <p>The old username of the player.</p>"},{"location":"reference/models/#wom.models.names.models.NameChange.player_id","title":"player_id  <code>instance-attribute</code>","text":"<pre><code>player_id: int\n</code></pre> <p>The player ID associated with the name change.</p>"},{"location":"reference/models/#wom.models.names.models.NameChange.resolved_at","title":"resolved_at  <code>instance-attribute</code>","text":"<pre><code>resolved_at: t.Optional[datetime]\n</code></pre> <p>The date the name change was approved or denied.</p>"},{"location":"reference/models/#wom.models.names.models.NameChange.review_context","title":"review_context  <code>instance-attribute</code>","text":"<pre><code>review_context: t.Optional[NameChangeReviewContext]\n</code></pre> <p>The review context associated with this name change, if it was denied or skipped.</p>"},{"location":"reference/models/#wom.models.names.models.NameChange.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: NameChangeStatus\n</code></pre> <p>The <code>status</code> of the name change.</p>"},{"location":"reference/models/#wom.models.names.models.NameChange.updated_at","title":"updated_at  <code>instance-attribute</code>","text":"<pre><code>updated_at: datetime\n</code></pre> <p>The date the name change was updated.</p>"},{"location":"reference/models/#wom.models.NameChangeReviewContext","title":"NameChangeReviewContext","text":"<p>         Bases: <code>BaseModel</code></p> <p>The review context for a name change that was not approved.</p> <p>Note</p> <p>This will always be one of:</p> <ul> <li> <p><code>DeniedNameChangeReviewContext</code></p> </li> <li> <p><code>SkippedNameChangeReviewContext</code></p> </li> </ul> <p>You can use an <code>isinstance(...)</code> check to determine which one it is.</p> Source code in <code>wom/models/names/models.py</code> <pre><code>@attrs.define(init=False)\nclass NameChangeReviewContext(BaseModel):\n\"\"\"The review context for a name change that was not approved.\n    !!! note\n        This will always be one of:\n        - `DeniedNameChangeReviewContext`\n        - `SkippedNameChangeReviewContext`\n        You can use an `isinstance(...)` check to determine which one\n        it is.\n    \"\"\"\nreason: NameChangeReviewReason\n\"\"\"The reason this name change was denied.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.names.models.NameChangeReviewContext.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason: NameChangeReviewReason\n</code></pre> <p>The reason this name change was denied.</p>"},{"location":"reference/models/#wom.models.NameChangeStatus","title":"NameChangeStatus","text":"<p>         Bases: <code>BaseEnum</code></p> <p>The available name change statuses.</p> Source code in <code>wom/models/names/enums.py</code> <pre><code>class NameChangeStatus(BaseEnum):\n\"\"\"The available name change statuses.\"\"\"\nPending = \"pending\"\nApproved = \"approved\"\nDenied = \"denied\"\n</code></pre>"},{"location":"reference/models/#wom.models.Participation","title":"Participation","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents participation in a competition.</p> Source code in <code>wom/models/competitions/models.py</code> <pre><code>@attrs.define(init=False)\nclass Participation(BaseModel):\n\"\"\"Represents participation in a competition.\"\"\"\nplayer_id: int\n\"\"\"The ID of the player associated with this participation.\"\"\"\ncompetition_id: int\n\"\"\"The ID of the competition associated with this participation.\"\"\"\nteam_name: t.Optional[str]\n\"\"\"The optional team name associated with this participation.\"\"\"\ncreated_at: datetime\n\"\"\"The date this participation was created.\"\"\"\nupdated_at: datetime\n\"\"\"The date this participation was updated.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.competitions.models.Participation.competition_id","title":"competition_id  <code>instance-attribute</code>","text":"<pre><code>competition_id: int\n</code></pre> <p>The ID of the competition associated with this participation.</p>"},{"location":"reference/models/#wom.models.competitions.models.Participation.created_at","title":"created_at  <code>instance-attribute</code>","text":"<pre><code>created_at: datetime\n</code></pre> <p>The date this participation was created.</p>"},{"location":"reference/models/#wom.models.competitions.models.Participation.player_id","title":"player_id  <code>instance-attribute</code>","text":"<pre><code>player_id: int\n</code></pre> <p>The ID of the player associated with this participation.</p>"},{"location":"reference/models/#wom.models.competitions.models.Participation.team_name","title":"team_name  <code>instance-attribute</code>","text":"<pre><code>team_name: t.Optional[str]\n</code></pre> <p>The optional team name associated with this participation.</p>"},{"location":"reference/models/#wom.models.competitions.models.Participation.updated_at","title":"updated_at  <code>instance-attribute</code>","text":"<pre><code>updated_at: datetime\n</code></pre> <p>The date this participation was updated.</p>"},{"location":"reference/models/#wom.models.Player","title":"Player","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a player on WOM.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass Player(BaseModel):\n\"\"\"Represents a player on WOM.\"\"\"\nid: int\n\"\"\"The players unique ID.\"\"\"\nusername: str\n\"\"\"The players username, always lowercase and 1-12 chars.\"\"\"\ndisplay_name: str\n\"\"\"The players display name, supports capitalization .\"\"\"\ntype: PlayerType\n\"\"\"The [`PlayerType`][wom.PlayerType] for this player.\"\"\"\nbuild: PlayerBuild\n\"\"\"The [`PlayerBuild`][wom.PlayerBuild] for this player.\"\"\"\ncountry: t.Optional[Country]\n\"\"\"The players [`Country`][wom.Country] country of origin, if they\n    have one set.\n    \"\"\"\nstatus: PlayerStatus\n\"\"\"The players status, i.e. flagged, archived, etc.\"\"\"\nexp: int\n\"\"\"The players overall experience.\"\"\"\nehp: float\n\"\"\"The players efficient hours played.\"\"\"\nehb: float\n\"\"\"The players efficient hours bossed.\"\"\"\nttm: float\n\"\"\"The players time to max, in hours.\"\"\"\ntt200m: float\n\"\"\"The players time to 200m xp all skills, in hours.\"\"\"\nregistered_at: datetime\n\"\"\"The date the player was registered with WOM.\"\"\"\nupdated_at: datetime\n\"\"\"The date the player was last updated with WOM.\"\"\"\nlast_changed_at: t.Optional[datetime]\n\"\"\"The date of the players last change (xp gain, boss kc, etc).\"\"\"\nlast_imported_at: t.Optional[datetime]\n\"\"\"The date of the last player history import.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.Player.build","title":"build  <code>instance-attribute</code>","text":"<pre><code>build: PlayerBuild\n</code></pre> <p>The <code>PlayerBuild</code> for this player.</p>"},{"location":"reference/models/#wom.models.players.models.Player.country","title":"country  <code>instance-attribute</code>","text":"<pre><code>country: t.Optional[Country]\n</code></pre> <p>The players <code>Country</code> country of origin, if they have one set.</p>"},{"location":"reference/models/#wom.models.players.models.Player.display_name","title":"display_name  <code>instance-attribute</code>","text":"<pre><code>display_name: str\n</code></pre> <p>The players display name, supports capitalization .</p>"},{"location":"reference/models/#wom.models.players.models.Player.ehb","title":"ehb  <code>instance-attribute</code>","text":"<pre><code>ehb: float\n</code></pre> <p>The players efficient hours bossed.</p>"},{"location":"reference/models/#wom.models.players.models.Player.ehp","title":"ehp  <code>instance-attribute</code>","text":"<pre><code>ehp: float\n</code></pre> <p>The players efficient hours played.</p>"},{"location":"reference/models/#wom.models.players.models.Player.exp","title":"exp  <code>instance-attribute</code>","text":"<pre><code>exp: int\n</code></pre> <p>The players overall experience.</p>"},{"location":"reference/models/#wom.models.players.models.Player.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The players unique ID.</p>"},{"location":"reference/models/#wom.models.players.models.Player.last_changed_at","title":"last_changed_at  <code>instance-attribute</code>","text":"<pre><code>last_changed_at: t.Optional[datetime]\n</code></pre> <p>The date of the players last change (xp gain, boss kc, etc).</p>"},{"location":"reference/models/#wom.models.players.models.Player.last_imported_at","title":"last_imported_at  <code>instance-attribute</code>","text":"<pre><code>last_imported_at: t.Optional[datetime]\n</code></pre> <p>The date of the last player history import.</p>"},{"location":"reference/models/#wom.models.players.models.Player.registered_at","title":"registered_at  <code>instance-attribute</code>","text":"<pre><code>registered_at: datetime\n</code></pre> <p>The date the player was registered with WOM.</p>"},{"location":"reference/models/#wom.models.players.models.Player.status","title":"status  <code>instance-attribute</code>","text":"<pre><code>status: PlayerStatus\n</code></pre> <p>The players status, i.e. flagged, archived, etc.</p>"},{"location":"reference/models/#wom.models.players.models.Player.tt200m","title":"tt200m  <code>instance-attribute</code>","text":"<pre><code>tt200m: float\n</code></pre> <p>The players time to 200m xp all skills, in hours.</p>"},{"location":"reference/models/#wom.models.players.models.Player.ttm","title":"ttm  <code>instance-attribute</code>","text":"<pre><code>ttm: float\n</code></pre> <p>The players time to max, in hours.</p>"},{"location":"reference/models/#wom.models.players.models.Player.type","title":"type  <code>instance-attribute</code>","text":"<pre><code>type: PlayerType\n</code></pre> <p>The <code>PlayerType</code> for this player.</p>"},{"location":"reference/models/#wom.models.players.models.Player.updated_at","title":"updated_at  <code>instance-attribute</code>","text":"<pre><code>updated_at: datetime\n</code></pre> <p>The date the player was last updated with WOM.</p>"},{"location":"reference/models/#wom.models.players.models.Player.username","title":"username  <code>instance-attribute</code>","text":"<pre><code>username: str\n</code></pre> <p>The players username, always lowercase and 1-12 chars.</p>"},{"location":"reference/models/#wom.models.PlayerAchievementProgress","title":"PlayerAchievementProgress","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a players progress toward an achievement.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass PlayerAchievementProgress(BaseModel):\n\"\"\"Represents a players progress toward an achievement.\"\"\"\nachievement: AchievementProgress\n\"\"\"The [AchievementProgress][wom.AchievementProgress] made.\"\"\"\ncurrent_value: int\n\"\"\"The current value for the achievement's metric.\"\"\"\nabsolute_progress: float\n\"\"\"The players current absolute progress toward the achievement.\n    Scale of 0-1 with 1 being 100% progress.\n    \"\"\"\nrelative_progress: float\n\"\"\"The players current relative progress toward the achievement\n    starting from the previous achievement.\n    Scale of 0-1 with 1 being 100% progress.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.PlayerAchievementProgress.absolute_progress","title":"absolute_progress  <code>instance-attribute</code>","text":"<pre><code>absolute_progress: float\n</code></pre> <p>The players current absolute progress toward the achievement.</p> <p>Scale of 0-1 with 1 being 100% progress.</p>"},{"location":"reference/models/#wom.models.players.models.PlayerAchievementProgress.achievement","title":"achievement  <code>instance-attribute</code>","text":"<pre><code>achievement: AchievementProgress\n</code></pre> <p>The AchievementProgress made.</p>"},{"location":"reference/models/#wom.models.players.models.PlayerAchievementProgress.current_value","title":"current_value  <code>instance-attribute</code>","text":"<pre><code>current_value: int\n</code></pre> <p>The current value for the achievement's metric.</p>"},{"location":"reference/models/#wom.models.players.models.PlayerAchievementProgress.relative_progress","title":"relative_progress  <code>instance-attribute</code>","text":"<pre><code>relative_progress: float\n</code></pre> <p>The players current relative progress toward the achievement starting from the previous achievement.</p> <p>Scale of 0-1 with 1 being 100% progress.</p>"},{"location":"reference/models/#wom.models.PlayerBuild","title":"PlayerBuild","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Potential account builds.</p> Source code in <code>wom/models/players/enums.py</code> <pre><code>class PlayerBuild(BaseEnum):\n\"\"\"Potential account builds.\"\"\"\nMain = \"main\"\nF2p = \"f2p\"\nLvl3 = \"lvl3\"\nZerker = \"zerker\"\nDef1 = \"def1\"\nHp10 = \"hp10\"\n</code></pre>"},{"location":"reference/models/#wom.models.PlayerCompetitionStanding","title":"PlayerCompetitionStanding","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a players standing in a competition.</p> Source code in <code>wom/models/competitions/models.py</code> <pre><code>@attrs.define(init=False)\nclass PlayerCompetitionStanding(BaseModel):\n\"\"\"Represents a players standing in a competition.\"\"\"\nparticipation: PlayerParticipation\n\"\"\"The [`PlayerParticipation`][wom.PlayerParticipation] achieved by\n    the player.\n    \"\"\"\nprogress: CompetitionProgress\n\"\"\"The [`CompetitionProgress`][wom.CompetitionProgress] that was\n    made.\n    \"\"\"\nrank: int\n\"\"\"The rank in the competition standings.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.competitions.models.PlayerCompetitionStanding.participation","title":"participation  <code>instance-attribute</code>","text":"<pre><code>participation: PlayerParticipation\n</code></pre> <p>The <code>PlayerParticipation</code> achieved by the player.</p>"},{"location":"reference/models/#wom.models.competitions.models.PlayerCompetitionStanding.progress","title":"progress  <code>instance-attribute</code>","text":"<pre><code>progress: CompetitionProgress\n</code></pre> <p>The <code>CompetitionProgress</code> that was made.</p>"},{"location":"reference/models/#wom.models.competitions.models.PlayerCompetitionStanding.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>The rank in the competition standings.</p>"},{"location":"reference/models/#wom.models.PlayerDetail","title":"PlayerDetail","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents details about a player.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass PlayerDetail(BaseModel):\n\"\"\"Represents details about a player.\"\"\"\nplayer: Player\n\"\"\"The [Player][wom.Player].\"\"\"\ncombat_level: int\n\"\"\"The players combat level.\"\"\"\nlatest_snapshot: t.Optional[Snapshot]\n\"\"\"The latest snapshot for the player, if there is one.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.PlayerDetail.combat_level","title":"combat_level  <code>instance-attribute</code>","text":"<pre><code>combat_level: int\n</code></pre> <p>The players combat level.</p>"},{"location":"reference/models/#wom.models.players.models.PlayerDetail.latest_snapshot","title":"latest_snapshot  <code>instance-attribute</code>","text":"<pre><code>latest_snapshot: t.Optional[Snapshot]\n</code></pre> <p>The latest snapshot for the player, if there is one.</p>"},{"location":"reference/models/#wom.models.players.models.PlayerDetail.player","title":"player  <code>instance-attribute</code>","text":"<pre><code>player: Player\n</code></pre> <p>The Player.</p>"},{"location":"reference/models/#wom.models.PlayerGains","title":"PlayerGains","text":"<p>         Bases: <code>BaseModel</code></p> <p>Gains made by a player.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass PlayerGains(BaseModel):\n\"\"\"Gains made by a player.\"\"\"\nstarts_at: datetime\n\"\"\"The date the gains started at.\"\"\"\nends_at: datetime\n\"\"\"The date the gains ended at.\"\"\"\ndata: PlayerGainsData\n\"\"\"The [`PlayerGainsData`][wom.PlayerGainsData] for the player.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.PlayerGains.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: PlayerGainsData\n</code></pre> <p>The <code>PlayerGainsData</code> for the player.</p>"},{"location":"reference/models/#wom.models.players.models.PlayerGains.ends_at","title":"ends_at  <code>instance-attribute</code>","text":"<pre><code>ends_at: datetime\n</code></pre> <p>The date the gains ended at.</p>"},{"location":"reference/models/#wom.models.players.models.PlayerGains.starts_at","title":"starts_at  <code>instance-attribute</code>","text":"<pre><code>starts_at: datetime\n</code></pre> <p>The date the gains started at.</p>"},{"location":"reference/models/#wom.models.PlayerGainsData","title":"PlayerGainsData","text":"<p>         Bases: <code>BaseModel</code></p> <p>Contains all the player gains data.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass PlayerGainsData(BaseModel):\n\"\"\"Contains all the player gains data.\"\"\"\nskills: t.Dict[enums.Skills, SkillGains]\n\"\"\"A mapping of [`Skills`][wom.Skills] keys to [`SkillGains`]\n    [wom.SkillGains] values.\n    \"\"\"\nbosses: t.Dict[enums.Bosses, BossGains]\n\"\"\"A mapping of [`Bosses`][wom.Bosses] keys to [`BossGains`]\n    [wom.BossGains] values.\n    \"\"\"\nactivities: t.Dict[enums.Activities, ActivityGains]\n\"\"\"A mapping of [`Activities`][wom.Activities] keys to [`ActivityGains`]\n    [wom.ActivityGains] values.\n    \"\"\"\ncomputed: t.Dict[enums.ComputedMetrics, ComputedGains]\n\"\"\"A mapping of [`ComputedMetrics`][wom.ComputedMetrics] keys to\n    [`ComputedGains`] [wom.ComputedGains] values.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.PlayerGainsData.activities","title":"activities  <code>instance-attribute</code>","text":"<pre><code>activities: t.Dict[enums.Activities, ActivityGains]\n</code></pre> <p>A mapping of <code>Activities</code> keys to <code>ActivityGains</code> values.</p>"},{"location":"reference/models/#wom.models.players.models.PlayerGainsData.bosses","title":"bosses  <code>instance-attribute</code>","text":"<pre><code>bosses: t.Dict[enums.Bosses, BossGains]\n</code></pre> <p>A mapping of <code>Bosses</code> keys to <code>BossGains</code> values.</p>"},{"location":"reference/models/#wom.models.players.models.PlayerGainsData.computed","title":"computed  <code>instance-attribute</code>","text":"<pre><code>computed: t.Dict[enums.ComputedMetrics, ComputedGains]\n</code></pre> <p>A mapping of <code>ComputedMetrics</code> keys to <code>ComputedGains</code> values.</p>"},{"location":"reference/models/#wom.models.players.models.PlayerGainsData.skills","title":"skills  <code>instance-attribute</code>","text":"<pre><code>skills: t.Dict[enums.Skills, SkillGains]\n</code></pre> <p>A mapping of <code>Skills</code> keys to <code>SkillGains</code> values.</p>"},{"location":"reference/models/#wom.models.PlayerMembership","title":"PlayerMembership","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a player membership.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass PlayerMembership(BaseModel):\n\"\"\"Represents a player membership.\"\"\"\ngroup: Group\n\"\"\"The [`Group`][wom.Group] the player is a member of.\"\"\"\nmembership: Membership\n\"\"\"The [`Membership`][wom.Membership] itself.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.PlayerMembership.group","title":"group  <code>instance-attribute</code>","text":"<pre><code>group: Group\n</code></pre> <p>The <code>Group</code> the player is a member of.</p>"},{"location":"reference/models/#wom.models.groups.models.PlayerMembership.membership","title":"membership  <code>instance-attribute</code>","text":"<pre><code>membership: Membership\n</code></pre> <p>The <code>Membership</code> itself.</p>"},{"location":"reference/models/#wom.models.PlayerParticipation","title":"PlayerParticipation","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a players participation in a competition.</p> Source code in <code>wom/models/competitions/models.py</code> <pre><code>@attrs.define(init=False)\nclass PlayerParticipation(BaseModel):\n\"\"\"Represents a players participation in a competition.\"\"\"\ndata: Participation\n\"\"\"The [`Participation`][wom.Participation] the player achieved.\"\"\"\ncompetition: Competition\n\"\"\"The [`Competition`][wom.Competition] that the player participated\n    in.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.competitions.models.PlayerParticipation.competition","title":"competition  <code>instance-attribute</code>","text":"<pre><code>competition: Competition\n</code></pre> <p>The <code>Competition</code> that the player participated in.</p>"},{"location":"reference/models/#wom.models.competitions.models.PlayerParticipation.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: Participation\n</code></pre> <p>The <code>Participation</code> the player achieved.</p>"},{"location":"reference/models/#wom.models.PlayerStatus","title":"PlayerStatus","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Status for the players account.</p> Source code in <code>wom/models/players/enums.py</code> <pre><code>class PlayerStatus(BaseEnum):\n\"\"\"Status for the players account.\"\"\"\nActive = \"active\"\nUnranked = \"unranked\"\nFlagged = \"flagged\"\nArchived = \"archived\"\n</code></pre>"},{"location":"reference/models/#wom.models.PlayerType","title":"PlayerType","text":"<p>         Bases: <code>BaseEnum</code></p> <p>Different types of players.</p> Source code in <code>wom/models/players/enums.py</code> <pre><code>class PlayerType(BaseEnum):\n\"\"\"Different types of players.\"\"\"\nUnknown = \"unknown\"\nRegular = \"regular\"\nIronman = \"ironman\"\nHardcore = \"hardcore\"\nUltimate = \"ultimate\"\nFreshStart = \"fresh_start\"\n</code></pre>"},{"location":"reference/models/#wom.models.Record","title":"Record","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a record held by a player.</p> Source code in <code>wom/models/records/models.py</code> <pre><code>@attrs.define(init=False)\nclass Record(BaseModel):\n\"\"\"Represents a record held by a player.\"\"\"\nid: int\n\"\"\"The unique ID for this record.\"\"\"\nplayer_id: int\n\"\"\"The player ID associated with this record.\"\"\"\nperiod: enums.Period\n\"\"\"The [`Period`][wom.Period] over which this record was achieved.\"\"\"\nmetric: enums.Metric\n\"\"\"The [`Metric`][wom.Metric] measured in this record.\"\"\"\nvalue: int\n\"\"\"The records gained value.\"\"\"\nupdated_at: datetime\n\"\"\"The records creation/modification date.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.records.models.Record.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The unique ID for this record.</p>"},{"location":"reference/models/#wom.models.records.models.Record.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.Metric\n</code></pre> <p>The <code>Metric</code> measured in this record.</p>"},{"location":"reference/models/#wom.models.records.models.Record.period","title":"period  <code>instance-attribute</code>","text":"<pre><code>period: enums.Period\n</code></pre> <p>The <code>Period</code> over which this record was achieved.</p>"},{"location":"reference/models/#wom.models.records.models.Record.player_id","title":"player_id  <code>instance-attribute</code>","text":"<pre><code>player_id: int\n</code></pre> <p>The player ID associated with this record.</p>"},{"location":"reference/models/#wom.models.records.models.Record.updated_at","title":"updated_at  <code>instance-attribute</code>","text":"<pre><code>updated_at: datetime\n</code></pre> <p>The records creation/modification date.</p>"},{"location":"reference/models/#wom.models.records.models.Record.value","title":"value  <code>instance-attribute</code>","text":"<pre><code>value: int\n</code></pre> <p>The records gained value.</p>"},{"location":"reference/models/#wom.models.RecordLeaderboardEntry","title":"RecordLeaderboardEntry","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a player's record leaderboard entry.</p> Source code in <code>wom/models/records/models.py</code> <pre><code>@attrs.define(init=False)\nclass RecordLeaderboardEntry(BaseModel):\n\"\"\"Represents a player's record leaderboard entry.\"\"\"\nplayer: Player\n\"\"\"The [`Player`][wom.Player] holding this leaderboard entry.\"\"\"\nrecord: Record\n\"\"\"The [`Record`][wom.Record] tied to this leaderboard entry.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.records.models.RecordLeaderboardEntry.player","title":"player  <code>instance-attribute</code>","text":"<pre><code>player: Player\n</code></pre> <p>The <code>Player</code> holding this leaderboard entry.</p>"},{"location":"reference/models/#wom.models.records.models.RecordLeaderboardEntry.record","title":"record  <code>instance-attribute</code>","text":"<pre><code>record: Record\n</code></pre> <p>The <code>Record</code> tied to this leaderboard entry.</p>"},{"location":"reference/models/#wom.models.Skill","title":"Skill","text":"<p>         Bases: <code>BaseModel</code></p> <p>Details regarding a particular skill.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass Skill(BaseModel):\n\"\"\"Details regarding a particular skill.\"\"\"\nmetric: enums.Skills\n\"\"\"The [`Skills`][wom.Skills] being measured.\"\"\"\nrank: int\n\"\"\"The players rank in the skill.\"\"\"\nlevel: int\n\"\"\"The players level in the skill.\"\"\"\nexperience: int\n\"\"\"The players experience in the skill.\"\"\"\nehp: float\n\"\"\"The players efficient hours played for the skill.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.Skill.ehp","title":"ehp  <code>instance-attribute</code>","text":"<pre><code>ehp: float\n</code></pre> <p>The players efficient hours played for the skill.</p>"},{"location":"reference/models/#wom.models.players.models.Skill.experience","title":"experience  <code>instance-attribute</code>","text":"<pre><code>experience: int\n</code></pre> <p>The players experience in the skill.</p>"},{"location":"reference/models/#wom.models.players.models.Skill.level","title":"level  <code>instance-attribute</code>","text":"<pre><code>level: int\n</code></pre> <p>The players level in the skill.</p>"},{"location":"reference/models/#wom.models.players.models.Skill.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.Skills\n</code></pre> <p>The <code>Skills</code> being measured.</p>"},{"location":"reference/models/#wom.models.players.models.Skill.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>The players rank in the skill.</p>"},{"location":"reference/models/#wom.models.SkillGains","title":"SkillGains","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents skill gains made by a player.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass SkillGains(BaseModel):\n\"\"\"Represents skill gains made by a player.\"\"\"\nmetric: enums.Skills\n\"\"\"The [`Skills`][wom.Skills] being measured.\"\"\"\nexperience: Gains\n\"\"\"The experience [`Gains`][wom.Gains].\"\"\"\nehp: Gains\n\"\"\"The efficient hours played [`Gains`][wom.Gains].\"\"\"\nrank: Gains\n\"\"\"The rank [`Gains`][wom.Gains].\"\"\"\nlevel: Gains\n\"\"\"The level [`Gains`][wom.Gains].\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.SkillGains.ehp","title":"ehp  <code>instance-attribute</code>","text":"<pre><code>ehp: Gains\n</code></pre> <p>The efficient hours played <code>Gains</code>.</p>"},{"location":"reference/models/#wom.models.players.models.SkillGains.experience","title":"experience  <code>instance-attribute</code>","text":"<pre><code>experience: Gains\n</code></pre> <p>The experience <code>Gains</code>.</p>"},{"location":"reference/models/#wom.models.players.models.SkillGains.level","title":"level  <code>instance-attribute</code>","text":"<pre><code>level: Gains\n</code></pre> <p>The level <code>Gains</code>.</p>"},{"location":"reference/models/#wom.models.players.models.SkillGains.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.Skills\n</code></pre> <p>The <code>Skills</code> being measured.</p>"},{"location":"reference/models/#wom.models.players.models.SkillGains.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: Gains\n</code></pre> <p>The rank <code>Gains</code>.</p>"},{"location":"reference/models/#wom.models.SkillLeader","title":"SkillLeader","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a leader in a particular skill.</p> Source code in <code>wom/models/groups/models.py</code> <pre><code>@attrs.define(init=False)\nclass SkillLeader(BaseModel):\n\"\"\"Represents a leader in a particular skill.\"\"\"\nmetric: enums.Skills\n\"\"\"The [`Skills`][wom.Skills] being measured.\"\"\"\nrank: int\n\"\"\"The players rank in the skill.\"\"\"\nlevel: int\n\"\"\"The players level in the skill.\"\"\"\nexperience: int\n\"\"\"The players experience in the skill.\"\"\"\nplayer: t.Optional[Player]\n\"\"\"The player leading in this metric, or `None` if none do.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.groups.models.SkillLeader.experience","title":"experience  <code>instance-attribute</code>","text":"<pre><code>experience: int\n</code></pre> <p>The players experience in the skill.</p>"},{"location":"reference/models/#wom.models.groups.models.SkillLeader.level","title":"level  <code>instance-attribute</code>","text":"<pre><code>level: int\n</code></pre> <p>The players level in the skill.</p>"},{"location":"reference/models/#wom.models.groups.models.SkillLeader.metric","title":"metric  <code>instance-attribute</code>","text":"<pre><code>metric: enums.Skills\n</code></pre> <p>The <code>Skills</code> being measured.</p>"},{"location":"reference/models/#wom.models.groups.models.SkillLeader.player","title":"player  <code>instance-attribute</code>","text":"<pre><code>player: t.Optional[Player]\n</code></pre> <p>The player leading in this metric, or <code>None</code> if none do.</p>"},{"location":"reference/models/#wom.models.groups.models.SkillLeader.rank","title":"rank  <code>instance-attribute</code>","text":"<pre><code>rank: int\n</code></pre> <p>The players rank in the skill.</p>"},{"location":"reference/models/#wom.models.SkippedNameChangeReviewContext","title":"SkippedNameChangeReviewContext","text":"<p>         Bases: <code>NameChangeReviewContext</code></p> <p>The review context for a name change that was skipped.</p> Source code in <code>wom/models/names/models.py</code> <pre><code>@attrs.define(init=False)\nclass SkippedNameChangeReviewContext(NameChangeReviewContext):  # type: ignore[override]\n\"\"\"The review context for a name change that was skipped.\"\"\"\nreason: t.Literal[\nNameChangeReviewReason.TransitionTooLong,\nNameChangeReviewReason.ExcessiveGains,\nNameChangeReviewReason.TotalLevelTooLow,\n]\n\"\"\"The reason this name change was denied.\"\"\"\nmax_hours_diff: t.Optional[int]\n\"\"\"The max number of hours in the transition period. Only populated when\n    reason is `TransitionTooLong`.\n    \"\"\"\nhours_diff: t.Optional[int]\n\"\"\"The actual number of hours in the transition period. Only populated when\n    reason is `TransitionTooLong` or `ExcessiveGains`.\n    \"\"\"\nehp_diff: t.Optional[int]\n\"\"\"The number difference between the old and new names ehp. Only populated\n    when the reason is `ExcessiveGains`.\n    \"\"\"\nehb_diff: t.Optional[int]\n\"\"\"The number difference between the old and new names ehb. Only populated\n    when the reason is `ExcessiveGains`.\n    \"\"\"\nmin_total_level: t.Optional[int]\n\"\"\"The minimum total level allowed for this name change. Only populated\n    when the reason is `TotalLevelTooLow`.\n    \"\"\"\ntotal_level: t.Optional[int]\n\"\"\"The number difference between the old and new names ehb. Only populated\n    when the reason is `TotalLevelTooLow`.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.names.models.SkippedNameChangeReviewContext.ehb_diff","title":"ehb_diff  <code>instance-attribute</code>","text":"<pre><code>ehb_diff: t.Optional[int]\n</code></pre> <p>The number difference between the old and new names ehb. Only populated when the reason is <code>ExcessiveGains</code>.</p>"},{"location":"reference/models/#wom.models.names.models.SkippedNameChangeReviewContext.ehp_diff","title":"ehp_diff  <code>instance-attribute</code>","text":"<pre><code>ehp_diff: t.Optional[int]\n</code></pre> <p>The number difference between the old and new names ehp. Only populated when the reason is <code>ExcessiveGains</code>.</p>"},{"location":"reference/models/#wom.models.names.models.SkippedNameChangeReviewContext.hours_diff","title":"hours_diff  <code>instance-attribute</code>","text":"<pre><code>hours_diff: t.Optional[int]\n</code></pre> <p>The actual number of hours in the transition period. Only populated when reason is <code>TransitionTooLong</code> or <code>ExcessiveGains</code>.</p>"},{"location":"reference/models/#wom.models.names.models.SkippedNameChangeReviewContext.max_hours_diff","title":"max_hours_diff  <code>instance-attribute</code>","text":"<pre><code>max_hours_diff: t.Optional[int]\n</code></pre> <p>The max number of hours in the transition period. Only populated when reason is <code>TransitionTooLong</code>.</p>"},{"location":"reference/models/#wom.models.names.models.SkippedNameChangeReviewContext.min_total_level","title":"min_total_level  <code>instance-attribute</code>","text":"<pre><code>min_total_level: t.Optional[int]\n</code></pre> <p>The minimum total level allowed for this name change. Only populated when the reason is <code>TotalLevelTooLow</code>.</p>"},{"location":"reference/models/#wom.models.names.models.SkippedNameChangeReviewContext.reason","title":"reason  <code>instance-attribute</code>","text":"<pre><code>reason: t.Literal[\nNameChangeReviewReason.TransitionTooLong,\nNameChangeReviewReason.ExcessiveGains,\nNameChangeReviewReason.TotalLevelTooLow,\n]\n</code></pre> <p>The reason this name change was denied.</p>"},{"location":"reference/models/#wom.models.names.models.SkippedNameChangeReviewContext.total_level","title":"total_level  <code>instance-attribute</code>","text":"<pre><code>total_level: t.Optional[int]\n</code></pre> <p>The number difference between the old and new names ehb. Only populated when the reason is <code>TotalLevelTooLow</code>.</p>"},{"location":"reference/models/#wom.models.Snapshot","title":"Snapshot","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a player snapshot.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass Snapshot(BaseModel):\n\"\"\"Represents a player snapshot.\"\"\"\nid: int\n\"\"\"The unique ID of the snapshot.\"\"\"\nplayer_id: int\n\"\"\"The unique ID of the player for this snapshot.\"\"\"\nimported_at: t.Optional[datetime]\n\"\"\"The date the snapshot was imported, if it was.\"\"\"\ndata: SnapshotData\n\"\"\"The [`SnapshotData`][wom.SnapshotData] for the snapshot.\"\"\"\ncreated_at: datetime\n\"\"\"The date the snapshot was created.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.Snapshot.created_at","title":"created_at  <code>instance-attribute</code>","text":"<pre><code>created_at: datetime\n</code></pre> <p>The date the snapshot was created.</p>"},{"location":"reference/models/#wom.models.players.models.Snapshot.data","title":"data  <code>instance-attribute</code>","text":"<pre><code>data: SnapshotData\n</code></pre> <p>The <code>SnapshotData</code> for the snapshot.</p>"},{"location":"reference/models/#wom.models.players.models.Snapshot.id","title":"id  <code>instance-attribute</code>","text":"<pre><code>id: int\n</code></pre> <p>The unique ID of the snapshot.</p>"},{"location":"reference/models/#wom.models.players.models.Snapshot.imported_at","title":"imported_at  <code>instance-attribute</code>","text":"<pre><code>imported_at: t.Optional[datetime]\n</code></pre> <p>The date the snapshot was imported, if it was.</p>"},{"location":"reference/models/#wom.models.players.models.Snapshot.player_id","title":"player_id  <code>instance-attribute</code>","text":"<pre><code>player_id: int\n</code></pre> <p>The unique ID of the player for this snapshot.</p>"},{"location":"reference/models/#wom.models.SnapshotData","title":"SnapshotData","text":"<p>         Bases: <code>BaseModel</code></p> <p>The data associated with this snapshot.</p> Source code in <code>wom/models/players/models.py</code> <pre><code>@attrs.define(init=False)\nclass SnapshotData(BaseModel):\n\"\"\"The data associated with this snapshot.\"\"\"\nskills: t.Dict[enums.Skills, Skill]\n\"\"\"A mapping of [`Skills`][wom.Skills] keys to [`Skill`][wom.Skill] values\n    from this snapshot.\n    \"\"\"\nbosses: t.Dict[enums.Bosses, Boss]\n\"\"\"A mapping of [`Bosses`][wom.Bosses] keys to [`Boss`][wom.Boss] values\n    from this snapshot.\n    \"\"\"\nactivities: t.Dict[enums.Activities, Activity]\n\"\"\"A mapping of [`Activities`][wom.Activities] keys to [`Activity`]\n    [wom.Activity] values from this snapshot.\n    \"\"\"\ncomputed: t.Dict[enums.ComputedMetrics, ComputedMetric]\n\"\"\"A mapping of [`ComputedMetrics`][wom.ComputedMetrics] keys to\n    [`ComputedMetric`][wom.ComputedMetric] values from this snapshot.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.players.models.SnapshotData.activities","title":"activities  <code>instance-attribute</code>","text":"<pre><code>activities: t.Dict[enums.Activities, Activity]\n</code></pre> <p>A mapping of <code>Activities</code> keys to <code>Activity</code> values from this snapshot.</p>"},{"location":"reference/models/#wom.models.players.models.SnapshotData.bosses","title":"bosses  <code>instance-attribute</code>","text":"<pre><code>bosses: t.Dict[enums.Bosses, Boss]\n</code></pre> <p>A mapping of <code>Bosses</code> keys to <code>Boss</code> values from this snapshot.</p>"},{"location":"reference/models/#wom.models.players.models.SnapshotData.computed","title":"computed  <code>instance-attribute</code>","text":"<pre><code>computed: t.Dict[enums.ComputedMetrics, ComputedMetric]\n</code></pre> <p>A mapping of <code>ComputedMetrics</code> keys to <code>ComputedMetric</code> values from this snapshot.</p>"},{"location":"reference/models/#wom.models.players.models.SnapshotData.skills","title":"skills  <code>instance-attribute</code>","text":"<pre><code>skills: t.Dict[enums.Skills, Skill]\n</code></pre> <p>A mapping of <code>Skills</code> keys to <code>Skill</code> values from this snapshot.</p>"},{"location":"reference/models/#wom.models.Team","title":"Team","text":"<p>         Bases: <code>BaseModel</code></p> <p>Represents a competition team.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the team.</p> required <code>participants</code> <code>t.List[str]</code> <p>A list of usernames to include in the team.</p> required <p>Tip</p> <p>This is a model class that you will create in order to send data to some endpoints.</p> Source code in <code>wom/models/competitions/models.py</code> <pre><code>@attrs.define\nclass Team(BaseModel):\n\"\"\"Represents a competition team.\n    Args:\n        name: The name of the team.\n        participants: A list of usernames to include in the\n            team.\n    !!! tip\n        This is a model class that you will create in order to send\n        data to some endpoints.\n    \"\"\"\ndef __init__(self, name: str, participants: t.List[str]) -&gt; None:\nself.name = name\nself.participants = participants\nname: str\n\"\"\"The name of the team.\"\"\"\nparticipants: t.List[str]\n\"\"\"A list of participant usernames on the team.\"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.competitions.models.Team.name","title":"name  <code>instance-attribute</code>","text":"<pre><code>name: str\n</code></pre> <p>The name of the team.</p>"},{"location":"reference/models/#wom.models.competitions.models.Team.participants","title":"participants  <code>instance-attribute</code>","text":"<pre><code>participants: t.List[str]\n</code></pre> <p>A list of participant usernames on the team.</p>"},{"location":"reference/models/#wom.models.Top5ProgressResult","title":"Top5ProgressResult","text":"<p>         Bases: <code>BaseModel</code></p> <p>A top 5 progress result for a competition.</p> Source code in <code>wom/models/competitions/models.py</code> <pre><code>@attrs.define(init=False)\nclass Top5ProgressResult(BaseModel):\n\"\"\"A top 5 progress result for a competition.\"\"\"\nplayer: Player\n\"\"\"The [`Player`][wom.Player] who made top 5 progress.\"\"\"\nhistory: t.List[CompetitionHistoryDataPoint]\n\"\"\"A list of [CompetitionHistoryDataPoints]\n    [wom.CompetitionHistoryDataPoint] making up the history\n    of this top 5 progress result.\n    \"\"\"\n</code></pre>"},{"location":"reference/models/#wom.models.competitions.models.Top5ProgressResult.history","title":"history  <code>instance-attribute</code>","text":"<pre><code>history: t.List[CompetitionHistoryDataPoint]\n</code></pre> <p>A list of CompetitionHistoryDataPoints making up the history of this top 5 progress result.</p>"},{"location":"reference/models/#wom.models.competitions.models.Top5ProgressResult.player","title":"player  <code>instance-attribute</code>","text":"<pre><code>player: Player\n</code></pre> <p>The <code>Player</code> who made top 5 progress.</p>"},{"location":"reference/result/","title":"result","text":"<p>This module contains the <code>Result</code> variants returned by all <code>Client</code> calls.</p> <p>Correct usage</p> <pre><code>client = wom.Client()\nawait client.start()\nresult = await client.players.update_player(\"Jonxslays\")\nif result.is_ok:\nprint(result.unwrap())\nelse:\nprint(result.unwrap_err())\n</code></pre> <p>Incorrect usage</p> <pre><code>client = wom.Client()\nawait client.start()\nresult = await client.players.update_player(\"eeeeeeeeeeeee\")\nprint(result.unwrap()) # &lt;-- Exception raised\n# Raises UnwrapError because the username was too long\n</code></pre>"},{"location":"reference/result/#wom.result.Err","title":"Err","text":"<p>         Bases: <code>Result[T, E]</code></p> <p>The <code>Err</code> variant of a <code>Result</code>.</p> <p>Info</p> <p>You will receive instances of this class as a result of calling <code>Client</code> methods, and should not have to instantiate it yourself.</p> Source code in <code>wom/result.py</code> <pre><code>@t.final\nclass Err(Result[T, E]):\n\"\"\"The [`Err`][wom.Err] variant of a [`Result`][wom.Result].\n    !!! info\n        You will receive instances of this class as a result of\n        calling [`Client`][wom.Client] methods, and should not have to\n        instantiate it yourself.\n    \"\"\"\n__slots__ = ()\ndef __init__(self, error: E) -&gt; None:\nself._error = error\n@property\ndef is_ok(self) -&gt; bool:\n\"\"\"Always returns `False` for the [`Err`][wom.Err] variant.\"\"\"\nreturn False\n@property\ndef is_err(self) -&gt; bool:\n\"\"\"Always returns `True` for the [`Err`][wom.Err] variant.\"\"\"\nreturn True\ndef unwrap(self) -&gt; T:\n\"\"\"Always throws an exception for the [`Err`][wom.Err] variant.\n        Raises:\n            UnwrapError: Because the result was an [`Err`][wom.Err]\n                variant.\n        \"\"\"\nraise errors.UnwrapError(f\"Called unwrap on an error value - {self._error}\")\ndef unwrap_err(self) -&gt; E:\n\"\"\"Unwraps the result to produce the error.\n        Returns:\n            The unwrapped error.\n        \"\"\"\nreturn self._error\n</code></pre>"},{"location":"reference/result/#wom.result.Err.is_err","title":"is_err  <code>property</code>","text":"<pre><code>is_err: bool\n</code></pre> <p>Always returns <code>True</code> for the <code>Err</code> variant.</p>"},{"location":"reference/result/#wom.result.Err.is_ok","title":"is_ok  <code>property</code>","text":"<pre><code>is_ok: bool\n</code></pre> <p>Always returns <code>False</code> for the <code>Err</code> variant.</p>"},{"location":"reference/result/#wom.result.Err.unwrap","title":"unwrap","text":"<pre><code>unwrap() -&gt; T\n</code></pre> <p>Always throws an exception for the <code>Err</code> variant.</p> <p>Raises:</p> Type Description <code>UnwrapError</code> <p>Because the result was an <code>Err</code> variant.</p> Source code in <code>wom/result.py</code> <pre><code>def unwrap(self) -&gt; T:\n\"\"\"Always throws an exception for the [`Err`][wom.Err] variant.\n    Raises:\n        UnwrapError: Because the result was an [`Err`][wom.Err]\n            variant.\n    \"\"\"\nraise errors.UnwrapError(f\"Called unwrap on an error value - {self._error}\")\n</code></pre>"},{"location":"reference/result/#wom.result.Err.unwrap_err","title":"unwrap_err","text":"<pre><code>unwrap_err() -&gt; E\n</code></pre> <p>Unwraps the result to produce the error.</p> <p>Returns:</p> Type Description <code>E</code> <p>The unwrapped error.</p> Source code in <code>wom/result.py</code> <pre><code>def unwrap_err(self) -&gt; E:\n\"\"\"Unwraps the result to produce the error.\n    Returns:\n        The unwrapped error.\n    \"\"\"\nreturn self._error\n</code></pre>"},{"location":"reference/result/#wom.result.Ok","title":"Ok","text":"<p>         Bases: <code>Result[T, E]</code></p> <p>The <code>Ok</code> variant of a <code>Result</code>.</p> <p>Info</p> <p>You will receive instances of this class as a result of calling <code>Client</code> methods, and should not have to instantiate it yourself.</p> Source code in <code>wom/result.py</code> <pre><code>@t.final\nclass Ok(Result[T, E]):\n\"\"\"The [`Ok`][wom.Ok] variant of a [`Result`][wom.Result].\n    !!! info\n        You will receive instances of this class as a result of\n        calling [`Client`][wom.Client] methods, and should not have to\n        instantiate it yourself.\n    \"\"\"\n__slots__ = ()\ndef __init__(self, value: T) -&gt; None:\nself._value = value\n@property\ndef is_ok(self) -&gt; bool:\n\"\"\"Always returns `True` for the [`Ok`][wom.Ok] variant.\"\"\"\nreturn True\n@property\ndef is_err(self) -&gt; bool:\n\"\"\"Always returns `False` for the [`Ok`][wom.Ok] variant.\"\"\"\nreturn False\ndef unwrap(self) -&gt; T:\n\"\"\"Unwraps the result to produce the value.\n        Returns:\n            The unwrapped value.\n        \"\"\"\nreturn self._value\ndef unwrap_err(self) -&gt; E:\n\"\"\"Always throws an exception for the [`Ok`][wom.Ok] variant.\n        Raises:\n            UnwrapError: Because the result was an [`Ok`][wom.Ok]\n                variant.\n        \"\"\"\nactual = self._value.__class__.__name__\nraise errors.UnwrapError(f\"Called unwrap error on a non error value of type {actual!r}\")\n</code></pre>"},{"location":"reference/result/#wom.result.Ok.is_err","title":"is_err  <code>property</code>","text":"<pre><code>is_err: bool\n</code></pre> <p>Always returns <code>False</code> for the <code>Ok</code> variant.</p>"},{"location":"reference/result/#wom.result.Ok.is_ok","title":"is_ok  <code>property</code>","text":"<pre><code>is_ok: bool\n</code></pre> <p>Always returns <code>True</code> for the <code>Ok</code> variant.</p>"},{"location":"reference/result/#wom.result.Ok.unwrap","title":"unwrap","text":"<pre><code>unwrap() -&gt; T\n</code></pre> <p>Unwraps the result to produce the value.</p> <p>Returns:</p> Type Description <code>T</code> <p>The unwrapped value.</p> Source code in <code>wom/result.py</code> <pre><code>def unwrap(self) -&gt; T:\n\"\"\"Unwraps the result to produce the value.\n    Returns:\n        The unwrapped value.\n    \"\"\"\nreturn self._value\n</code></pre>"},{"location":"reference/result/#wom.result.Ok.unwrap_err","title":"unwrap_err","text":"<pre><code>unwrap_err() -&gt; E\n</code></pre> <p>Always throws an exception for the <code>Ok</code> variant.</p> <p>Raises:</p> Type Description <code>UnwrapError</code> <p>Because the result was an <code>Ok</code> variant.</p> Source code in <code>wom/result.py</code> <pre><code>def unwrap_err(self) -&gt; E:\n\"\"\"Always throws an exception for the [`Ok`][wom.Ok] variant.\n    Raises:\n        UnwrapError: Because the result was an [`Ok`][wom.Ok]\n            variant.\n    \"\"\"\nactual = self._value.__class__.__name__\nraise errors.UnwrapError(f\"Called unwrap error on a non error value of type {actual!r}\")\n</code></pre>"},{"location":"reference/result/#wom.result.Result","title":"Result","text":"<p>         Bases: <code>t.Generic[T, E]</code>, <code>abc.ABC</code></p> <p>Represents a potential <code>Ok</code> or <code>Err</code> result.</p> <p>Note</p> <p>This class cannot be instantiated, only its variants can be.</p> Source code in <code>wom/result.py</code> <pre><code>class Result(t.Generic[T, E], abc.ABC):\n\"\"\"Represents a potential [`Ok`][wom.Ok] or [`Err`][wom.Err] result.\n    !!! note\n        This class cannot be instantiated, only its variants can be.\n    \"\"\"\n__slots__ = (\"_error\", \"_value\")\ndef __repr__(self) -&gt; str:\ninner = self._value if self.is_ok else self._error  # type: ignore [attr-defined]\nreturn f\"{self.__class__.__name__}({inner})\"\n@property\n@abc.abstractmethod\ndef is_ok(self) -&gt; bool:\n\"\"\"`True` if this result is the [`Ok`][wom.Ok] variant.\"\"\"\n@property\n@abc.abstractmethod\ndef is_err(self) -&gt; bool:\n\"\"\"`True` if this result is the [`Err`][wom.Err] variant.\"\"\"\n@abc.abstractmethod\ndef unwrap(self) -&gt; T:\n\"\"\"Unwraps the result to produce the value.\n        Returns:\n            The unwrapped value.\n        Raises:\n            UnwrapError: If the result was an [`Err`][wom.Err] and not\n                [`Ok`][wom.Ok].\n        \"\"\"\n@abc.abstractmethod\ndef unwrap_err(self) -&gt; E:\n\"\"\"Unwraps the result to produce the error.\n        Returns:\n            The unwrapped error.\n        Raises:\n            UnwrapError: If the result was [`Ok`][wom.Ok] and not an\n                [`Err`][wom.Err].\n        \"\"\"\n</code></pre>"},{"location":"reference/result/#wom.result.Result.is_err","title":"is_err  <code>property</code> <code>abstractmethod</code>","text":"<pre><code>is_err: bool\n</code></pre> <p><code>True</code> if this result is the <code>Err</code> variant.</p>"},{"location":"reference/result/#wom.result.Result.is_ok","title":"is_ok  <code>property</code> <code>abstractmethod</code>","text":"<pre><code>is_ok: bool\n</code></pre> <p><code>True</code> if this result is the <code>Ok</code> variant.</p>"},{"location":"reference/result/#wom.result.Result.unwrap","title":"unwrap  <code>abstractmethod</code>","text":"<pre><code>unwrap() -&gt; T\n</code></pre> <p>Unwraps the result to produce the value.</p> <p>Returns:</p> Type Description <code>T</code> <p>The unwrapped value.</p> <p>Raises:</p> Type Description <code>UnwrapError</code> <p>If the result was an <code>Err</code> and not <code>Ok</code>.</p> Source code in <code>wom/result.py</code> <pre><code>@abc.abstractmethod\ndef unwrap(self) -&gt; T:\n\"\"\"Unwraps the result to produce the value.\n    Returns:\n        The unwrapped value.\n    Raises:\n        UnwrapError: If the result was an [`Err`][wom.Err] and not\n            [`Ok`][wom.Ok].\n    \"\"\"\n</code></pre>"},{"location":"reference/result/#wom.result.Result.unwrap_err","title":"unwrap_err  <code>abstractmethod</code>","text":"<pre><code>unwrap_err() -&gt; E\n</code></pre> <p>Unwraps the result to produce the error.</p> <p>Returns:</p> Type Description <code>E</code> <p>The unwrapped error.</p> <p>Raises:</p> Type Description <code>UnwrapError</code> <p>If the result was <code>Ok</code> and not an <code>Err</code>.</p> Source code in <code>wom/result.py</code> <pre><code>@abc.abstractmethod\ndef unwrap_err(self) -&gt; E:\n\"\"\"Unwraps the result to produce the error.\n    Returns:\n        The unwrapped error.\n    Raises:\n        UnwrapError: If the result was [`Ok`][wom.Ok] and not an\n            [`Err`][wom.Err].\n    \"\"\"\n</code></pre>"},{"location":"reference/routes/","title":"routes","text":"<p>Route/endpoint related items.</p>"},{"location":"reference/routes/#wom.routes.CompiledRoute","title":"CompiledRoute","text":"<p>A route that has been compiled to include uri variables.</p> <p>Parameters:</p> Name Type Description Default <code>route</code> <code>Route</code> <p>The route to compile.</p> required Source code in <code>wom/routes.py</code> <pre><code>class CompiledRoute:\n\"\"\"A route that has been compiled to include uri variables.\n    Args:\n        route: The route to compile.\n    \"\"\"\n__slots__ = (\"_route\", \"_uri\", \"_params\")\ndef __init__(self, route: Route, uri: str) -&gt; None:\nself._uri = uri\nself._route = route\nself._params: t.Dict[str, t.Union[str, int]] = {}\n@property\ndef route(self) -&gt; Route:\n\"\"\"The route itself.\"\"\"\nreturn self._route\n@property\ndef uri(self) -&gt; str:\n\"\"\"The routes uri endpoint.\"\"\"\nreturn self._uri\n@uri.setter\ndef uri(self, uri: str) -&gt; None:\nself._uri = uri\n@property\ndef method(self) -&gt; str:\n\"\"\"The routes method, i.e. GET, POST...\"\"\"\nreturn self.route.method\n@property\ndef params(self) -&gt; t.Dict[str, t.Union[str, int]]:\n\"\"\"The query params for the route.\"\"\"\nreturn self._params\ndef with_params(self, params: t.Dict[str, t.Any]) -&gt; CompiledRoute:\n\"\"\"Adds additional query params to this compiled route.\n        Args:\n            params: The query params to compile.\n        Returns:\n            The compiled route for chained calls.\n        \"\"\"\nif params:\nself.params.update(params)\nreturn self\n</code></pre>"},{"location":"reference/routes/#wom.routes.CompiledRoute.method","title":"method  <code>property</code>","text":"<pre><code>method: str\n</code></pre> <p>The routes method, i.e. GET, POST...</p>"},{"location":"reference/routes/#wom.routes.CompiledRoute.params","title":"params  <code>property</code>","text":"<pre><code>params: t.Dict[str, t.Union[str, int]]\n</code></pre> <p>The query params for the route.</p>"},{"location":"reference/routes/#wom.routes.CompiledRoute.route","title":"route  <code>property</code>","text":"<pre><code>route: Route\n</code></pre> <p>The route itself.</p>"},{"location":"reference/routes/#wom.routes.CompiledRoute.uri","title":"uri  <code>property</code> <code>writable</code>","text":"<pre><code>uri: str\n</code></pre> <p>The routes uri endpoint.</p>"},{"location":"reference/routes/#wom.routes.CompiledRoute.with_params","title":"with_params","text":"<pre><code>with_params(params: t.Dict[str, t.Any]) -&gt; CompiledRoute\n</code></pre> <p>Adds additional query params to this compiled route.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>t.Dict[str, t.Any]</code> <p>The query params to compile.</p> required <p>Returns:</p> Type Description <code>CompiledRoute</code> <p>The compiled route for chained calls.</p> Source code in <code>wom/routes.py</code> <pre><code>def with_params(self, params: t.Dict[str, t.Any]) -&gt; CompiledRoute:\n\"\"\"Adds additional query params to this compiled route.\n    Args:\n        params: The query params to compile.\n    Returns:\n        The compiled route for chained calls.\n    \"\"\"\nif params:\nself.params.update(params)\nreturn self\n</code></pre>"},{"location":"reference/routes/#wom.routes.Route","title":"Route","text":"<p>A route that has not been compiled yet.</p> Source code in <code>wom/routes.py</code> <pre><code>@attrs.define\nclass Route:\n\"\"\"A route that has not been compiled yet.\"\"\"\nmethod: str\n\"\"\"The request method to use.\"\"\"\nuri: str\n\"\"\"The request uri.\"\"\"\ndef compile(self, *args: t.Union[str, int]) -&gt; CompiledRoute:\n\"\"\"Turn this route into a compiled route.\n        Args:\n            *args: The arguments to insert into the uri.\n        Returns:\n            The compiled route.\n        \"\"\"\ncompiled = CompiledRoute(self, self.uri)\nfor arg in args:\ncompiled.uri = compiled.uri.replace(r\"{}\", str(arg), 1)\nreturn compiled\n</code></pre>"},{"location":"reference/routes/#wom.routes.Route.method","title":"method  <code>instance-attribute</code>","text":"<pre><code>method: str\n</code></pre> <p>The request method to use.</p>"},{"location":"reference/routes/#wom.routes.Route.uri","title":"uri  <code>instance-attribute</code>","text":"<pre><code>uri: str\n</code></pre> <p>The request uri.</p>"},{"location":"reference/routes/#wom.routes.Route.compile","title":"compile","text":"<pre><code>compile(*args: t.Union[str, int]) -&gt; CompiledRoute\n</code></pre> <p>Turn this route into a compiled route.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <code>t.Union[str, int]</code> <p>The arguments to insert into the uri.</p> <code>()</code> <p>Returns:</p> Type Description <code>CompiledRoute</code> <p>The compiled route.</p> Source code in <code>wom/routes.py</code> <pre><code>def compile(self, *args: t.Union[str, int]) -&gt; CompiledRoute:\n\"\"\"Turn this route into a compiled route.\n    Args:\n        *args: The arguments to insert into the uri.\n    Returns:\n        The compiled route.\n    \"\"\"\ncompiled = CompiledRoute(self, self.uri)\nfor arg in args:\ncompiled.uri = compiled.uri.replace(r\"{}\", str(arg), 1)\nreturn compiled\n</code></pre>"},{"location":"reference/serializer/","title":"serializer","text":"<p>This module contains the <code>Serializer</code> that is used to parse incoming network data into Python classes.</p>"},{"location":"reference/serializer/#wom.serializer.Serializer","title":"Serializer","text":"<p>Deserializes JSON data into wom.py model classes.</p> Source code in <code>wom/serializer.py</code> <pre><code>class Serializer:\n\"\"\"Deserializes JSON data into wom.py model classes.\"\"\"\n__slots__ = ()\ndef _dt_from_iso(self, timestamp: str) -&gt; datetime:\nreturn datetime.fromisoformat(timestamp.rstrip(\"Z\"))\ndef _dt_from_iso_maybe(self, timestamp: t.Optional[str]) -&gt; datetime | None:\nreturn self._dt_from_iso(timestamp) if timestamp else None\ndef _to_camel_case(self, attr: str) -&gt; str:\nfirst, *rest = attr.split(\"_\")\nreturn \"\".join((first.lower(), *map(str.title, rest)))\ndef __map(\nself, serializer: t.Callable[[DictT], HasMetricsT], data: list[DictT]\n) -&gt; t.Dict[t.Any, HasMetricsT]:\nreturn {x.metric: x for x in (serializer(y) for y in data)}\ndef _set_attrs(\nself,\nmodel: t.Any,\ndata: DictT,\n*attrs: str,\ntransform: TransformT = None,\ncamel_case: bool = False,\nmaybe: bool = False,\n) -&gt; None:\nif transform and maybe:\nraise RuntimeError(\"Only one of 'maybe' and 'transform' may be used.\")\nfor attr in attrs:\ncased_attr = self._to_camel_case(attr) if camel_case else attr\nif transform:\nsetattr(\nmodel,\nattr,\ntransform(data.get(cased_attr, None) if maybe else data[cased_attr]),\n)\nelse:\nsetattr(model, attr, data.get(cased_attr, None) if maybe else data[cased_attr])\ndef _set_attrs_cased(\nself,\nmodel: t.Any,\ndata: DictT,\n*attrs: str,\ntransform: TransformT = None,\nmaybe: bool = False,\n) -&gt; None:\nself._set_attrs(model, data, *attrs, transform=transform, camel_case=True, maybe=maybe)\ndef _deserialize_base_achievement(self, model: AchievementT, data: DictT) -&gt; AchievementT:\nmodel.metric = enums.Metric.from_str(data[\"metric\"])\nmodel.measure = models.AchievementMeasure.from_str(data[\"measure\"])\nself._set_attrs_cased(model, data, \"name\", \"player_id\", \"threshold\", \"accuracy\")\nreturn model\ndef _determine_hiscores_entry_item(\nself, data: DictT\n) -&gt; t.Union[\nmodels.GroupHiscoresActivityItem,\nmodels.GroupHiscoresBossItem,\nmodels.GroupHiscoresSkillItem,\nmodels.GroupHiscoresComputedMetricItem,\n]:\nif \"experience\" in data:\nreturn self.deserialize_group_hiscores_skill_item(data)\nif \"kills\" in data:\nreturn self.deserialize_group_hiscores_boss_item(data)\nif \"score\" in data:\nreturn self.deserialize_group_hiscores_activity_item(data)\nif \"value\" in data:\nreturn self.deserialize_group_hiscores_computed_item(data)\nraise ValueError(f\"Unknown hiscores entry item: {data}\")\ndef deserialize_player(self, data: DictT) -&gt; models.Player:\n\"\"\"Deserializes the data into a player model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nplayer = models.Player()\nself._set_attrs_cased(\nplayer,\ndata,\n\"id\",\n\"username\",\n\"display_name\",\n\"exp\",\n\"ehp\",\n\"ehb\",\n\"ttm\",\n\"tt200m\",\n)\nplayer.type = models.PlayerType.from_str(data[\"type\"])\nplayer.build = models.PlayerBuild.from_str(data[\"build\"])\nplayer.status = models.PlayerStatus.from_str(data[\"status\"])\nplayer.country = models.Country.from_str_maybe(data[\"country\"])\nplayer.registered_at = self._dt_from_iso(data[\"registeredAt\"])\nplayer.updated_at = self._dt_from_iso(data[\"updatedAt\"])\nplayer.last_changed_at = self._dt_from_iso_maybe(data[\"lastChangedAt\"])\nplayer.last_imported_at = self._dt_from_iso_maybe(data[\"lastImportedAt\"])\nreturn player\ndef deserialize_player_details(self, data: DictT) -&gt; models.PlayerDetail:\n\"\"\"Deserializes the data into a player detail model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ndetails = models.PlayerDetail()\ndetails.combat_level = data[\"combatLevel\"]\ndetails.player = self.deserialize_player(data)\ndetails.latest_snapshot = self.deserialize_snapshot(data[\"latestSnapshot\"])\nreturn details\ndef deserialize_snapshot(self, data: DictT) -&gt; models.Snapshot:\n\"\"\"Deserializes the data into a snapshot model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nsnapshot = models.Snapshot()\nsnapshot.created_at = self._dt_from_iso(data[\"createdAt\"])\nsnapshot.imported_at = self._dt_from_iso_maybe(data.get(\"importedAt\"))\nsnapshot.data = self.deserialize_snapshot_data(data[\"data\"])\nself._set_attrs_cased(snapshot, data, \"id\", \"player_id\")\nreturn snapshot\ndef deserialize_snapshot_data(self, data: DictT) -&gt; models.SnapshotData:\n\"\"\"Deserializes the data into a snapshot data model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nmodel = models.SnapshotData()\nmodel.skills = self.__map(self.deserialize_skill, data[\"skills\"].values())\nmodel.bosses = self.__map(self.deserialize_boss, data[\"bosses\"].values())\nmodel.activities = self.__map(self.deserialize_activity, data[\"activities\"].values())\nmodel.computed = self.__map(self.deserialize_computed_metric, data[\"computed\"].values())\nreturn model\ndef deserialize_skill(self, data: DictT) -&gt; models.Skill:\n\"\"\"Deserializes the data into a skill model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nskill = models.Skill()\nskill.metric = enums.Skills.from_str(data[\"metric\"])\nself._set_attrs(skill, data, \"ehp\", \"rank\", \"level\", \"experience\")\nreturn skill\ndef deserialize_boss(self, data: DictT) -&gt; models.Boss:\n\"\"\"Deserializes the data into a boss model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nboss = models.Boss()\nboss.metric = enums.Bosses.from_str(data[\"metric\"])\nself._set_attrs(boss, data, \"ehb\", \"rank\", \"kills\")\nreturn boss\ndef deserialize_activity(self, data: DictT) -&gt; models.Activity:\n\"\"\"Deserializes the data into an activity model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nactivity = models.Activity()\nactivity.metric = enums.Activities.from_str(data[\"metric\"])\nself._set_attrs(activity, data, \"rank\", \"score\")\nreturn activity\ndef deserialize_computed_metric(self, data: DictT) -&gt; models.ComputedMetric:\n\"\"\"Deserializes the data into a computed metric model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ncomputed = models.ComputedMetric()\ncomputed.metric = enums.ComputedMetrics.from_str(data[\"metric\"])\nself._set_attrs(computed, data, \"rank\", \"value\")\nreturn computed\ndef deserialize_asserted_player_type(self, data: DictT) -&gt; models.AssertPlayerType:\n\"\"\"Deserializes the data into an assert player type model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nasserted = models.AssertPlayerType()\nasserted.player = self.deserialize_player(data[\"player\"])\nasserted.changed = data[\"changed\"]\nreturn asserted\ndef deserialize_achievement_progress(self, data: DictT) -&gt; models.AchievementProgress:\n\"\"\"Deserializes the data into an achievement progress model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nachievement = self._deserialize_base_achievement(models.AchievementProgress(), data)\nachievement.created_at = self._dt_from_iso_maybe(data[\"createdAt\"])\nreturn achievement\ndef deserialize_achievement(self, data: DictT) -&gt; models.Achievement:\n\"\"\"Deserializes the data into an achievement model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nachievement = self._deserialize_base_achievement(models.Achievement(), data)\nachievement.created_at = self._dt_from_iso(data[\"createdAt\"])\nreturn achievement\ndef deserialize_player_achievement_progress(\nself, data: DictT\n) -&gt; models.PlayerAchievementProgress:\n\"\"\"Deserializes the data into a player achievement progress\n        model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nprogress = models.PlayerAchievementProgress()\nprogress.achievement = self.deserialize_achievement_progress(data)\nself._set_attrs_cased(\nprogress, data, \"current_value\", \"absolute_progress\", \"relative_progress\"\n)\nreturn progress\ndef deserialize_gains(self, data: DictT) -&gt; models.Gains:\n\"\"\"Deserializes the data into a gains model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ngains = models.Gains()\nself._set_attrs(gains, data, \"gained\", \"start\", \"end\")\nreturn gains\ndef deserialize_skill_gains(self, data: DictT) -&gt; models.SkillGains:\n\"\"\"Deserializes the data into a skill gains model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ngains = models.SkillGains()\ngains.metric = enums.Skills.from_str(data[\"metric\"])\nself._set_attrs(\ngains, data, \"experience\", \"ehp\", \"rank\", \"level\", transform=self.deserialize_gains\n)\nreturn gains\ndef deserialize_boss_gains(self, data: DictT) -&gt; models.BossGains:\n\"\"\"Deserializes the data into a boss gains model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ngains = models.BossGains()\ngains.metric = enums.Bosses.from_str(data[\"metric\"])\nself._set_attrs(gains, data, \"ehb\", \"rank\", \"kills\", transform=self.deserialize_gains)\nreturn gains\ndef deserialize_activity_gains(self, data: DictT) -&gt; models.ActivityGains:\n\"\"\"Deserializes the data into an activity gains model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ngains = models.ActivityGains()\ngains.metric = enums.Activities.from_str(data[\"metric\"])\nself._set_attrs(gains, data, \"rank\", \"score\", transform=self.deserialize_gains)\nreturn gains\ndef deserialize_computed_gains(self, data: DictT) -&gt; models.ComputedGains:\n\"\"\"Deserializes the data into a computed gains model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ngains = models.ComputedGains()\ngains.metric = enums.ComputedMetrics.from_str(data[\"metric\"])\nself._set_attrs(gains, data, \"rank\", \"value\", transform=self.deserialize_gains)\nreturn gains\ndef deserialize_player_gains_data(self, data: DictT) -&gt; models.PlayerGainsData:\n\"\"\"Deserializes the data into a player gains data model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ngains = models.PlayerGainsData()\ngains.skills = self.__map(self.deserialize_skill_gains, data[\"skills\"].values())\ngains.bosses = self.__map(self.deserialize_boss_gains, data[\"bosses\"].values())\ngains.computed = self.__map(self.deserialize_computed_gains, data[\"computed\"].values())\ngains.activities = self.__map(self.deserialize_activity_gains, data[\"activities\"].values())\nreturn gains\ndef deserialize_player_gains(self, data: DictT) -&gt; models.PlayerGains:\n\"\"\"Deserializes the data into a player gains model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ngains = models.PlayerGains()\ngains.data = self.deserialize_player_gains_data(data[\"data\"])\nself._set_attrs_cased(gains, data, \"starts_at\", \"ends_at\", transform=self._dt_from_iso)\nreturn gains\ndef deserialize_name_change_review_context(\nself, data: DictT\n) -&gt; models.NameChangeReviewContext:\n\"\"\"Deserializes the data into a name change review context.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nctx: models.NameChangeReviewContext\nreason = models.NameChangeReviewReason.from_str(data[\"reason\"])\nskipped_reasons = (\nmodels.NameChangeReviewReason.TransitionTooLong,\nmodels.NameChangeReviewReason.ExcessiveGains,\nmodels.NameChangeReviewReason.TotalLevelTooLow,\n)\ndenied_reasons = (\nmodels.NameChangeReviewReason.ManualReview,\nmodels.NameChangeReviewReason.OldStatsNotFound,\nmodels.NameChangeReviewReason.NewNameNotFound,\nmodels.NameChangeReviewReason.NegativeGains,\n)\nif reason in skipped_reasons:\nctx = models.SkippedNameChangeReviewContext()\nctx.reason = reason  # type: ignore[assignment]\nself._set_attrs_cased(\nctx,\ndata,\n\"max_hours_diff\",\n\"hours_diff\",\n\"ehp_diff\",\n\"ehb_diff\",\n\"min_total_level\",\n\"total_level\",\nmaybe=True,\n)\nelif reason in denied_reasons:\nctx = models.DeniedNameChangeReviewContext()\nctx.reason = reason  # type: ignore[assignment]\nctx.negative_gains = None\nif reason is models.NameChangeReviewReason.NegativeGains:\nnegative_gains: t.Dict[enums.Metric, int] = {}\nfor metric, value in data[\"negativeGains\"].items():\nnegative_gains[enums.Metric.from_str(metric)] = value\nctx.negative_gains = negative_gains\nelse:\nraise RuntimeError(\"Unreachable code reached! Serializer::name_change_review_context\")\nreturn ctx\ndef deserialize_name_change(self, data: DictT) -&gt; models.NameChange:\n\"\"\"Deserializes the data into a name change model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nchange = models.NameChange()\nchange.status = models.NameChangeStatus.from_str(data[\"status\"])\nchange.updated_at = self._dt_from_iso(data[\"updatedAt\"])\nchange.created_at = self._dt_from_iso(data[\"createdAt\"])\nchange.resolved_at = self._dt_from_iso_maybe(data[\"createdAt\"])\nself._set_attrs_cased(change, data, \"id\", \"player_id\", \"old_name\", \"new_name\")\nif review_context := data.get(\"reviewContext\", None):\nchange.review_context = self.deserialize_name_change_review_context(review_context)\nelse:\nchange.review_context = review_context\nreturn change\ndef deserialize_record(self, data: DictT) -&gt; models.Record:\n\"\"\"Deserializes the data into a record model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nrecord = models.Record()\nrecord.period = enums.Period.from_str(data[\"period\"])\nrecord.metric = enums.Metric.from_str(data[\"metric\"])\nrecord.updated_at = self._dt_from_iso(data[\"updatedAt\"])\nself._set_attrs_cased(record, data, \"id\", \"player_id\", \"value\")\nreturn record\ndef deserialize_record_leaderboard_entry(self, data: DictT) -&gt; models.RecordLeaderboardEntry:\n\"\"\"Deserializes the data into a record leaderboard entry model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nrecord = models.RecordLeaderboardEntry()\nrecord.record = self.deserialize_record(data)\nrecord.player = self.deserialize_player(data[\"player\"])\nreturn record\ndef deserialize_delta_leaderboard_entry(self, data: DictT) -&gt; models.DeltaLeaderboardEntry:\n\"\"\"Deserializes the data into a delta leaderboard entry  model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ndelta = models.DeltaLeaderboardEntry()\ndelta.gained = data[\"gained\"]\ndelta.player_id = data[\"playerId\"]\ndelta.end_date = self._dt_from_iso(data[\"endDate\"])\ndelta.start_date = self._dt_from_iso(data[\"startDate\"])\ndelta.player = self.deserialize_player(data[\"player\"])\nreturn delta\ndef deserialize_group(self, data: DictT) -&gt; models.Group:\n\"\"\"Deserializes the data into a group model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ngroup = models.Group()\ngroup.created_at = self._dt_from_iso(data[\"createdAt\"])\ngroup.updated_at = self._dt_from_iso(data[\"updatedAt\"])\nself._set_attrs_cased(\ngroup,\ndata,\n\"id\",\n\"name\",\n\"clan_chat\",\n\"description\",\n\"homeworld\",\n\"verified\",\n\"score\",\n\"member_count\",\n)\nreturn group\ndef deserialize_membership(self, data: DictT) -&gt; models.Membership:\n\"\"\"Deserializes the data into a membership model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nmembership = models.Membership()\nmembership.role = models.GroupRole.from_str_maybe(data[\"role\"])\nmembership.created_at = self._dt_from_iso(data[\"createdAt\"])\nmembership.updated_at = self._dt_from_iso(data[\"updatedAt\"])\nself._set_attrs_cased(membership, data, \"player_id\", \"group_id\")\nreturn membership\ndef deserialize_group_membership(self, data: DictT) -&gt; models.GroupMembership:\n\"\"\"Deserializes the data into a group membership model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ngroup = models.GroupMembership()\ngroup.player = self.deserialize_player(data[\"player\"])\ngroup.membership = self.deserialize_membership(data)\nreturn group\ndef deserialize_group_details(self, data: DictT) -&gt; models.GroupDetail:\n\"\"\"Deserializes the data into a group detail model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ndetails = models.GroupDetail()\ndetails.verification_code = None\ndetails.group = self.deserialize_group(data)\ndetails.memberships = [self.deserialize_group_membership(m) for m in data[\"memberships\"]]\nreturn details\ndef deserialize_group_hiscores_activity_item(\nself, data: DictT\n) -&gt; models.GroupHiscoresActivityItem:\n\"\"\"Deserializes the data into a group hiscores activity item\n        model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nitem = models.GroupHiscoresActivityItem()\nself._set_attrs(item, data, \"rank\", \"score\")\nreturn item\ndef deserialize_group_hiscores_boss_item(self, data: DictT) -&gt; models.GroupHiscoresBossItem:\n\"\"\"Deserializes the data into a group hiscores boss item model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nitem = models.GroupHiscoresBossItem()\nself._set_attrs(item, data, \"rank\", \"kills\")\nreturn item\ndef deserialize_group_hiscores_skill_item(self, data: DictT) -&gt; models.GroupHiscoresSkillItem:\n\"\"\"Deserializes the data into a group hiscores skill item model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nitem = models.GroupHiscoresSkillItem()\nself._set_attrs(item, data, \"rank\", \"level\", \"experience\")\nreturn item\ndef deserialize_group_hiscores_computed_item(\nself, data: DictT\n) -&gt; models.GroupHiscoresComputedMetricItem:\n\"\"\"Deserializes the data into a group hiscores computed metric\n        item model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nitem = models.GroupHiscoresComputedMetricItem()\nself._set_attrs(item, data, \"rank\", \"value\")\nreturn item\ndef deserialize_group_hiscores_entry(self, data: DictT) -&gt; models.GroupHiscoresEntry:\n\"\"\"Deserializes the data into a group hiscores entry model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nhiscores = models.GroupHiscoresEntry()\nhiscores.player = self.deserialize_player(data[\"player\"])\nhiscores.data = self._determine_hiscores_entry_item(data[\"data\"])\nreturn hiscores\ndef deserialize_group_statistics(self, data: DictT) -&gt; models.GroupStatistics:\n\"\"\"Deserializes the data into a group statistics model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nstatistics = models.GroupStatistics()\nstatistics.maxed_200ms_count = data[\"maxed200msCount\"]\nstatistics.average_stats = self.deserialize_snapshot(data[\"averageStats\"])\nstatistics.metric_leaders = self.deserialize_metric_leaders(data[\"metricLeaders\"])\nself._set_attrs_cased(statistics, data, \"maxed_total_count\", \"maxed_combat_count\")\nreturn statistics\ndef deserialize_competition(self, data: DictT) -&gt; models.Competition:\n\"\"\"Deserializes the data into a competition model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ncompetition = models.Competition()\ncompetition.metric = enums.Metric.from_str(data[\"metric\"])\ncompetition.type = models.CompetitionType.from_str(data[\"type\"])\ncompetition.group = self.deserialize_group(g) if (g := data.get(\"group\")) else None\nself._set_attrs_cased(\ncompetition,\ndata,\n\"starts_at\",\n\"ends_at\",\n\"created_at\",\n\"updated_at\",\ntransform=self._dt_from_iso,\n)\nself._set_attrs_cased(\ncompetition, data, \"id\", \"title\", \"group_id\", \"score\", \"participant_count\"\n)\nreturn competition\ndef deserialize_participation(self, data: DictT) -&gt; models.Participation:\n\"\"\"Deserializes the data into a participation model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nparticipation = models.Participation()\nparticipation.created_at = self._dt_from_iso(data[\"createdAt\"])\nparticipation.updated_at = self._dt_from_iso(data[\"updatedAt\"])\nself._set_attrs_cased(participation, data, \"player_id\", \"competition_id\", \"team_name\")\nreturn participation\ndef deserialize_player_participation(self, data: DictT) -&gt; models.PlayerParticipation:\n\"\"\"Deserializes the data into a player participation model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nplayer_participation = models.PlayerParticipation()\nplayer_participation.competition = self.deserialize_competition(data[\"competition\"])\nplayer_participation.data = self.deserialize_participation(data)\nreturn player_participation\ndef deserialize_competition_participation(\nself, data: DictT\n) -&gt; models.CompetitionParticipation:\n\"\"\"Deserializes the data into a competition participation model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ncompetition_participation = models.CompetitionParticipation()\ncompetition_participation.player = self.deserialize_player(data[\"player\"])\ncompetition_participation.data = self.deserialize_participation(data)\nreturn competition_participation\ndef deserialize_competition_progress(self, data: DictT) -&gt; models.CompetitionProgress:\n\"\"\"Deserializes the data into a competition progress model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nprogress = models.CompetitionProgress()\nself._set_attrs(progress, data, \"start\", \"end\", \"gained\")\nreturn progress\ndef deserialize_player_competition_standing(\nself, data: DictT\n) -&gt; models.PlayerCompetitionStanding:\n\"\"\"Deserializes the data into a player competition standing\n        model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nstanding = models.PlayerCompetitionStanding()\nstanding.rank = data[\"rank\"]\nstanding.participation = self.deserialize_player_participation(data)\nstanding.progress = self.deserialize_competition_progress(data[\"progress\"])\nreturn standing\ndef deserialize_player_membership(self, data: DictT) -&gt; models.PlayerMembership:\n\"\"\"Deserializes the data into a player membership model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nplayer_membership = models.PlayerMembership()\nplayer_membership.group = self.deserialize_group(data[\"group\"])\nplayer_membership.membership = self.deserialize_membership(data)\nreturn player_membership\ndef deserialize_competition_details(self, data: DictT) -&gt; models.CompetitionDetail:\n\"\"\"Deserializes the data into a competition detail model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ndetails = models.CompetitionDetail()\ndetails.competition = self.deserialize_competition(data)\ndetails.participations = [\nself.deserialize_competition_participation_detail(d) for d in data[\"participations\"]\n]\nreturn details\ndef deserialize_competition_participation_detail(\nself, data: DictT\n) -&gt; models.CompetitionParticipationDetail:\n\"\"\"Deserializes the data into a competition participation\n        detail model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nparticipation_details = models.CompetitionParticipationDetail()\nparticipation_details.participation = self.deserialize_competition_participation(data)\nparticipation_details.progress = self.deserialize_competition_progress(data[\"progress\"])\nreturn participation_details\ndef deserialize_competition_history_data_point(\nself, data: DictT\n) -&gt; models.CompetitionHistoryDataPoint:\n\"\"\"Deserializes the data into a competition history data point\n        model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\ndatapoint = models.CompetitionHistoryDataPoint()\ndatapoint.date = self._dt_from_iso(data[\"date\"])\ndatapoint.value = data[\"value\"]\nreturn datapoint\ndef deserialize_top5_progress_result(self, data: DictT) -&gt; models.Top5ProgressResult:\n\"\"\"Deserializes the data into a top 5 progress result model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nprogress = models.Top5ProgressResult()\nprogress.player = self.deserialize_player(data[\"player\"])\nprogress.history = [\nself.deserialize_competition_history_data_point(h) for h in data[\"history\"]\n]\nreturn progress\ndef deserialize_competition_with_participation(\nself, data: DictT\n) -&gt; models.CompetitionWithParticipations:\n\"\"\"Deserializes the data into a competition with participations\n        model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nmodel = models.CompetitionWithParticipations()\nmodel.verification_code = data.get(\"verificationCode\")\nmodel.competition = self.deserialize_competition(data)\nmodel.participations = [\nself.deserialize_competition_participation(p) for p in data[\"participations\"]\n]\nreturn model\ndef deserialize_skill_leader(self, data: DictT) -&gt; models.SkillLeader:\n\"\"\"Deserializes the data into a skill leader model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nleader = models.SkillLeader()\nleader.metric = enums.Skills.from_str(data[\"metric\"])\nself._set_attrs(leader, data, \"experience\", \"rank\", \"level\")\nif player := data.get(\"player\", None):\nleader.player = self.deserialize_player(player)\nelse:\nleader.player = player\nreturn leader\ndef deserialize_boss_leader(self, data: DictT) -&gt; models.BossLeader:\n\"\"\"Deserializes the data into a boss leader model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nleader = models.BossLeader()\nleader.metric = enums.Bosses.from_str(data[\"metric\"])\nself._set_attrs(leader, data, \"kills\", \"rank\")\nif player := data.get(\"player\", None):\nleader.player = self.deserialize_player(player)\nelse:\nleader.player = player\nreturn leader\ndef deserialize_activity_leader(self, data: DictT) -&gt; models.ActivityLeader:\n\"\"\"Deserializes the data into an activity leader model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nleader = models.ActivityLeader()\nleader.metric = enums.Activities.from_str(data[\"metric\"])\nself._set_attrs(leader, data, \"score\", \"rank\")\nif player := data.get(\"player\", None):\nleader.player = self.deserialize_player(player)\nelse:\nleader.player = player\nreturn leader\ndef deserialize_computed_leader(self, data: DictT) -&gt; models.ComputedMetricLeader:\n\"\"\"Deserializes the data into a computed metric leader model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nleader = models.ComputedMetricLeader()\nleader.metric = enums.ComputedMetrics.from_str(data[\"metric\"])\nself._set_attrs(leader, data, \"value\", \"rank\")\nif player := data.get(\"player\", None):\nleader.player = self.deserialize_player(player)\nelse:\nleader.player = player\nreturn leader\ndef deserialize_metric_leaders(self, data: DictT) -&gt; models.MetricLeaders:\n\"\"\"Deserializes the data into a metric leaders model.\n        Args:\n            data: The JSON payload.\n        Returns:\n            The requested model.\n        \"\"\"\nleaders = models.MetricLeaders()\nleaders.skills = self.__map(self.deserialize_skill_leader, data[\"skills\"].values())\nleaders.bosses = self.__map(self.deserialize_boss_leader, data[\"bosses\"].values())\nleaders.computed = self.__map(self.deserialize_computed_leader, data[\"computed\"].values())\nleaders.activities = self.__map(\nself.deserialize_activity_leader, data[\"activities\"].values()\n)\nreturn leaders\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_achievement","title":"deserialize_achievement","text":"<pre><code>deserialize_achievement(data: DictT) -&gt; models.Achievement\n</code></pre> <p>Deserializes the data into an achievement model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.Achievement</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_achievement(self, data: DictT) -&gt; models.Achievement:\n\"\"\"Deserializes the data into an achievement model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nachievement = self._deserialize_base_achievement(models.Achievement(), data)\nachievement.created_at = self._dt_from_iso(data[\"createdAt\"])\nreturn achievement\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_achievement_progress","title":"deserialize_achievement_progress","text":"<pre><code>deserialize_achievement_progress(\ndata: DictT,\n) -&gt; models.AchievementProgress\n</code></pre> <p>Deserializes the data into an achievement progress model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.AchievementProgress</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_achievement_progress(self, data: DictT) -&gt; models.AchievementProgress:\n\"\"\"Deserializes the data into an achievement progress model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nachievement = self._deserialize_base_achievement(models.AchievementProgress(), data)\nachievement.created_at = self._dt_from_iso_maybe(data[\"createdAt\"])\nreturn achievement\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_activity","title":"deserialize_activity","text":"<pre><code>deserialize_activity(data: DictT) -&gt; models.Activity\n</code></pre> <p>Deserializes the data into an activity model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.Activity</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_activity(self, data: DictT) -&gt; models.Activity:\n\"\"\"Deserializes the data into an activity model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nactivity = models.Activity()\nactivity.metric = enums.Activities.from_str(data[\"metric\"])\nself._set_attrs(activity, data, \"rank\", \"score\")\nreturn activity\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_activity_gains","title":"deserialize_activity_gains","text":"<pre><code>deserialize_activity_gains(\ndata: DictT,\n) -&gt; models.ActivityGains\n</code></pre> <p>Deserializes the data into an activity gains model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.ActivityGains</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_activity_gains(self, data: DictT) -&gt; models.ActivityGains:\n\"\"\"Deserializes the data into an activity gains model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ngains = models.ActivityGains()\ngains.metric = enums.Activities.from_str(data[\"metric\"])\nself._set_attrs(gains, data, \"rank\", \"score\", transform=self.deserialize_gains)\nreturn gains\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_activity_leader","title":"deserialize_activity_leader","text":"<pre><code>deserialize_activity_leader(\ndata: DictT,\n) -&gt; models.ActivityLeader\n</code></pre> <p>Deserializes the data into an activity leader model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.ActivityLeader</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_activity_leader(self, data: DictT) -&gt; models.ActivityLeader:\n\"\"\"Deserializes the data into an activity leader model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nleader = models.ActivityLeader()\nleader.metric = enums.Activities.from_str(data[\"metric\"])\nself._set_attrs(leader, data, \"score\", \"rank\")\nif player := data.get(\"player\", None):\nleader.player = self.deserialize_player(player)\nelse:\nleader.player = player\nreturn leader\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_asserted_player_type","title":"deserialize_asserted_player_type","text":"<pre><code>deserialize_asserted_player_type(\ndata: DictT,\n) -&gt; models.AssertPlayerType\n</code></pre> <p>Deserializes the data into an assert player type model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.AssertPlayerType</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_asserted_player_type(self, data: DictT) -&gt; models.AssertPlayerType:\n\"\"\"Deserializes the data into an assert player type model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nasserted = models.AssertPlayerType()\nasserted.player = self.deserialize_player(data[\"player\"])\nasserted.changed = data[\"changed\"]\nreturn asserted\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_boss","title":"deserialize_boss","text":"<pre><code>deserialize_boss(data: DictT) -&gt; models.Boss\n</code></pre> <p>Deserializes the data into a boss model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.Boss</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_boss(self, data: DictT) -&gt; models.Boss:\n\"\"\"Deserializes the data into a boss model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nboss = models.Boss()\nboss.metric = enums.Bosses.from_str(data[\"metric\"])\nself._set_attrs(boss, data, \"ehb\", \"rank\", \"kills\")\nreturn boss\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_boss_gains","title":"deserialize_boss_gains","text":"<pre><code>deserialize_boss_gains(data: DictT) -&gt; models.BossGains\n</code></pre> <p>Deserializes the data into a boss gains model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.BossGains</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_boss_gains(self, data: DictT) -&gt; models.BossGains:\n\"\"\"Deserializes the data into a boss gains model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ngains = models.BossGains()\ngains.metric = enums.Bosses.from_str(data[\"metric\"])\nself._set_attrs(gains, data, \"ehb\", \"rank\", \"kills\", transform=self.deserialize_gains)\nreturn gains\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_boss_leader","title":"deserialize_boss_leader","text":"<pre><code>deserialize_boss_leader(data: DictT) -&gt; models.BossLeader\n</code></pre> <p>Deserializes the data into a boss leader model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.BossLeader</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_boss_leader(self, data: DictT) -&gt; models.BossLeader:\n\"\"\"Deserializes the data into a boss leader model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nleader = models.BossLeader()\nleader.metric = enums.Bosses.from_str(data[\"metric\"])\nself._set_attrs(leader, data, \"kills\", \"rank\")\nif player := data.get(\"player\", None):\nleader.player = self.deserialize_player(player)\nelse:\nleader.player = player\nreturn leader\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_competition","title":"deserialize_competition","text":"<pre><code>deserialize_competition(data: DictT) -&gt; models.Competition\n</code></pre> <p>Deserializes the data into a competition model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.Competition</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_competition(self, data: DictT) -&gt; models.Competition:\n\"\"\"Deserializes the data into a competition model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ncompetition = models.Competition()\ncompetition.metric = enums.Metric.from_str(data[\"metric\"])\ncompetition.type = models.CompetitionType.from_str(data[\"type\"])\ncompetition.group = self.deserialize_group(g) if (g := data.get(\"group\")) else None\nself._set_attrs_cased(\ncompetition,\ndata,\n\"starts_at\",\n\"ends_at\",\n\"created_at\",\n\"updated_at\",\ntransform=self._dt_from_iso,\n)\nself._set_attrs_cased(\ncompetition, data, \"id\", \"title\", \"group_id\", \"score\", \"participant_count\"\n)\nreturn competition\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_competition_details","title":"deserialize_competition_details","text":"<pre><code>deserialize_competition_details(\ndata: DictT,\n) -&gt; models.CompetitionDetail\n</code></pre> <p>Deserializes the data into a competition detail model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.CompetitionDetail</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_competition_details(self, data: DictT) -&gt; models.CompetitionDetail:\n\"\"\"Deserializes the data into a competition detail model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ndetails = models.CompetitionDetail()\ndetails.competition = self.deserialize_competition(data)\ndetails.participations = [\nself.deserialize_competition_participation_detail(d) for d in data[\"participations\"]\n]\nreturn details\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_competition_history_data_point","title":"deserialize_competition_history_data_point","text":"<pre><code>deserialize_competition_history_data_point(\ndata: DictT,\n) -&gt; models.CompetitionHistoryDataPoint\n</code></pre> <p>Deserializes the data into a competition history data point model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.CompetitionHistoryDataPoint</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_competition_history_data_point(\nself, data: DictT\n) -&gt; models.CompetitionHistoryDataPoint:\n\"\"\"Deserializes the data into a competition history data point\n    model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ndatapoint = models.CompetitionHistoryDataPoint()\ndatapoint.date = self._dt_from_iso(data[\"date\"])\ndatapoint.value = data[\"value\"]\nreturn datapoint\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_competition_participation","title":"deserialize_competition_participation","text":"<pre><code>deserialize_competition_participation(\ndata: DictT,\n) -&gt; models.CompetitionParticipation\n</code></pre> <p>Deserializes the data into a competition participation model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.CompetitionParticipation</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_competition_participation(\nself, data: DictT\n) -&gt; models.CompetitionParticipation:\n\"\"\"Deserializes the data into a competition participation model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ncompetition_participation = models.CompetitionParticipation()\ncompetition_participation.player = self.deserialize_player(data[\"player\"])\ncompetition_participation.data = self.deserialize_participation(data)\nreturn competition_participation\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_competition_participation_detail","title":"deserialize_competition_participation_detail","text":"<pre><code>deserialize_competition_participation_detail(\ndata: DictT,\n) -&gt; models.CompetitionParticipationDetail\n</code></pre> <p>Deserializes the data into a competition participation detail model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.CompetitionParticipationDetail</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_competition_participation_detail(\nself, data: DictT\n) -&gt; models.CompetitionParticipationDetail:\n\"\"\"Deserializes the data into a competition participation\n    detail model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nparticipation_details = models.CompetitionParticipationDetail()\nparticipation_details.participation = self.deserialize_competition_participation(data)\nparticipation_details.progress = self.deserialize_competition_progress(data[\"progress\"])\nreturn participation_details\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_competition_progress","title":"deserialize_competition_progress","text":"<pre><code>deserialize_competition_progress(\ndata: DictT,\n) -&gt; models.CompetitionProgress\n</code></pre> <p>Deserializes the data into a competition progress model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.CompetitionProgress</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_competition_progress(self, data: DictT) -&gt; models.CompetitionProgress:\n\"\"\"Deserializes the data into a competition progress model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nprogress = models.CompetitionProgress()\nself._set_attrs(progress, data, \"start\", \"end\", \"gained\")\nreturn progress\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_competition_with_participation","title":"deserialize_competition_with_participation","text":"<pre><code>deserialize_competition_with_participation(\ndata: DictT,\n) -&gt; models.CompetitionWithParticipations\n</code></pre> <p>Deserializes the data into a competition with participations model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.CompetitionWithParticipations</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_competition_with_participation(\nself, data: DictT\n) -&gt; models.CompetitionWithParticipations:\n\"\"\"Deserializes the data into a competition with participations\n    model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nmodel = models.CompetitionWithParticipations()\nmodel.verification_code = data.get(\"verificationCode\")\nmodel.competition = self.deserialize_competition(data)\nmodel.participations = [\nself.deserialize_competition_participation(p) for p in data[\"participations\"]\n]\nreturn model\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_computed_gains","title":"deserialize_computed_gains","text":"<pre><code>deserialize_computed_gains(\ndata: DictT,\n) -&gt; models.ComputedGains\n</code></pre> <p>Deserializes the data into a computed gains model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.ComputedGains</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_computed_gains(self, data: DictT) -&gt; models.ComputedGains:\n\"\"\"Deserializes the data into a computed gains model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ngains = models.ComputedGains()\ngains.metric = enums.ComputedMetrics.from_str(data[\"metric\"])\nself._set_attrs(gains, data, \"rank\", \"value\", transform=self.deserialize_gains)\nreturn gains\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_computed_leader","title":"deserialize_computed_leader","text":"<pre><code>deserialize_computed_leader(\ndata: DictT,\n) -&gt; models.ComputedMetricLeader\n</code></pre> <p>Deserializes the data into a computed metric leader model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.ComputedMetricLeader</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_computed_leader(self, data: DictT) -&gt; models.ComputedMetricLeader:\n\"\"\"Deserializes the data into a computed metric leader model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nleader = models.ComputedMetricLeader()\nleader.metric = enums.ComputedMetrics.from_str(data[\"metric\"])\nself._set_attrs(leader, data, \"value\", \"rank\")\nif player := data.get(\"player\", None):\nleader.player = self.deserialize_player(player)\nelse:\nleader.player = player\nreturn leader\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_computed_metric","title":"deserialize_computed_metric","text":"<pre><code>deserialize_computed_metric(\ndata: DictT,\n) -&gt; models.ComputedMetric\n</code></pre> <p>Deserializes the data into a computed metric model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.ComputedMetric</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_computed_metric(self, data: DictT) -&gt; models.ComputedMetric:\n\"\"\"Deserializes the data into a computed metric model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ncomputed = models.ComputedMetric()\ncomputed.metric = enums.ComputedMetrics.from_str(data[\"metric\"])\nself._set_attrs(computed, data, \"rank\", \"value\")\nreturn computed\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_delta_leaderboard_entry","title":"deserialize_delta_leaderboard_entry","text":"<pre><code>deserialize_delta_leaderboard_entry(\ndata: DictT,\n) -&gt; models.DeltaLeaderboardEntry\n</code></pre> <p>Deserializes the data into a delta leaderboard entry  model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.DeltaLeaderboardEntry</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_delta_leaderboard_entry(self, data: DictT) -&gt; models.DeltaLeaderboardEntry:\n\"\"\"Deserializes the data into a delta leaderboard entry  model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ndelta = models.DeltaLeaderboardEntry()\ndelta.gained = data[\"gained\"]\ndelta.player_id = data[\"playerId\"]\ndelta.end_date = self._dt_from_iso(data[\"endDate\"])\ndelta.start_date = self._dt_from_iso(data[\"startDate\"])\ndelta.player = self.deserialize_player(data[\"player\"])\nreturn delta\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_gains","title":"deserialize_gains","text":"<pre><code>deserialize_gains(data: DictT) -&gt; models.Gains\n</code></pre> <p>Deserializes the data into a gains model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.Gains</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_gains(self, data: DictT) -&gt; models.Gains:\n\"\"\"Deserializes the data into a gains model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ngains = models.Gains()\nself._set_attrs(gains, data, \"gained\", \"start\", \"end\")\nreturn gains\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_group","title":"deserialize_group","text":"<pre><code>deserialize_group(data: DictT) -&gt; models.Group\n</code></pre> <p>Deserializes the data into a group model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.Group</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_group(self, data: DictT) -&gt; models.Group:\n\"\"\"Deserializes the data into a group model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ngroup = models.Group()\ngroup.created_at = self._dt_from_iso(data[\"createdAt\"])\ngroup.updated_at = self._dt_from_iso(data[\"updatedAt\"])\nself._set_attrs_cased(\ngroup,\ndata,\n\"id\",\n\"name\",\n\"clan_chat\",\n\"description\",\n\"homeworld\",\n\"verified\",\n\"score\",\n\"member_count\",\n)\nreturn group\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_group_details","title":"deserialize_group_details","text":"<pre><code>deserialize_group_details(\ndata: DictT,\n) -&gt; models.GroupDetail\n</code></pre> <p>Deserializes the data into a group detail model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.GroupDetail</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_group_details(self, data: DictT) -&gt; models.GroupDetail:\n\"\"\"Deserializes the data into a group detail model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ndetails = models.GroupDetail()\ndetails.verification_code = None\ndetails.group = self.deserialize_group(data)\ndetails.memberships = [self.deserialize_group_membership(m) for m in data[\"memberships\"]]\nreturn details\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_group_hiscores_activity_item","title":"deserialize_group_hiscores_activity_item","text":"<pre><code>deserialize_group_hiscores_activity_item(\ndata: DictT,\n) -&gt; models.GroupHiscoresActivityItem\n</code></pre> <p>Deserializes the data into a group hiscores activity item model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.GroupHiscoresActivityItem</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_group_hiscores_activity_item(\nself, data: DictT\n) -&gt; models.GroupHiscoresActivityItem:\n\"\"\"Deserializes the data into a group hiscores activity item\n    model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nitem = models.GroupHiscoresActivityItem()\nself._set_attrs(item, data, \"rank\", \"score\")\nreturn item\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_group_hiscores_boss_item","title":"deserialize_group_hiscores_boss_item","text":"<pre><code>deserialize_group_hiscores_boss_item(\ndata: DictT,\n) -&gt; models.GroupHiscoresBossItem\n</code></pre> <p>Deserializes the data into a group hiscores boss item model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.GroupHiscoresBossItem</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_group_hiscores_boss_item(self, data: DictT) -&gt; models.GroupHiscoresBossItem:\n\"\"\"Deserializes the data into a group hiscores boss item model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nitem = models.GroupHiscoresBossItem()\nself._set_attrs(item, data, \"rank\", \"kills\")\nreturn item\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_group_hiscores_computed_item","title":"deserialize_group_hiscores_computed_item","text":"<pre><code>deserialize_group_hiscores_computed_item(\ndata: DictT,\n) -&gt; models.GroupHiscoresComputedMetricItem\n</code></pre> <p>Deserializes the data into a group hiscores computed metric item model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.GroupHiscoresComputedMetricItem</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_group_hiscores_computed_item(\nself, data: DictT\n) -&gt; models.GroupHiscoresComputedMetricItem:\n\"\"\"Deserializes the data into a group hiscores computed metric\n    item model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nitem = models.GroupHiscoresComputedMetricItem()\nself._set_attrs(item, data, \"rank\", \"value\")\nreturn item\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_group_hiscores_entry","title":"deserialize_group_hiscores_entry","text":"<pre><code>deserialize_group_hiscores_entry(\ndata: DictT,\n) -&gt; models.GroupHiscoresEntry\n</code></pre> <p>Deserializes the data into a group hiscores entry model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.GroupHiscoresEntry</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_group_hiscores_entry(self, data: DictT) -&gt; models.GroupHiscoresEntry:\n\"\"\"Deserializes the data into a group hiscores entry model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nhiscores = models.GroupHiscoresEntry()\nhiscores.player = self.deserialize_player(data[\"player\"])\nhiscores.data = self._determine_hiscores_entry_item(data[\"data\"])\nreturn hiscores\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_group_hiscores_skill_item","title":"deserialize_group_hiscores_skill_item","text":"<pre><code>deserialize_group_hiscores_skill_item(\ndata: DictT,\n) -&gt; models.GroupHiscoresSkillItem\n</code></pre> <p>Deserializes the data into a group hiscores skill item model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.GroupHiscoresSkillItem</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_group_hiscores_skill_item(self, data: DictT) -&gt; models.GroupHiscoresSkillItem:\n\"\"\"Deserializes the data into a group hiscores skill item model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nitem = models.GroupHiscoresSkillItem()\nself._set_attrs(item, data, \"rank\", \"level\", \"experience\")\nreturn item\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_group_membership","title":"deserialize_group_membership","text":"<pre><code>deserialize_group_membership(\ndata: DictT,\n) -&gt; models.GroupMembership\n</code></pre> <p>Deserializes the data into a group membership model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.GroupMembership</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_group_membership(self, data: DictT) -&gt; models.GroupMembership:\n\"\"\"Deserializes the data into a group membership model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ngroup = models.GroupMembership()\ngroup.player = self.deserialize_player(data[\"player\"])\ngroup.membership = self.deserialize_membership(data)\nreturn group\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_group_statistics","title":"deserialize_group_statistics","text":"<pre><code>deserialize_group_statistics(\ndata: DictT,\n) -&gt; models.GroupStatistics\n</code></pre> <p>Deserializes the data into a group statistics model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.GroupStatistics</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_group_statistics(self, data: DictT) -&gt; models.GroupStatistics:\n\"\"\"Deserializes the data into a group statistics model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nstatistics = models.GroupStatistics()\nstatistics.maxed_200ms_count = data[\"maxed200msCount\"]\nstatistics.average_stats = self.deserialize_snapshot(data[\"averageStats\"])\nstatistics.metric_leaders = self.deserialize_metric_leaders(data[\"metricLeaders\"])\nself._set_attrs_cased(statistics, data, \"maxed_total_count\", \"maxed_combat_count\")\nreturn statistics\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_membership","title":"deserialize_membership","text":"<pre><code>deserialize_membership(data: DictT) -&gt; models.Membership\n</code></pre> <p>Deserializes the data into a membership model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.Membership</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_membership(self, data: DictT) -&gt; models.Membership:\n\"\"\"Deserializes the data into a membership model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nmembership = models.Membership()\nmembership.role = models.GroupRole.from_str_maybe(data[\"role\"])\nmembership.created_at = self._dt_from_iso(data[\"createdAt\"])\nmembership.updated_at = self._dt_from_iso(data[\"updatedAt\"])\nself._set_attrs_cased(membership, data, \"player_id\", \"group_id\")\nreturn membership\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_metric_leaders","title":"deserialize_metric_leaders","text":"<pre><code>deserialize_metric_leaders(\ndata: DictT,\n) -&gt; models.MetricLeaders\n</code></pre> <p>Deserializes the data into a metric leaders model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.MetricLeaders</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_metric_leaders(self, data: DictT) -&gt; models.MetricLeaders:\n\"\"\"Deserializes the data into a metric leaders model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nleaders = models.MetricLeaders()\nleaders.skills = self.__map(self.deserialize_skill_leader, data[\"skills\"].values())\nleaders.bosses = self.__map(self.deserialize_boss_leader, data[\"bosses\"].values())\nleaders.computed = self.__map(self.deserialize_computed_leader, data[\"computed\"].values())\nleaders.activities = self.__map(\nself.deserialize_activity_leader, data[\"activities\"].values()\n)\nreturn leaders\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_name_change","title":"deserialize_name_change","text":"<pre><code>deserialize_name_change(data: DictT) -&gt; models.NameChange\n</code></pre> <p>Deserializes the data into a name change model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.NameChange</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_name_change(self, data: DictT) -&gt; models.NameChange:\n\"\"\"Deserializes the data into a name change model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nchange = models.NameChange()\nchange.status = models.NameChangeStatus.from_str(data[\"status\"])\nchange.updated_at = self._dt_from_iso(data[\"updatedAt\"])\nchange.created_at = self._dt_from_iso(data[\"createdAt\"])\nchange.resolved_at = self._dt_from_iso_maybe(data[\"createdAt\"])\nself._set_attrs_cased(change, data, \"id\", \"player_id\", \"old_name\", \"new_name\")\nif review_context := data.get(\"reviewContext\", None):\nchange.review_context = self.deserialize_name_change_review_context(review_context)\nelse:\nchange.review_context = review_context\nreturn change\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_name_change_review_context","title":"deserialize_name_change_review_context","text":"<pre><code>deserialize_name_change_review_context(\ndata: DictT,\n) -&gt; models.NameChangeReviewContext\n</code></pre> <p>Deserializes the data into a name change review context.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.NameChangeReviewContext</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_name_change_review_context(\nself, data: DictT\n) -&gt; models.NameChangeReviewContext:\n\"\"\"Deserializes the data into a name change review context.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nctx: models.NameChangeReviewContext\nreason = models.NameChangeReviewReason.from_str(data[\"reason\"])\nskipped_reasons = (\nmodels.NameChangeReviewReason.TransitionTooLong,\nmodels.NameChangeReviewReason.ExcessiveGains,\nmodels.NameChangeReviewReason.TotalLevelTooLow,\n)\ndenied_reasons = (\nmodels.NameChangeReviewReason.ManualReview,\nmodels.NameChangeReviewReason.OldStatsNotFound,\nmodels.NameChangeReviewReason.NewNameNotFound,\nmodels.NameChangeReviewReason.NegativeGains,\n)\nif reason in skipped_reasons:\nctx = models.SkippedNameChangeReviewContext()\nctx.reason = reason  # type: ignore[assignment]\nself._set_attrs_cased(\nctx,\ndata,\n\"max_hours_diff\",\n\"hours_diff\",\n\"ehp_diff\",\n\"ehb_diff\",\n\"min_total_level\",\n\"total_level\",\nmaybe=True,\n)\nelif reason in denied_reasons:\nctx = models.DeniedNameChangeReviewContext()\nctx.reason = reason  # type: ignore[assignment]\nctx.negative_gains = None\nif reason is models.NameChangeReviewReason.NegativeGains:\nnegative_gains: t.Dict[enums.Metric, int] = {}\nfor metric, value in data[\"negativeGains\"].items():\nnegative_gains[enums.Metric.from_str(metric)] = value\nctx.negative_gains = negative_gains\nelse:\nraise RuntimeError(\"Unreachable code reached! Serializer::name_change_review_context\")\nreturn ctx\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_participation","title":"deserialize_participation","text":"<pre><code>deserialize_participation(\ndata: DictT,\n) -&gt; models.Participation\n</code></pre> <p>Deserializes the data into a participation model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.Participation</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_participation(self, data: DictT) -&gt; models.Participation:\n\"\"\"Deserializes the data into a participation model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nparticipation = models.Participation()\nparticipation.created_at = self._dt_from_iso(data[\"createdAt\"])\nparticipation.updated_at = self._dt_from_iso(data[\"updatedAt\"])\nself._set_attrs_cased(participation, data, \"player_id\", \"competition_id\", \"team_name\")\nreturn participation\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_player","title":"deserialize_player","text":"<pre><code>deserialize_player(data: DictT) -&gt; models.Player\n</code></pre> <p>Deserializes the data into a player model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.Player</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_player(self, data: DictT) -&gt; models.Player:\n\"\"\"Deserializes the data into a player model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nplayer = models.Player()\nself._set_attrs_cased(\nplayer,\ndata,\n\"id\",\n\"username\",\n\"display_name\",\n\"exp\",\n\"ehp\",\n\"ehb\",\n\"ttm\",\n\"tt200m\",\n)\nplayer.type = models.PlayerType.from_str(data[\"type\"])\nplayer.build = models.PlayerBuild.from_str(data[\"build\"])\nplayer.status = models.PlayerStatus.from_str(data[\"status\"])\nplayer.country = models.Country.from_str_maybe(data[\"country\"])\nplayer.registered_at = self._dt_from_iso(data[\"registeredAt\"])\nplayer.updated_at = self._dt_from_iso(data[\"updatedAt\"])\nplayer.last_changed_at = self._dt_from_iso_maybe(data[\"lastChangedAt\"])\nplayer.last_imported_at = self._dt_from_iso_maybe(data[\"lastImportedAt\"])\nreturn player\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_player_achievement_progress","title":"deserialize_player_achievement_progress","text":"<pre><code>deserialize_player_achievement_progress(\ndata: DictT,\n) -&gt; models.PlayerAchievementProgress\n</code></pre> <p>Deserializes the data into a player achievement progress model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.PlayerAchievementProgress</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_player_achievement_progress(\nself, data: DictT\n) -&gt; models.PlayerAchievementProgress:\n\"\"\"Deserializes the data into a player achievement progress\n    model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nprogress = models.PlayerAchievementProgress()\nprogress.achievement = self.deserialize_achievement_progress(data)\nself._set_attrs_cased(\nprogress, data, \"current_value\", \"absolute_progress\", \"relative_progress\"\n)\nreturn progress\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_player_competition_standing","title":"deserialize_player_competition_standing","text":"<pre><code>deserialize_player_competition_standing(\ndata: DictT,\n) -&gt; models.PlayerCompetitionStanding\n</code></pre> <p>Deserializes the data into a player competition standing model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.PlayerCompetitionStanding</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_player_competition_standing(\nself, data: DictT\n) -&gt; models.PlayerCompetitionStanding:\n\"\"\"Deserializes the data into a player competition standing\n    model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nstanding = models.PlayerCompetitionStanding()\nstanding.rank = data[\"rank\"]\nstanding.participation = self.deserialize_player_participation(data)\nstanding.progress = self.deserialize_competition_progress(data[\"progress\"])\nreturn standing\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_player_details","title":"deserialize_player_details","text":"<pre><code>deserialize_player_details(\ndata: DictT,\n) -&gt; models.PlayerDetail\n</code></pre> <p>Deserializes the data into a player detail model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.PlayerDetail</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_player_details(self, data: DictT) -&gt; models.PlayerDetail:\n\"\"\"Deserializes the data into a player detail model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ndetails = models.PlayerDetail()\ndetails.combat_level = data[\"combatLevel\"]\ndetails.player = self.deserialize_player(data)\ndetails.latest_snapshot = self.deserialize_snapshot(data[\"latestSnapshot\"])\nreturn details\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_player_gains","title":"deserialize_player_gains","text":"<pre><code>deserialize_player_gains(data: DictT) -&gt; models.PlayerGains\n</code></pre> <p>Deserializes the data into a player gains model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.PlayerGains</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_player_gains(self, data: DictT) -&gt; models.PlayerGains:\n\"\"\"Deserializes the data into a player gains model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ngains = models.PlayerGains()\ngains.data = self.deserialize_player_gains_data(data[\"data\"])\nself._set_attrs_cased(gains, data, \"starts_at\", \"ends_at\", transform=self._dt_from_iso)\nreturn gains\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_player_gains_data","title":"deserialize_player_gains_data","text":"<pre><code>deserialize_player_gains_data(\ndata: DictT,\n) -&gt; models.PlayerGainsData\n</code></pre> <p>Deserializes the data into a player gains data model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.PlayerGainsData</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_player_gains_data(self, data: DictT) -&gt; models.PlayerGainsData:\n\"\"\"Deserializes the data into a player gains data model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ngains = models.PlayerGainsData()\ngains.skills = self.__map(self.deserialize_skill_gains, data[\"skills\"].values())\ngains.bosses = self.__map(self.deserialize_boss_gains, data[\"bosses\"].values())\ngains.computed = self.__map(self.deserialize_computed_gains, data[\"computed\"].values())\ngains.activities = self.__map(self.deserialize_activity_gains, data[\"activities\"].values())\nreturn gains\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_player_membership","title":"deserialize_player_membership","text":"<pre><code>deserialize_player_membership(\ndata: DictT,\n) -&gt; models.PlayerMembership\n</code></pre> <p>Deserializes the data into a player membership model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.PlayerMembership</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_player_membership(self, data: DictT) -&gt; models.PlayerMembership:\n\"\"\"Deserializes the data into a player membership model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nplayer_membership = models.PlayerMembership()\nplayer_membership.group = self.deserialize_group(data[\"group\"])\nplayer_membership.membership = self.deserialize_membership(data)\nreturn player_membership\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_player_participation","title":"deserialize_player_participation","text":"<pre><code>deserialize_player_participation(\ndata: DictT,\n) -&gt; models.PlayerParticipation\n</code></pre> <p>Deserializes the data into a player participation model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.PlayerParticipation</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_player_participation(self, data: DictT) -&gt; models.PlayerParticipation:\n\"\"\"Deserializes the data into a player participation model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nplayer_participation = models.PlayerParticipation()\nplayer_participation.competition = self.deserialize_competition(data[\"competition\"])\nplayer_participation.data = self.deserialize_participation(data)\nreturn player_participation\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_record","title":"deserialize_record","text":"<pre><code>deserialize_record(data: DictT) -&gt; models.Record\n</code></pre> <p>Deserializes the data into a record model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.Record</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_record(self, data: DictT) -&gt; models.Record:\n\"\"\"Deserializes the data into a record model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nrecord = models.Record()\nrecord.period = enums.Period.from_str(data[\"period\"])\nrecord.metric = enums.Metric.from_str(data[\"metric\"])\nrecord.updated_at = self._dt_from_iso(data[\"updatedAt\"])\nself._set_attrs_cased(record, data, \"id\", \"player_id\", \"value\")\nreturn record\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_record_leaderboard_entry","title":"deserialize_record_leaderboard_entry","text":"<pre><code>deserialize_record_leaderboard_entry(\ndata: DictT,\n) -&gt; models.RecordLeaderboardEntry\n</code></pre> <p>Deserializes the data into a record leaderboard entry model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.RecordLeaderboardEntry</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_record_leaderboard_entry(self, data: DictT) -&gt; models.RecordLeaderboardEntry:\n\"\"\"Deserializes the data into a record leaderboard entry model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nrecord = models.RecordLeaderboardEntry()\nrecord.record = self.deserialize_record(data)\nrecord.player = self.deserialize_player(data[\"player\"])\nreturn record\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_skill","title":"deserialize_skill","text":"<pre><code>deserialize_skill(data: DictT) -&gt; models.Skill\n</code></pre> <p>Deserializes the data into a skill model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.Skill</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_skill(self, data: DictT) -&gt; models.Skill:\n\"\"\"Deserializes the data into a skill model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nskill = models.Skill()\nskill.metric = enums.Skills.from_str(data[\"metric\"])\nself._set_attrs(skill, data, \"ehp\", \"rank\", \"level\", \"experience\")\nreturn skill\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_skill_gains","title":"deserialize_skill_gains","text":"<pre><code>deserialize_skill_gains(data: DictT) -&gt; models.SkillGains\n</code></pre> <p>Deserializes the data into a skill gains model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.SkillGains</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_skill_gains(self, data: DictT) -&gt; models.SkillGains:\n\"\"\"Deserializes the data into a skill gains model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\ngains = models.SkillGains()\ngains.metric = enums.Skills.from_str(data[\"metric\"])\nself._set_attrs(\ngains, data, \"experience\", \"ehp\", \"rank\", \"level\", transform=self.deserialize_gains\n)\nreturn gains\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_skill_leader","title":"deserialize_skill_leader","text":"<pre><code>deserialize_skill_leader(data: DictT) -&gt; models.SkillLeader\n</code></pre> <p>Deserializes the data into a skill leader model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.SkillLeader</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_skill_leader(self, data: DictT) -&gt; models.SkillLeader:\n\"\"\"Deserializes the data into a skill leader model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nleader = models.SkillLeader()\nleader.metric = enums.Skills.from_str(data[\"metric\"])\nself._set_attrs(leader, data, \"experience\", \"rank\", \"level\")\nif player := data.get(\"player\", None):\nleader.player = self.deserialize_player(player)\nelse:\nleader.player = player\nreturn leader\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_snapshot","title":"deserialize_snapshot","text":"<pre><code>deserialize_snapshot(data: DictT) -&gt; models.Snapshot\n</code></pre> <p>Deserializes the data into a snapshot model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.Snapshot</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_snapshot(self, data: DictT) -&gt; models.Snapshot:\n\"\"\"Deserializes the data into a snapshot model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nsnapshot = models.Snapshot()\nsnapshot.created_at = self._dt_from_iso(data[\"createdAt\"])\nsnapshot.imported_at = self._dt_from_iso_maybe(data.get(\"importedAt\"))\nsnapshot.data = self.deserialize_snapshot_data(data[\"data\"])\nself._set_attrs_cased(snapshot, data, \"id\", \"player_id\")\nreturn snapshot\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_snapshot_data","title":"deserialize_snapshot_data","text":"<pre><code>deserialize_snapshot_data(\ndata: DictT,\n) -&gt; models.SnapshotData\n</code></pre> <p>Deserializes the data into a snapshot data model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.SnapshotData</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_snapshot_data(self, data: DictT) -&gt; models.SnapshotData:\n\"\"\"Deserializes the data into a snapshot data model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nmodel = models.SnapshotData()\nmodel.skills = self.__map(self.deserialize_skill, data[\"skills\"].values())\nmodel.bosses = self.__map(self.deserialize_boss, data[\"bosses\"].values())\nmodel.activities = self.__map(self.deserialize_activity, data[\"activities\"].values())\nmodel.computed = self.__map(self.deserialize_computed_metric, data[\"computed\"].values())\nreturn model\n</code></pre>"},{"location":"reference/serializer/#wom.serializer.Serializer.deserialize_top5_progress_result","title":"deserialize_top5_progress_result","text":"<pre><code>deserialize_top5_progress_result(\ndata: DictT,\n) -&gt; models.Top5ProgressResult\n</code></pre> <p>Deserializes the data into a top 5 progress result model.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>DictT</code> <p>The JSON payload.</p> required <p>Returns:</p> Type Description <code>models.Top5ProgressResult</code> <p>The requested model.</p> Source code in <code>wom/serializer.py</code> <pre><code>def deserialize_top5_progress_result(self, data: DictT) -&gt; models.Top5ProgressResult:\n\"\"\"Deserializes the data into a top 5 progress result model.\n    Args:\n        data: The JSON payload.\n    Returns:\n        The requested model.\n    \"\"\"\nprogress = models.Top5ProgressResult()\nprogress.player = self.deserialize_player(data[\"player\"])\nprogress.history = [\nself.deserialize_competition_history_data_point(h) for h in data[\"history\"]\n]\nreturn progress\n</code></pre>"},{"location":"reference/services/","title":"services","text":"<p>This module contains the services used to interact with different portions of the WOM API.</p>"},{"location":"reference/services/#wom.services.BaseService","title":"BaseService","text":"<p>         Bases: <code>abc.ABC</code></p> <p>The base service all API services inherit from.</p> <p>Parameters:</p> Name Type Description Default <code>http_service</code> <code>HttpService</code> <p>The http service to use for requests.</p> required <code>serializer</code> <code>serializer.Serializer</code> <p>The serializer to use for handling incoming JSON data from the API.</p> required Source code in <code>wom/services/base.py</code> <pre><code>class BaseService(abc.ABC):\n\"\"\"The base service all API services inherit from.\n    Args:\n        http_service: The http service to use for requests.\n        serializer: The serializer to use for handling incoming\n            JSON data from the API.\n    \"\"\"\n__slots__ = (\"_dict\", \"_list\", \"_http\", \"_serializer\")\ndef __init__(self, http_service: HttpService, serializer: serializer.Serializer) -&gt; None:\nself._http = http_service\nself._serializer = serializer\nself._dict = t.Dict[str, t.Any]\nself._list = t.List[t.Dict[str, t.Any]]\ndef _generate_map(self, **kwargs: t.Any) -&gt; t.Dict[str, t.Any]:\nreturn {k: v for k, v in kwargs.items() if v is not None}\n</code></pre>"},{"location":"reference/services/#wom.services.CompetitionService","title":"CompetitionService","text":"<p>         Bases: <code>BaseService</code></p> <p>Handles endpoints related to competitions.</p> Source code in <code>wom/services/competitions.py</code> <pre><code>class CompetitionService(BaseService):\n\"\"\"Handles endpoints related to competitions.\"\"\"\n__slots__ = ()\nasync def search_competitions(\nself,\n*,\ntitle: t.Optional[str] = None,\ntype: t.Optional[models.CompetitionType] = None,\nstatus: t.Optional[models.CompetitionStatus] = None,\nmetric: t.Optional[enums.Metric] = None,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.Competition]]:\n\"\"\"Searches for competitions with the given criteria.\n        Keyword Args:\n            title: The optional title of the competition. Defaults to\n                `None`.\n            type: The optional [`CompetitionType`][wom.CompetitionType]\n                filter. Defaults to `None`\n            status: The optional [`CompetitionStatus`]\n                [wom.CompetitionStatus] filter. Defaults to `None`.\n            metric: The optional [`Metric`][wom.Metric] filter. Defaults\n                to `None`.\n            limit: The maximum number of paginated items to receive.\n                Defaults to `None` (I think thats 20 items?).\n            offset: The page offset for requesting multiple pages.\n                Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the list of competitions\n                or an error.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.competitions.search_competitions(\n                title=\"Sick Competition\",\n                type=wom.CompetitionType.Classic,\n                status=wom.CompetitionStatus.Ongoing,\n                limit=3,\n                offset=1\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(\ntitle=title,\nlimit=limit,\noffset=offset,\ntype=type.value if type else None,\nstatus=status.value if status else None,\nmetric=metric.value if metric else None,\n)\nroute = routes.SEARCH_COMPETITIONS.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_competition(c) for c in data])\nasync def get_details(\nself, id: int, *, metric: t.Optional[enums.Metric] = None\n) -&gt; ResultT[models.CompetitionDetail]:\n\"\"\"Gets details for the given competition.\n        Args:\n            id: The ID of the competition.\n        Keyword Args:\n            metric: The optional [`Metric`][wom.Metric] to view the\n                competition progress in. As if this competition was\n                actually for that metric. Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the competition details.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.competitions.get_details(123)\n            result2 = await client.competitions.get_details(\n                123, wom.Skills.Attack\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(metric=metric.value if metric else None)\nroute = routes.COMPETITION_DETAILS.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_competition_details(data))\nasync def get_top_participant_history(\nself, id: int, *, metric: t.Optional[enums.Metric] = None\n) -&gt; ResultT[t.List[models.Top5ProgressResult]]:\n\"\"\"Gets details for the players with the top 5 progress in the\n        competition.\n        Args:\n            id: The ID of the competition.\n        Keyword Args:\n            metric: The optional [`Metric`][wom.Metric] to view the\n                competition progress in. As if this competition was\n                actually for that metric. Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the list of top 5\n                progress players.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            result = await client.competitions.get_competition_details(123)\n            result2 = await client.competitions.get_competition_details(\n                123, wom.Skills.Attack\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(metric=metric.value if metric else None)\nroute = routes.TOP_PARTICIPANT_HISTORY.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_top5_progress_result(r) for r in data])\nasync def create_competition(\nself,\ntitle: str,\nmetric: enums.Metric,\nstarts_at: datetime,\nends_at: datetime,\n*,\ngroup_id: t.Optional[int] = None,\ngroup_verification_code: t.Optional[str] = None,\nteams: t.Optional[t.List[models.Team]] = None,\nparticipants: t.Optional[t.List[str]] = None,\n) -&gt; ResultT[models.CompetitionWithParticipations]:\n\"\"\"Creates a new competition.\n        Args:\n            title: The title of the competition.\n            metric: The [`Metric`][wom.Metric] the competition should\n                measure.\n            starts_at: The start date for the competition.\n            ends_at: The end date for the competition.\n        Keyword Args:\n            group_id: The optional group id to tie to this competition.\n                Defaults to `None`.\n            group_verification_code: The optional group verification\n                code. Required if group_id is supplied. Defaults to\n                `None`.\n            participants: The optional list of participants to include\n                in the competition. Defaults to `None`.\n            teams: The optional teams to include in the competition.\n                Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the newly created\n                competition with participations.\n        !!! info\n            The `group_id`, `participants`, and `teams` parameters are\n            mutually exclusive.\n            - If `group_id` is provided, this method will create a\n                classic competition with all members of that group as\n                participants.\n            - If `participants` is provided and `group_id` isn't, this\n                method will create a classic competition with all those\n                participants included.\n            - If `teams` is provided, this endpoint will create a team\n                competition with all those participants included.\n                Also accepts `group_id` as a way to link this\n                competition to the group.\n        ??? example\n            ```py\n            from datetime import datetime, timedelta\n            import wom\n            client = wom.Client(...)\n            result = await client.competitions.create_competition(\n                \"Slayer weekend\",\n                wom.Skills.Slayer,\n                starts_at: datetime.now() + timedelta(days=7),\n                ends_at: datetime.now() + timedelta(days=14),\n                group_verification_code: \"111-111-111\",\n                group_id: 123,\n            )\n            ```\n        \"\"\"\npayload = self._generate_map(\ntitle=title,\nteams=teams,\ngroupId=group_id,\nparticipants=participants,\nendsAt=ends_at.isoformat(),\nstartsAt=starts_at.isoformat(),\nmetric=metric.value if metric else None,\ngroupVerificationCode=group_verification_code,\n)\nroute = routes.CREATE_COMPETITION.compile()\ndata = await self._http.fetch(route, self._dict, payload=payload)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\ncompetition = self._serializer.deserialize_competition_with_participation(\ndata[\"competition\"]\n)\ncompetition.verification_code = data[\"verificationCode\"]\nreturn result.Ok(competition)\nasync def edit_competition(\nself,\nid: int,\nverification_code: str,\n*,\ntitle: t.Optional[str] = None,\nmetric: t.Optional[enums.Metric] = None,\nstarts_at: t.Optional[datetime] = None,\nends_at: t.Optional[datetime] = None,\nteams: t.Optional[t.List[models.Team]] = None,\nparticipants: t.Optional[t.List[str]] = None,\n) -&gt; ResultT[models.CompetitionWithParticipations]:\n\"\"\"Edits an existing competition.\n        Args:\n            id: The ID of the competition.\n            verification_code: The verification code for the\n                competition.\n        Keyword Args:\n            title: The optional updated title of the competition.\n                Defaults to `None`.\n            metric: The optional new [`Metric`][wom.Metric] the\n                competition should measure. Defaults to `None`.\n            starts_at: The optional new start date for the competition.\n                Defaults to `None`.\n            ends_at: The optional new end date for the competition.\n                Defaults to `None`.\n            participants: The optional list of participants to replace\n                the existing participants with. Defaults to `None`.\n            teams: The optional list of teams to replace the existing\n                participants with. Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the edited competition\n                with participations.\n        !!! warning\n            The teams/participants parameters will completely\n            overwrite the existing participants/teams. If you're looking\n            to add users, check out [`add_participants()`]\n            [wom.CompetitionService.add_participants].\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.competitions.edit_competition(\n                123, \"111-111-111\", title=\"New title\"\n            )\n            ```\n        \"\"\"\npayload = self._generate_map(\ntitle=title,\nteams=teams,\nparticipants=participants,\nstartsAt=starts_at.isoformat() if starts_at else None,\nendsAt=ends_at.isoformat() if ends_at else None,\nmetric=metric.value if metric else None,\nverificationCode=verification_code,\n)\nroute = routes.EDIT_COMPETITION.compile(id)\ndata = await self._http.fetch(route, self._dict, payload=payload)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_competition_with_participation(data))\nasync def delete_competition(\nself, id: int, verification_code: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Deletes a competition.\n        Args:\n            id: The ID of the competition.\n            verification_code: The verification code for the\n                competition.\n        Returns:\n            A [`Result`][wom.Result] containing the success response\n                message.\n        !!! warning\n            This action can not be reversed.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.competitions.delete_competition(\n                123, \"111-111-111\"\n            )\n            ```\n        \"\"\"\npayload = self._generate_map(verificationCode=verification_code)\nroute = routes.DELETE_COMPETITION.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\nasync def add_participants(\nself, id: int, verification_code: str, *participants: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Adds participants to a competition. Only adds valid\n        participants, and ignores duplicates.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.competitions.add_participants(\n                123, \"111-111-111\", \"Jonxslays\", \"Zezima\"\n            )\n            ```\n        Args:\n            id: The ID of the competition.\n            verification_code: The verification code for the\n                competition.\n            *participants: The participants you would like to add.\n        Returns:\n            A [`Result`][wom.Result] containing the success response\n                message.\n        \"\"\"\npayload = self._generate_map(verificationCode=verification_code, participants=participants)\nroute = routes.ADD_PARTICIPANTS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\nasync def remove_participants(\nself, id: int, verification_code: str, *participants: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Removes participants from a competition. Ignores usernames\n        that are not competing.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.competitions.remove_participants(\n                123, \"111-111-111\", \"Jonxslays\"\n            )\n            ```\n        Args:\n            id: The ID of the competition.\n            verification_code: The verification code for the\n                competition.\n            *participants: The participants you would like to remove.\n        Returns:\n            A [`Result`][wom.Result] containing the success response\n                message.\n        \"\"\"\npayload = self._generate_map(verificationCode=verification_code, participants=participants)\nroute = routes.REMOVE_PARTICIPANTS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\nasync def add_teams(\nself, id: int, verification_code: str, *teams: models.Team\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Adds teams to a competition. Ignores duplicates.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.competitions.add_teams(\n                123,\n                \"111-111-111\",\n                wom.Team(\"Team 1\", [\"Jonxslays\", \"Zezima\"]),\n                wom.Team(\"Team 2\", [\"lilyuffie88\", \"the old nite\"]),\n            )\n            ```\n        Args:\n            id: The ID of the competition.\n            verification_code: The verification code for the\n                competition.\n            *teams: The teams you would like to add.\n        Returns:\n            A [`Result`][wom.Result] containing the success response\n                message.\n        \"\"\"\npayload = self._generate_map(\nverificationCode=verification_code, teams=[t.to_dict() for t in teams]\n)\nroute = routes.ADD_TEAMS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\nasync def remove_teams(\nself, id: int, verification_code: str, *teams: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Removes teams from a competition. Ignores teams that don't\n        exist.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.competitions.remove_teams(\n                123, \"111-111-111\", \"Team 1\", \"Team 2\"\n            )\n            ```\n        Args:\n            id: The ID of the competition.\n            verification_code: The verification code for the\n                competition.\n            *teams: The team names you would like to remove.\n        Returns:\n            A [`Result`][wom.Result] containing the success response\n                message.\n        \"\"\"\npayload = self._generate_map(verificationCode=verification_code, teamNames=teams)\nroute = routes.REMOVE_TEAMS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\nasync def update_outdated_participants(\nself, id: int, verification_code: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Attempts to update all outdated competition participants.\n        !!! info\n            Participants are outdated when either:\n            - Competition is ending or started within 6h of now and\n                the player hasn't been updated in over 1h.\n            - Player hasn't been updated in over 24h.\n        !!! warning\n            This method adds every outdated participant to an\n            \"update queue\", and the WOM servers try to update players\n            in the queue one by one, with a delay in between each. For\n            each player in the queue, an attempt is made to update it\n            up to 3 times, with 30s in between each attempt.\n            Please note that this is dependent on the OSRS hiscores\n            functioning correctly, and therefore this method does NOT\n            guarantee the players will be updated, it only guarantees\n            that an attempt will be made to update them, up to 3 times.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.competitions.update_outdated_participants(\n                123, \"111-111-111\"\n            )\n            ```\n        Args:\n            id: The ID of the competition.\n            verification_code: The verification code for the\n                competition.\n        Returns:\n            A [`Result`][wom.Result] containing the success response\n                message.\n        \"\"\"\npayload = self._generate_map(verificationCode=verification_code)\nroute = routes.UPDATE_OUTDATED_PARTICIPANTS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif \"players are being updated\" in data.message:\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\nreturn result.Err(data)\n</code></pre>"},{"location":"reference/services/#wom.services.competitions.CompetitionService.add_participants","title":"add_participants  <code>async</code>","text":"<pre><code>add_participants(\nid: int, verification_code: str, *participants: str\n) -&gt; ResultT[models.HttpSuccessResponse]\n</code></pre> <p>Adds participants to a competition. Only adds valid participants, and ignores duplicates.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.competitions.add_participants(\n123, \"111-111-111\", \"Jonxslays\", \"Zezima\"\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the competition.</p> required <code>verification_code</code> <code>str</code> <p>The verification code for the competition.</p> required <code>*participants</code> <code>str</code> <p>The participants you would like to add.</p> <code>()</code> <p>Returns:</p> Type Description <code>ResultT[models.HttpSuccessResponse]</code> <p>A <code>Result</code> containing the success response message.</p> Source code in <code>wom/services/competitions.py</code> <pre><code>async def add_participants(\nself, id: int, verification_code: str, *participants: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Adds participants to a competition. Only adds valid\n    participants, and ignores duplicates.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.competitions.add_participants(\n            123, \"111-111-111\", \"Jonxslays\", \"Zezima\"\n        )\n        ```\n    Args:\n        id: The ID of the competition.\n        verification_code: The verification code for the\n            competition.\n        *participants: The participants you would like to add.\n    Returns:\n        A [`Result`][wom.Result] containing the success response\n            message.\n    \"\"\"\npayload = self._generate_map(verificationCode=verification_code, participants=participants)\nroute = routes.ADD_PARTICIPANTS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\n</code></pre>"},{"location":"reference/services/#wom.services.competitions.CompetitionService.add_teams","title":"add_teams  <code>async</code>","text":"<pre><code>add_teams(\nid: int, verification_code: str, *teams: models.Team\n) -&gt; ResultT[models.HttpSuccessResponse]\n</code></pre> <p>Adds teams to a competition. Ignores duplicates.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.competitions.add_teams(\n123,\n\"111-111-111\",\nwom.Team(\"Team 1\", [\"Jonxslays\", \"Zezima\"]),\nwom.Team(\"Team 2\", [\"lilyuffie88\", \"the old nite\"]),\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the competition.</p> required <code>verification_code</code> <code>str</code> <p>The verification code for the competition.</p> required <code>*teams</code> <code>models.Team</code> <p>The teams you would like to add.</p> <code>()</code> <p>Returns:</p> Type Description <code>ResultT[models.HttpSuccessResponse]</code> <p>A <code>Result</code> containing the success response message.</p> Source code in <code>wom/services/competitions.py</code> <pre><code>async def add_teams(\nself, id: int, verification_code: str, *teams: models.Team\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Adds teams to a competition. Ignores duplicates.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.competitions.add_teams(\n            123,\n            \"111-111-111\",\n            wom.Team(\"Team 1\", [\"Jonxslays\", \"Zezima\"]),\n            wom.Team(\"Team 2\", [\"lilyuffie88\", \"the old nite\"]),\n        )\n        ```\n    Args:\n        id: The ID of the competition.\n        verification_code: The verification code for the\n            competition.\n        *teams: The teams you would like to add.\n    Returns:\n        A [`Result`][wom.Result] containing the success response\n            message.\n    \"\"\"\npayload = self._generate_map(\nverificationCode=verification_code, teams=[t.to_dict() for t in teams]\n)\nroute = routes.ADD_TEAMS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\n</code></pre>"},{"location":"reference/services/#wom.services.competitions.CompetitionService.create_competition","title":"create_competition  <code>async</code>","text":"<pre><code>create_competition(\ntitle: str,\nmetric: enums.Metric,\nstarts_at: datetime,\nends_at: datetime,\n*,\ngroup_id: t.Optional[int] = None,\ngroup_verification_code: t.Optional[str] = None,\nteams: t.Optional[t.List[models.Team]] = None,\nparticipants: t.Optional[t.List[str]] = None\n) -&gt; ResultT[models.CompetitionWithParticipations]\n</code></pre> <p>Creates a new competition.</p> <p>Parameters:</p> Name Type Description Default <code>title</code> <code>str</code> <p>The title of the competition.</p> required <code>metric</code> <code>enums.Metric</code> <p>The <code>Metric</code> the competition should measure.</p> required <code>starts_at</code> <code>datetime</code> <p>The start date for the competition.</p> required <code>ends_at</code> <code>datetime</code> <p>The end date for the competition.</p> required <p>Other Parameters:</p> Name Type Description <code>group_id</code> <code>t.Optional[int]</code> <p>The optional group id to tie to this competition. Defaults to <code>None</code>.</p> <code>group_verification_code</code> <code>t.Optional[str]</code> <p>The optional group verification code. Required if group_id is supplied. Defaults to <code>None</code>.</p> <code>participants</code> <code>t.Optional[t.List[str]]</code> <p>The optional list of participants to include in the competition. Defaults to <code>None</code>.</p> <code>teams</code> <code>t.Optional[t.List[models.Team]]</code> <p>The optional teams to include in the competition. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[models.CompetitionWithParticipations]</code> <p>A <code>Result</code> containing the newly created competition with participations.</p> <p>Info</p> <p>The <code>group_id</code>, <code>participants</code>, and <code>teams</code> parameters are mutually exclusive.</p> <ul> <li> <p>If <code>group_id</code> is provided, this method will create a     classic competition with all members of that group as     participants.</p> </li> <li> <p>If <code>participants</code> is provided and <code>group_id</code> isn't, this     method will create a classic competition with all those     participants included.</p> </li> <li> <p>If <code>teams</code> is provided, this endpoint will create a team     competition with all those participants included.     Also accepts <code>group_id</code> as a way to link this     competition to the group.</p> </li> </ul> Example <pre><code>from datetime import datetime, timedelta\nimport wom\nclient = wom.Client(...)\nresult = await client.competitions.create_competition(\n\"Slayer weekend\",\nwom.Skills.Slayer,\nstarts_at: datetime.now() + timedelta(days=7),\nends_at: datetime.now() + timedelta(days=14),\ngroup_verification_code: \"111-111-111\",\ngroup_id: 123,\n)\n</code></pre> Source code in <code>wom/services/competitions.py</code> <pre><code>async def create_competition(\nself,\ntitle: str,\nmetric: enums.Metric,\nstarts_at: datetime,\nends_at: datetime,\n*,\ngroup_id: t.Optional[int] = None,\ngroup_verification_code: t.Optional[str] = None,\nteams: t.Optional[t.List[models.Team]] = None,\nparticipants: t.Optional[t.List[str]] = None,\n) -&gt; ResultT[models.CompetitionWithParticipations]:\n\"\"\"Creates a new competition.\n    Args:\n        title: The title of the competition.\n        metric: The [`Metric`][wom.Metric] the competition should\n            measure.\n        starts_at: The start date for the competition.\n        ends_at: The end date for the competition.\n    Keyword Args:\n        group_id: The optional group id to tie to this competition.\n            Defaults to `None`.\n        group_verification_code: The optional group verification\n            code. Required if group_id is supplied. Defaults to\n            `None`.\n        participants: The optional list of participants to include\n            in the competition. Defaults to `None`.\n        teams: The optional teams to include in the competition.\n            Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the newly created\n            competition with participations.\n    !!! info\n        The `group_id`, `participants`, and `teams` parameters are\n        mutually exclusive.\n        - If `group_id` is provided, this method will create a\n            classic competition with all members of that group as\n            participants.\n        - If `participants` is provided and `group_id` isn't, this\n            method will create a classic competition with all those\n            participants included.\n        - If `teams` is provided, this endpoint will create a team\n            competition with all those participants included.\n            Also accepts `group_id` as a way to link this\n            competition to the group.\n    ??? example\n        ```py\n        from datetime import datetime, timedelta\n        import wom\n        client = wom.Client(...)\n        result = await client.competitions.create_competition(\n            \"Slayer weekend\",\n            wom.Skills.Slayer,\n            starts_at: datetime.now() + timedelta(days=7),\n            ends_at: datetime.now() + timedelta(days=14),\n            group_verification_code: \"111-111-111\",\n            group_id: 123,\n        )\n        ```\n    \"\"\"\npayload = self._generate_map(\ntitle=title,\nteams=teams,\ngroupId=group_id,\nparticipants=participants,\nendsAt=ends_at.isoformat(),\nstartsAt=starts_at.isoformat(),\nmetric=metric.value if metric else None,\ngroupVerificationCode=group_verification_code,\n)\nroute = routes.CREATE_COMPETITION.compile()\ndata = await self._http.fetch(route, self._dict, payload=payload)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\ncompetition = self._serializer.deserialize_competition_with_participation(\ndata[\"competition\"]\n)\ncompetition.verification_code = data[\"verificationCode\"]\nreturn result.Ok(competition)\n</code></pre>"},{"location":"reference/services/#wom.services.competitions.CompetitionService.delete_competition","title":"delete_competition  <code>async</code>","text":"<pre><code>delete_competition(\nid: int, verification_code: str\n) -&gt; ResultT[models.HttpSuccessResponse]\n</code></pre> <p>Deletes a competition.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the competition.</p> required <code>verification_code</code> <code>str</code> <p>The verification code for the competition.</p> required <p>Returns:</p> Type Description <code>ResultT[models.HttpSuccessResponse]</code> <p>A <code>Result</code> containing the success response message.</p> <p>Warning</p> <p>This action can not be reversed.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.competitions.delete_competition(\n123, \"111-111-111\"\n)\n</code></pre> Source code in <code>wom/services/competitions.py</code> <pre><code>async def delete_competition(\nself, id: int, verification_code: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Deletes a competition.\n    Args:\n        id: The ID of the competition.\n        verification_code: The verification code for the\n            competition.\n    Returns:\n        A [`Result`][wom.Result] containing the success response\n            message.\n    !!! warning\n        This action can not be reversed.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.competitions.delete_competition(\n            123, \"111-111-111\"\n        )\n        ```\n    \"\"\"\npayload = self._generate_map(verificationCode=verification_code)\nroute = routes.DELETE_COMPETITION.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\n</code></pre>"},{"location":"reference/services/#wom.services.competitions.CompetitionService.edit_competition","title":"edit_competition  <code>async</code>","text":"<pre><code>edit_competition(\nid: int,\nverification_code: str,\n*,\ntitle: t.Optional[str] = None,\nmetric: t.Optional[enums.Metric] = None,\nstarts_at: t.Optional[datetime] = None,\nends_at: t.Optional[datetime] = None,\nteams: t.Optional[t.List[models.Team]] = None,\nparticipants: t.Optional[t.List[str]] = None\n) -&gt; ResultT[models.CompetitionWithParticipations]\n</code></pre> <p>Edits an existing competition.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the competition.</p> required <code>verification_code</code> <code>str</code> <p>The verification code for the competition.</p> required <p>Other Parameters:</p> Name Type Description <code>title</code> <code>t.Optional[str]</code> <p>The optional updated title of the competition. Defaults to <code>None</code>.</p> <code>metric</code> <code>t.Optional[enums.Metric]</code> <p>The optional new <code>Metric</code> the competition should measure. Defaults to <code>None</code>.</p> <code>starts_at</code> <code>t.Optional[datetime]</code> <p>The optional new start date for the competition. Defaults to <code>None</code>.</p> <code>ends_at</code> <code>t.Optional[datetime]</code> <p>The optional new end date for the competition. Defaults to <code>None</code>.</p> <code>participants</code> <code>t.Optional[t.List[str]]</code> <p>The optional list of participants to replace the existing participants with. Defaults to <code>None</code>.</p> <code>teams</code> <code>t.Optional[t.List[models.Team]]</code> <p>The optional list of teams to replace the existing participants with. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[models.CompetitionWithParticipations]</code> <p>A <code>Result</code> containing the edited competition with participations.</p> <p>Warning</p> <p>The teams/participants parameters will completely overwrite the existing participants/teams. If you're looking to add users, check out <code>add_participants()</code>.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.competitions.edit_competition(\n123, \"111-111-111\", title=\"New title\"\n)\n</code></pre> Source code in <code>wom/services/competitions.py</code> <pre><code>async def edit_competition(\nself,\nid: int,\nverification_code: str,\n*,\ntitle: t.Optional[str] = None,\nmetric: t.Optional[enums.Metric] = None,\nstarts_at: t.Optional[datetime] = None,\nends_at: t.Optional[datetime] = None,\nteams: t.Optional[t.List[models.Team]] = None,\nparticipants: t.Optional[t.List[str]] = None,\n) -&gt; ResultT[models.CompetitionWithParticipations]:\n\"\"\"Edits an existing competition.\n    Args:\n        id: The ID of the competition.\n        verification_code: The verification code for the\n            competition.\n    Keyword Args:\n        title: The optional updated title of the competition.\n            Defaults to `None`.\n        metric: The optional new [`Metric`][wom.Metric] the\n            competition should measure. Defaults to `None`.\n        starts_at: The optional new start date for the competition.\n            Defaults to `None`.\n        ends_at: The optional new end date for the competition.\n            Defaults to `None`.\n        participants: The optional list of participants to replace\n            the existing participants with. Defaults to `None`.\n        teams: The optional list of teams to replace the existing\n            participants with. Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the edited competition\n            with participations.\n    !!! warning\n        The teams/participants parameters will completely\n        overwrite the existing participants/teams. If you're looking\n        to add users, check out [`add_participants()`]\n        [wom.CompetitionService.add_participants].\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.competitions.edit_competition(\n            123, \"111-111-111\", title=\"New title\"\n        )\n        ```\n    \"\"\"\npayload = self._generate_map(\ntitle=title,\nteams=teams,\nparticipants=participants,\nstartsAt=starts_at.isoformat() if starts_at else None,\nendsAt=ends_at.isoformat() if ends_at else None,\nmetric=metric.value if metric else None,\nverificationCode=verification_code,\n)\nroute = routes.EDIT_COMPETITION.compile(id)\ndata = await self._http.fetch(route, self._dict, payload=payload)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_competition_with_participation(data))\n</code></pre>"},{"location":"reference/services/#wom.services.competitions.CompetitionService.get_details","title":"get_details  <code>async</code>","text":"<pre><code>get_details(\nid: int, *, metric: t.Optional[enums.Metric] = None\n) -&gt; ResultT[models.CompetitionDetail]\n</code></pre> <p>Gets details for the given competition.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the competition.</p> required <p>Other Parameters:</p> Name Type Description <code>metric</code> <code>t.Optional[enums.Metric]</code> <p>The optional <code>Metric</code> to view the competition progress in. As if this competition was actually for that metric. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[models.CompetitionDetail]</code> <p>A <code>Result</code> containing the competition details.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.competitions.get_details(123)\nresult2 = await client.competitions.get_details(\n123, wom.Skills.Attack\n)\n</code></pre> Source code in <code>wom/services/competitions.py</code> <pre><code>async def get_details(\nself, id: int, *, metric: t.Optional[enums.Metric] = None\n) -&gt; ResultT[models.CompetitionDetail]:\n\"\"\"Gets details for the given competition.\n    Args:\n        id: The ID of the competition.\n    Keyword Args:\n        metric: The optional [`Metric`][wom.Metric] to view the\n            competition progress in. As if this competition was\n            actually for that metric. Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the competition details.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.competitions.get_details(123)\n        result2 = await client.competitions.get_details(\n            123, wom.Skills.Attack\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(metric=metric.value if metric else None)\nroute = routes.COMPETITION_DETAILS.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_competition_details(data))\n</code></pre>"},{"location":"reference/services/#wom.services.competitions.CompetitionService.get_top_participant_history","title":"get_top_participant_history  <code>async</code>","text":"<pre><code>get_top_participant_history(\nid: int, *, metric: t.Optional[enums.Metric] = None\n) -&gt; ResultT[t.List[models.Top5ProgressResult]]\n</code></pre> <p>Gets details for the players with the top 5 progress in the competition.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the competition.</p> required <p>Other Parameters:</p> Name Type Description <code>metric</code> <code>t.Optional[enums.Metric]</code> <p>The optional <code>Metric</code> to view the competition progress in. As if this competition was actually for that metric. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.Top5ProgressResult]]</code> <p>A <code>Result</code> containing the list of top 5 progress players.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nresult = await client.competitions.get_competition_details(123)\nresult2 = await client.competitions.get_competition_details(\n123, wom.Skills.Attack\n)\n</code></pre> Source code in <code>wom/services/competitions.py</code> <pre><code>async def get_top_participant_history(\nself, id: int, *, metric: t.Optional[enums.Metric] = None\n) -&gt; ResultT[t.List[models.Top5ProgressResult]]:\n\"\"\"Gets details for the players with the top 5 progress in the\n    competition.\n    Args:\n        id: The ID of the competition.\n    Keyword Args:\n        metric: The optional [`Metric`][wom.Metric] to view the\n            competition progress in. As if this competition was\n            actually for that metric. Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the list of top 5\n            progress players.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        result = await client.competitions.get_competition_details(123)\n        result2 = await client.competitions.get_competition_details(\n            123, wom.Skills.Attack\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(metric=metric.value if metric else None)\nroute = routes.TOP_PARTICIPANT_HISTORY.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_top5_progress_result(r) for r in data])\n</code></pre>"},{"location":"reference/services/#wom.services.competitions.CompetitionService.remove_participants","title":"remove_participants  <code>async</code>","text":"<pre><code>remove_participants(\nid: int, verification_code: str, *participants: str\n) -&gt; ResultT[models.HttpSuccessResponse]\n</code></pre> <p>Removes participants from a competition. Ignores usernames that are not competing.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.competitions.remove_participants(\n123, \"111-111-111\", \"Jonxslays\"\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the competition.</p> required <code>verification_code</code> <code>str</code> <p>The verification code for the competition.</p> required <code>*participants</code> <code>str</code> <p>The participants you would like to remove.</p> <code>()</code> <p>Returns:</p> Type Description <code>ResultT[models.HttpSuccessResponse]</code> <p>A <code>Result</code> containing the success response message.</p> Source code in <code>wom/services/competitions.py</code> <pre><code>async def remove_participants(\nself, id: int, verification_code: str, *participants: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Removes participants from a competition. Ignores usernames\n    that are not competing.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.competitions.remove_participants(\n            123, \"111-111-111\", \"Jonxslays\"\n        )\n        ```\n    Args:\n        id: The ID of the competition.\n        verification_code: The verification code for the\n            competition.\n        *participants: The participants you would like to remove.\n    Returns:\n        A [`Result`][wom.Result] containing the success response\n            message.\n    \"\"\"\npayload = self._generate_map(verificationCode=verification_code, participants=participants)\nroute = routes.REMOVE_PARTICIPANTS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\n</code></pre>"},{"location":"reference/services/#wom.services.competitions.CompetitionService.remove_teams","title":"remove_teams  <code>async</code>","text":"<pre><code>remove_teams(\nid: int, verification_code: str, *teams: str\n) -&gt; ResultT[models.HttpSuccessResponse]\n</code></pre> <p>Removes teams from a competition. Ignores teams that don't exist.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.competitions.remove_teams(\n123, \"111-111-111\", \"Team 1\", \"Team 2\"\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the competition.</p> required <code>verification_code</code> <code>str</code> <p>The verification code for the competition.</p> required <code>*teams</code> <code>str</code> <p>The team names you would like to remove.</p> <code>()</code> <p>Returns:</p> Type Description <code>ResultT[models.HttpSuccessResponse]</code> <p>A <code>Result</code> containing the success response message.</p> Source code in <code>wom/services/competitions.py</code> <pre><code>async def remove_teams(\nself, id: int, verification_code: str, *teams: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Removes teams from a competition. Ignores teams that don't\n    exist.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.competitions.remove_teams(\n            123, \"111-111-111\", \"Team 1\", \"Team 2\"\n        )\n        ```\n    Args:\n        id: The ID of the competition.\n        verification_code: The verification code for the\n            competition.\n        *teams: The team names you would like to remove.\n    Returns:\n        A [`Result`][wom.Result] containing the success response\n            message.\n    \"\"\"\npayload = self._generate_map(verificationCode=verification_code, teamNames=teams)\nroute = routes.REMOVE_TEAMS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\n</code></pre>"},{"location":"reference/services/#wom.services.competitions.CompetitionService.search_competitions","title":"search_competitions  <code>async</code>","text":"<pre><code>search_competitions(\n*,\ntitle: t.Optional[str] = None,\ntype: t.Optional[models.CompetitionType] = None,\nstatus: t.Optional[models.CompetitionStatus] = None,\nmetric: t.Optional[enums.Metric] = None,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.Competition]]\n</code></pre> <p>Searches for competitions with the given criteria.</p> <p>Other Parameters:</p> Name Type Description <code>title</code> <code>t.Optional[str]</code> <p>The optional title of the competition. Defaults to <code>None</code>.</p> <code>type</code> <code>t.Optional[models.CompetitionType]</code> <p>The optional <code>CompetitionType</code> filter. Defaults to <code>None</code></p> <code>status</code> <code>t.Optional[models.CompetitionStatus]</code> <p>The optional <code>CompetitionStatus</code> filter. Defaults to <code>None</code>.</p> <code>metric</code> <code>t.Optional[enums.Metric]</code> <p>The optional <code>Metric</code> filter. Defaults to <code>None</code>.</p> <code>limit</code> <code>t.Optional[int]</code> <p>The maximum number of paginated items to receive. Defaults to <code>None</code> (I think thats 20 items?).</p> <code>offset</code> <code>t.Optional[int]</code> <p>The page offset for requesting multiple pages. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.Competition]]</code> <p>A <code>Result</code> containing the list of competitions or an error.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.competitions.search_competitions(\ntitle=\"Sick Competition\",\ntype=wom.CompetitionType.Classic,\nstatus=wom.CompetitionStatus.Ongoing,\nlimit=3,\noffset=1\n)\n</code></pre> Source code in <code>wom/services/competitions.py</code> <pre><code>async def search_competitions(\nself,\n*,\ntitle: t.Optional[str] = None,\ntype: t.Optional[models.CompetitionType] = None,\nstatus: t.Optional[models.CompetitionStatus] = None,\nmetric: t.Optional[enums.Metric] = None,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.Competition]]:\n\"\"\"Searches for competitions with the given criteria.\n    Keyword Args:\n        title: The optional title of the competition. Defaults to\n            `None`.\n        type: The optional [`CompetitionType`][wom.CompetitionType]\n            filter. Defaults to `None`\n        status: The optional [`CompetitionStatus`]\n            [wom.CompetitionStatus] filter. Defaults to `None`.\n        metric: The optional [`Metric`][wom.Metric] filter. Defaults\n            to `None`.\n        limit: The maximum number of paginated items to receive.\n            Defaults to `None` (I think thats 20 items?).\n        offset: The page offset for requesting multiple pages.\n            Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the list of competitions\n            or an error.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.competitions.search_competitions(\n            title=\"Sick Competition\",\n            type=wom.CompetitionType.Classic,\n            status=wom.CompetitionStatus.Ongoing,\n            limit=3,\n            offset=1\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(\ntitle=title,\nlimit=limit,\noffset=offset,\ntype=type.value if type else None,\nstatus=status.value if status else None,\nmetric=metric.value if metric else None,\n)\nroute = routes.SEARCH_COMPETITIONS.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_competition(c) for c in data])\n</code></pre>"},{"location":"reference/services/#wom.services.competitions.CompetitionService.update_outdated_participants","title":"update_outdated_participants  <code>async</code>","text":"<pre><code>update_outdated_participants(\nid: int, verification_code: str\n) -&gt; ResultT[models.HttpSuccessResponse]\n</code></pre> <p>Attempts to update all outdated competition participants.</p> <p>Info</p> <p>Participants are outdated when either:</p> <ul> <li> <p>Competition is ending or started within 6h of now and     the player hasn't been updated in over 1h.</p> </li> <li> <p>Player hasn't been updated in over 24h.</p> </li> </ul> <p>Warning</p> <p>This method adds every outdated participant to an \"update queue\", and the WOM servers try to update players in the queue one by one, with a delay in between each. For each player in the queue, an attempt is made to update it up to 3 times, with 30s in between each attempt.</p> <p>Please note that this is dependent on the OSRS hiscores functioning correctly, and therefore this method does NOT guarantee the players will be updated, it only guarantees that an attempt will be made to update them, up to 3 times.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.competitions.update_outdated_participants(\n123, \"111-111-111\"\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the competition.</p> required <code>verification_code</code> <code>str</code> <p>The verification code for the competition.</p> required <p>Returns:</p> Type Description <code>ResultT[models.HttpSuccessResponse]</code> <p>A <code>Result</code> containing the success response message.</p> Source code in <code>wom/services/competitions.py</code> <pre><code>async def update_outdated_participants(\nself, id: int, verification_code: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Attempts to update all outdated competition participants.\n    !!! info\n        Participants are outdated when either:\n        - Competition is ending or started within 6h of now and\n            the player hasn't been updated in over 1h.\n        - Player hasn't been updated in over 24h.\n    !!! warning\n        This method adds every outdated participant to an\n        \"update queue\", and the WOM servers try to update players\n        in the queue one by one, with a delay in between each. For\n        each player in the queue, an attempt is made to update it\n        up to 3 times, with 30s in between each attempt.\n        Please note that this is dependent on the OSRS hiscores\n        functioning correctly, and therefore this method does NOT\n        guarantee the players will be updated, it only guarantees\n        that an attempt will be made to update them, up to 3 times.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.competitions.update_outdated_participants(\n            123, \"111-111-111\"\n        )\n        ```\n    Args:\n        id: The ID of the competition.\n        verification_code: The verification code for the\n            competition.\n    Returns:\n        A [`Result`][wom.Result] containing the success response\n            message.\n    \"\"\"\npayload = self._generate_map(verificationCode=verification_code)\nroute = routes.UPDATE_OUTDATED_PARTICIPANTS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif \"players are being updated\" in data.message:\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\nreturn result.Err(data)\n</code></pre>"},{"location":"reference/services/#wom.services.DeltaService","title":"DeltaService","text":"<p>         Bases: <code>BaseService</code></p> <p>Handles endpoints related to deltas.</p> Source code in <code>wom/services/deltas.py</code> <pre><code>class DeltaService(BaseService):\n\"\"\"Handles endpoints related to deltas.\"\"\"\n__slots__ = ()\nasync def get_global_leaderboards(\nself,\nmetric: enums.Metric,\nperiod: enums.Period,\n*,\nplayer_type: t.Optional[models.PlayerType] = None,\nplayer_build: t.Optional[models.PlayerBuild] = None,\ncountry: t.Optional[models.Country] = None,\n) -&gt; ResultT[t.List[models.DeltaLeaderboardEntry]]:\n\"\"\"Gets the top global delta leaderboard for a specific\n        metric and period.\n        Args:\n            metric: The metric to filter on.\n            period: The period of time to filter on.\n        Keyword Args:\n            player_type: The optional player type to filter on. Defaults\n                to `None`.\n            player_build: The optional player build to filter on.\n                Defaults to `None`.\n            country: The optional country to filter on. Defaults to\n                `None`.\n        Returns:\n            A [`Result`][wom.Result] containing a list of  delta\n                leaderboard entries.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.deltas.get_global_leaderboards(\n                wom.Skills.Attack,\n                wom.Period.Day,\n                country=wom.Country.Gb,\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(\nmetric=metric.value,\nperiod=period.value,\nplayerType=player_type.value if player_type else None,\nplayerBuild=player_build.value if player_build else None,\ncountry=country.value if country else None,\n)\nroute = routes.GLOBAL_DELTA_LEADERS.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_delta_leaderboard_entry(d) for d in data])\n</code></pre>"},{"location":"reference/services/#wom.services.deltas.DeltaService.get_global_leaderboards","title":"get_global_leaderboards  <code>async</code>","text":"<pre><code>get_global_leaderboards(\nmetric: enums.Metric,\nperiod: enums.Period,\n*,\nplayer_type: t.Optional[models.PlayerType] = None,\nplayer_build: t.Optional[models.PlayerBuild] = None,\ncountry: t.Optional[models.Country] = None\n) -&gt; ResultT[t.List[models.DeltaLeaderboardEntry]]\n</code></pre> <p>Gets the top global delta leaderboard for a specific metric and period.</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>enums.Metric</code> <p>The metric to filter on.</p> required <code>period</code> <code>enums.Period</code> <p>The period of time to filter on.</p> required <p>Other Parameters:</p> Name Type Description <code>player_type</code> <code>t.Optional[models.PlayerType]</code> <p>The optional player type to filter on. Defaults to <code>None</code>.</p> <code>player_build</code> <code>t.Optional[models.PlayerBuild]</code> <p>The optional player build to filter on. Defaults to <code>None</code>.</p> <code>country</code> <code>t.Optional[models.Country]</code> <p>The optional country to filter on. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.DeltaLeaderboardEntry]]</code> <p>A <code>Result</code> containing a list of  delta leaderboard entries.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.deltas.get_global_leaderboards(\nwom.Skills.Attack,\nwom.Period.Day,\ncountry=wom.Country.Gb,\n)\n</code></pre> Source code in <code>wom/services/deltas.py</code> <pre><code>async def get_global_leaderboards(\nself,\nmetric: enums.Metric,\nperiod: enums.Period,\n*,\nplayer_type: t.Optional[models.PlayerType] = None,\nplayer_build: t.Optional[models.PlayerBuild] = None,\ncountry: t.Optional[models.Country] = None,\n) -&gt; ResultT[t.List[models.DeltaLeaderboardEntry]]:\n\"\"\"Gets the top global delta leaderboard for a specific\n    metric and period.\n    Args:\n        metric: The metric to filter on.\n        period: The period of time to filter on.\n    Keyword Args:\n        player_type: The optional player type to filter on. Defaults\n            to `None`.\n        player_build: The optional player build to filter on.\n            Defaults to `None`.\n        country: The optional country to filter on. Defaults to\n            `None`.\n    Returns:\n        A [`Result`][wom.Result] containing a list of  delta\n            leaderboard entries.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.deltas.get_global_leaderboards(\n            wom.Skills.Attack,\n            wom.Period.Day,\n            country=wom.Country.Gb,\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(\nmetric=metric.value,\nperiod=period.value,\nplayerType=player_type.value if player_type else None,\nplayerBuild=player_build.value if player_build else None,\ncountry=country.value if country else None,\n)\nroute = routes.GLOBAL_DELTA_LEADERS.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_delta_leaderboard_entry(d) for d in data])\n</code></pre>"},{"location":"reference/services/#wom.services.EfficiencyService","title":"EfficiencyService","text":"<p>         Bases: <code>BaseService</code></p> <p>Handles endpoints related to efficiency.</p> Source code in <code>wom/services/efficiency.py</code> <pre><code>class EfficiencyService(BaseService):\n\"\"\"Handles endpoints related to efficiency.\"\"\"\n__slots__ = ()\nasync def get_global_leaderboard(\nself,\nmetric: enums.ComputedMetrics = enums.ComputedMetrics.Ehp,\n*,\nplayer_type: t.Optional[models.PlayerType] = None,\nplayer_build: t.Optional[models.PlayerBuild] = None,\ncountry: t.Optional[models.Country] = None,\nboth: bool = False,\n) -&gt; ResultT[t.List[models.Player]]:\n\"\"\"Gets the top global efficiency leaderboard.\n        Args:\n            metric: The computed metric to filter on. Defaults to [`Ehp`]\n                [wom.ComputedMetrics].\n        Keyword Args:\n            player_type: The optional player type to filter on. Defaults\n                to `None`.\n            player_build: The optional player build to filter on.\n                Defaults to `None`.\n            country: The optional country to filter on. Defaults to\n                `None`.\n            both: If `True`, request both ehp and ehb computed metric\n                leaderboards. This will override the `metric`, if it was\n                provided. Defaults to `False`.\n        Returns:\n            A [`Result`][wom.Result] containing a list of the top\n                players.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.efficiency.get_global_leaderboard(\n                player_type=wom.PlayerType.Ironman,\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(\nmetric=metric.value if not both else \"+\".join(m.value for m in enums.ComputedMetrics),\nplayerType=player_type.value if player_type else None,\nplayerBuild=player_build.value if player_build else None,\ncountry=country.value if country else None,\n)\nroute = routes.GLOBAL_EFFICIENCY_LEADERS.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_player(p) for p in data])\n</code></pre>"},{"location":"reference/services/#wom.services.efficiency.EfficiencyService.get_global_leaderboard","title":"get_global_leaderboard  <code>async</code>","text":"<pre><code>get_global_leaderboard(\nmetric: enums.ComputedMetrics = enums.ComputedMetrics.Ehp,\n*,\nplayer_type: t.Optional[models.PlayerType] = None,\nplayer_build: t.Optional[models.PlayerBuild] = None,\ncountry: t.Optional[models.Country] = None,\nboth: bool = False\n) -&gt; ResultT[t.List[models.Player]]\n</code></pre> <p>Gets the top global efficiency leaderboard.</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>enums.ComputedMetrics</code> <p>The computed metric to filter on. Defaults to <code>Ehp</code>.</p> <code>enums.ComputedMetrics.Ehp</code> <p>Other Parameters:</p> Name Type Description <code>player_type</code> <code>t.Optional[models.PlayerType]</code> <p>The optional player type to filter on. Defaults to <code>None</code>.</p> <code>player_build</code> <code>t.Optional[models.PlayerBuild]</code> <p>The optional player build to filter on. Defaults to <code>None</code>.</p> <code>country</code> <code>t.Optional[models.Country]</code> <p>The optional country to filter on. Defaults to <code>None</code>.</p> <code>both</code> <code>bool</code> <p>If <code>True</code>, request both ehp and ehb computed metric leaderboards. This will override the <code>metric</code>, if it was provided. Defaults to <code>False</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.Player]]</code> <p>A <code>Result</code> containing a list of the top players.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.efficiency.get_global_leaderboard(\nplayer_type=wom.PlayerType.Ironman,\n)\n</code></pre> Source code in <code>wom/services/efficiency.py</code> <pre><code>async def get_global_leaderboard(\nself,\nmetric: enums.ComputedMetrics = enums.ComputedMetrics.Ehp,\n*,\nplayer_type: t.Optional[models.PlayerType] = None,\nplayer_build: t.Optional[models.PlayerBuild] = None,\ncountry: t.Optional[models.Country] = None,\nboth: bool = False,\n) -&gt; ResultT[t.List[models.Player]]:\n\"\"\"Gets the top global efficiency leaderboard.\n    Args:\n        metric: The computed metric to filter on. Defaults to [`Ehp`]\n            [wom.ComputedMetrics].\n    Keyword Args:\n        player_type: The optional player type to filter on. Defaults\n            to `None`.\n        player_build: The optional player build to filter on.\n            Defaults to `None`.\n        country: The optional country to filter on. Defaults to\n            `None`.\n        both: If `True`, request both ehp and ehb computed metric\n            leaderboards. This will override the `metric`, if it was\n            provided. Defaults to `False`.\n    Returns:\n        A [`Result`][wom.Result] containing a list of the top\n            players.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.efficiency.get_global_leaderboard(\n            player_type=wom.PlayerType.Ironman,\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(\nmetric=metric.value if not both else \"+\".join(m.value for m in enums.ComputedMetrics),\nplayerType=player_type.value if player_type else None,\nplayerBuild=player_build.value if player_build else None,\ncountry=country.value if country else None,\n)\nroute = routes.GLOBAL_EFFICIENCY_LEADERS.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_player(p) for p in data])\n</code></pre>"},{"location":"reference/services/#wom.services.GroupService","title":"GroupService","text":"<p>         Bases: <code>BaseService</code></p> <p>Handles endpoints related to groups.</p> Source code in <code>wom/services/groups.py</code> <pre><code>class GroupService(BaseService):\n\"\"\"Handles endpoints related to groups.\"\"\"\n__slots__ = ()\ndef _prepare_member_fragments(\nself, members: t.Iterable[models.GroupMemberFragment]\n) -&gt; tuple[t.Dict[str, t.Any], ...]:\nreturn tuple({k: str(v) for k, v in m.to_dict().items() if v} for m in members)\nasync def search_groups(\nself,\nname: t.Optional[str] = None,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.Group]]:\n\"\"\"Searches for groups that at least partially match the given\n        name.\n        Args:\n            name: The group name to search for.\n            limit: The pagination limit.\n            offset: The pagination offset.\n        Returns:\n            A [`Result`][wom.Result] containing the list of matching\n                groups.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.search_groups(\"Some group\", limit=3)\n            ```\n        \"\"\"\nparams = self._generate_map(name=name, limit=limit, offset=offset)\nroute = routes.SEARCH_GROUPS.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_group(p) for p in data])\nasync def get_details(self, id: int) -&gt; ResultT[models.GroupDetail]:\n\"\"\"Gets the details for the given group id.\n        Args:\n            id: The group ID to get details for.\n        Returns:\n            A [`Result`][wom.Result] containing the group details.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.get_details(1234)\n            ```\n        \"\"\"\nroute = routes.GROUP_DETAILS.compile(id)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_group_details(data))\nasync def create_group(\nself,\nname: str,\n*members: models.GroupMemberFragment,\nclan_chat: t.Optional[str] = None,\ndescription: t.Optional[str] = None,\nhomeworld: t.Optional[int] = None,\n) -&gt; ResultT[models.GroupDetail]:\n\"\"\"Creates a new group.\n        Args:\n            name: The name for the group.\n            *members: The optional members to add to the group.\n        Keyword Args:\n            clan_chat: The optional clan chat for the group. Defaults to\n                `None`.\n            description: The optional group description.Defaults to\n                `None`.\n            homeworld: The optional homeworld for the group. Defaults to\n                `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the group details.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.create_group(\n                \"My new group\",\n                \"Jonxslays\",\n                \"Zezima\",\n                description=\"The most epic group.\"\n            )\n            ```\n        \"\"\"\npayload = self._generate_map(\nname=name,\nclanChat=clan_chat,\nhomeworld=homeworld,\ndescription=description,\nmembers=self._prepare_member_fragments(members),\n)\nroute = routes.CREATE_GROUP.compile()\ndata = await self._http.fetch(route, self._dict, payload=payload)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\n# Verification code is only present on new group creations\ngroup = self._serializer.deserialize_group_details(data[\"group\"])\ngroup.verification_code = data[\"verificationCode\"]\nreturn result.Ok(group)\nasync def edit_group(\nself,\nid: int,\nverification_code: str,\n*,\nname: t.Optional[str] = None,\nmembers: t.Optional[t.Iterable[models.GroupMemberFragment]] = None,\nclan_chat: t.Optional[str] = None,\ndescription: t.Optional[str] = None,\nhomeworld: t.Optional[int] = None,\n) -&gt; ResultT[models.GroupDetail]:\n\"\"\"Edits an existing group.\n        Args:\n            id: The ID of the group.\n            verification_code: The group verification code.\n        Keyword Args:\n            name: The optional new name for the group. Defaults to\n                `None`.\n            members: The optional iterable of members to replace the\n                existing group members with. Defaults to `None`.\n            clan_chat: The optional new clan chat for the group.\n                Defaults to `None`.\n            description: The optional new group description.Defaults to\n                `None`.\n            homeworld: The optional new homeworld for the group.\n                Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the group details.\n        !!! warning\n            The members list provided will completely replace the\n            existing members. If you want to add members, see\n            [`add_members()`][wom.GroupService.add_members]\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.edit_group(\n                123,\n                \"111-111-111\",\n                name=\"My new group name\",\n                members=[\"Jonxslays\"],\n                description=\"Some new description.\"\n            )\n            ```\n        \"\"\"\npayload = self._generate_map(\nname=name,\nclanChat=clan_chat,\nhomeworld=homeworld,\ndescription=description,\nverificationCode=verification_code,\nmembers=self._prepare_member_fragments(members) if members else None,\n)\nroute = routes.EDIT_GROUP.compile(id)\ndata = await self._http.fetch(route, self._dict, payload=payload)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_group_details(data))\nasync def delete_group(\nself, id: int, verification_code: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Deletes an existing group.\n        Args:\n            id: The ID of the group.\n            verification_code: The group verification code.\n        Returns:\n            A [`Result`][wom.Result] containing the success response\n                message.\n        !!! warning\n            This action is irreversible.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.delete_group(123, \"111-111-111\")\n            ```\n        \"\"\"\npayload = self._generate_map(verificationCode=verification_code)\nroute = routes.DELETE_GROUP.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\nasync def add_members(\nself, id: int, verification_code: str, *members: models.GroupMemberFragment\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Adds members to an existing group.\n        Args:\n            id: The ID of the group.\n            verification_code: The group verification code.\n            *members: The members to add to the group.\n        Returns:\n            A [`Result`][wom.Result] containing the success response\n                message.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.add_members(\n                123,\n                \"111-111-111\",\n                wom.GroupMemberFragment(\n                    \"Jonxslays\", wom.GroupRole.Administrator\n                ),\n                wom.GroupMemberFragment(\"Zezima\"),\n                wom.GroupMemberFragment(\"Psikoi\"),\n            )\n            ```\n        \"\"\"\npayload = self._generate_map(\nverificationCode=verification_code,\nmembers=self._prepare_member_fragments(members),\n)\nroute = routes.ADD_MEMBERS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\nasync def remove_members(\nself, id: int, verification_code: str, *members: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Removes members from an existing group.\n        Args:\n            id: The ID of the group.\n            verification_code: The group verification code.\n            *members: The members to remove from the group.\n        Returns:\n            A [`Result`][wom.Result] containing the success response\n                message.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.remove_members(\n                123,\n                \"111-111-111\",\n                \"Jonxslays\",\n                \"Zezima\",\n            )\n            ```\n        \"\"\"\npayload = self._generate_map(verificationCode=verification_code, members=members)\nroute = routes.REMOVE_MEMBERS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\nasync def change_member_role(\nself, id: int, verification_code: str, username: str, role: models.GroupRole\n) -&gt; ResultT[models.GroupMembership]:\n\"\"\"Changes the role for a member in an existing group.\n        Args:\n            id: The ID of the group.\n            verification_code: The group verification code.\n            username: The username of the player to update.\n            role: The players new group role.\n        Returns:\n            A [`Result`][wom.Result] containing the players group\n                membership.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.change_member_role(\n                123,\n                \"111-111-111\",\n                \"Jonxslays\",\n                wom.GroupRole.Admiral\n            )\n            ```\n        \"\"\"\npayload = self._generate_map(\nverificationCode=verification_code, username=username, role=role.value\n)\nroute = routes.CHANGE_MEMBER_ROLE.compile(id)\ndata = await self._http.fetch(route, self._dict, payload=payload)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_group_membership(data))\nasync def update_outdated_members(\nself, id: int, verification_code: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Attempts to update all outdated group members.\n        !!! info\n            Group members are considered outdated when they haven't been\n            updated in over 24h.\n        !!! warning\n            This method adds every outdated member to an \"update queue\",\n            and the WOM servers try to update players in the queue one\n            by one, with a delay in between each. For each player in the\n            queue, an attempt is made to update it up to 3 times, with\n            30s in between each attempt.\n            Please note that this is dependent on the OSRS hiscores\n            functioning correctly, and therefore this method does NOT\n            guarantee the players will be updated, it only guarantees\n            that an attempt will be made to update them, up to 3 times.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.groups.update_outdated_members(\n                123, \"111-111-111\"\n            )\n            ```\n        Args:\n            id: The ID of the group.\n            verification_code: The verification code for the group.\n        Returns:\n            A [`Result`][wom.Result] containing the success response\n                message.\n        \"\"\"\npayload = self._generate_map(verificationCode=verification_code)\nroute = routes.UPDATE_OUTDATED_MEMBERS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif \"players are being updated\" in data.message:\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\nreturn result.Err(data)\nasync def get_competitions(\nself, id: int, *, limit: t.Optional[int] = None, offset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.Competition]]:\n\"\"\"Gets competitions for a given group.\n        Args:\n            id: The ID of the group.\n        Keyword Args:\n            limit: The optional pagination limit. Defaults to `None`.\n            offset: The optional pagination offset. Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the list of\n                competitions.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.get_competitions(123, limit=10)\n            ```\n        \"\"\"\nparams = self._generate_map(limit=limit, offset=offset)\nroute = routes.GROUP_COMPETITIONS.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_competition(c) for c in data])\nasync def get_gains(\nself,\nid: int,\nmetric: enums.Metric,\n*,\nperiod: t.Optional[enums.Period] = None,\nstart_date: t.Optional[datetime] = None,\nend_date: t.Optional[datetime] = None,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.DeltaLeaderboardEntry]]:\n\"\"\"Gets the gains for a group over a particular time frame.\n        Args:\n            id: The ID of the group.\n            metric: The metric to filter on.\n        Keyword Args:\n            period: The optional period of time to get gains for.\n                Defaults to `None`.\n            start_date: The minimum date to get the gains from. Defaults\n                to `None`.\n            end_date: The maximum date to get the gains from. Defaults\n                to `None`.\n            limit: The optional pagination limit. Defaults to `None`.\n            offset: The optional pagination offset. Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the list of delta\n                leaderboard entries.\n        !!! info\n            You can pass either (`period`) or (`start_date` +\n            `end_date`), but not both.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.get_gains(\n                123, wom.Bosses.Zulrah, limit=10\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(\nlimit=limit,\noffset=offset,\nmetric=metric.value,\nperiod=period.value if period else None,\nendDate=end_date.isoformat() if end_date else None,\nstartDate=start_date.isoformat() if start_date else None,\n)\nroute = routes.GROUP_GAINS.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_delta_leaderboard_entry(d) for d in data])\nasync def get_achievements(\nself,\nid: int,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.Achievement]]:\n\"\"\"Gets the achievements for the group.\n        Args:\n            id: The ID of the group.\n        Keyword Args:\n            limit: The optional pagination limit. Defaults to `None`.\n            offset: The optional pagination offset. Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the list of\n                achievements.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.get_achievements(123, limit=10)\n            ```\n        \"\"\"\nparams = self._generate_map(limit=limit, offset=offset)\nroute = routes.GROUP_ACHIEVEMENTS.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_achievement(a) for a in data])\nasync def get_records(\nself,\nid: int,\nmetric: enums.Metric,\nperiod: enums.Period,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.RecordLeaderboardEntry]]:\n\"\"\"Gets the records held by players in the group.\n        Args:\n            id: The ID of the group.\n            metric: The metric to filter on.\n            period: The period of time to get records for.\n        Keyword Args:\n            limit: The optional pagination limit. Defaults to `None`.\n            offset: The optional pagination offset. Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the list of record\n                leaderboard entries.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.get_records(\n                123, wom.Bosses.Zulrah, wom.Period.Day, limit=3\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(\nlimit=limit,\noffset=offset,\nmetric=metric.value,\nperiod=period.value,\n)\nroute = routes.GROUP_RECORDS.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_record_leaderboard_entry(a) for a in data])\nasync def get_hiscores(\nself,\nid: int,\nmetric: enums.Metric,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.GroupHiscoresEntry]]:\n\"\"\"Gets the hiscores for the group.\n        Args:\n            id: The ID of the group.\n            metric: The metric to filter on.\n        Keyword Args:\n            limit: The optional pagination limit. Defaults to `None`.\n            offset: The optional pagination offset. Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the list of hiscores\n                entries.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.get_hiscores(\n                123, wom.Skills.Runecrafting, limit=10\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(limit=limit, offset=offset, metric=metric.value)\nroute = routes.GROUP_HISCORES.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_group_hiscores_entry(h) for h in data])\nasync def get_name_changes(\nself, id: int, *, limit: t.Optional[int] = None, offset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.NameChange]]:\n\"\"\"Gets the past name changes for the group.\n        Args:\n            id: The ID of the group.\n        Keyword Args:\n            limit: The optional pagination limit. Defaults to `None`.\n            offset: The optional pagination offset. Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the list name changes.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.get_name_changes(123, limit=10)\n            ```\n        \"\"\"\nparams = self._generate_map(limit=limit, offset=offset)\nroute = routes.GROUP_NAME_CHANGES.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_name_change(n) for n in data])\nasync def get_statistics(self, id: int) -&gt; ResultT[models.GroupStatistics]:\n\"\"\"Gets the statistics for the group.\n        Args:\n            id: The ID of the group.\n        Returns:\n            A [`Result`][wom.Result] containing the statistics.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            await client.groups.get_statistics(123)\n            ```\n        \"\"\"\nroute = routes.GROUP_STATISTICS.compile(id)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_group_statistics(data))\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.add_members","title":"add_members  <code>async</code>","text":"<pre><code>add_members(\nid: int,\nverification_code: str,\n*members: models.GroupMemberFragment\n) -&gt; ResultT[models.HttpSuccessResponse]\n</code></pre> <p>Adds members to an existing group.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the group.</p> required <code>verification_code</code> <code>str</code> <p>The group verification code.</p> required <code>*members</code> <code>models.GroupMemberFragment</code> <p>The members to add to the group.</p> <code>()</code> <p>Returns:</p> Type Description <code>ResultT[models.HttpSuccessResponse]</code> <p>A <code>Result</code> containing the success response message.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.add_members(\n123,\n\"111-111-111\",\nwom.GroupMemberFragment(\n\"Jonxslays\", wom.GroupRole.Administrator\n),\nwom.GroupMemberFragment(\"Zezima\"),\nwom.GroupMemberFragment(\"Psikoi\"),\n)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def add_members(\nself, id: int, verification_code: str, *members: models.GroupMemberFragment\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Adds members to an existing group.\n    Args:\n        id: The ID of the group.\n        verification_code: The group verification code.\n        *members: The members to add to the group.\n    Returns:\n        A [`Result`][wom.Result] containing the success response\n            message.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.add_members(\n            123,\n            \"111-111-111\",\n            wom.GroupMemberFragment(\n                \"Jonxslays\", wom.GroupRole.Administrator\n            ),\n            wom.GroupMemberFragment(\"Zezima\"),\n            wom.GroupMemberFragment(\"Psikoi\"),\n        )\n        ```\n    \"\"\"\npayload = self._generate_map(\nverificationCode=verification_code,\nmembers=self._prepare_member_fragments(members),\n)\nroute = routes.ADD_MEMBERS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.change_member_role","title":"change_member_role  <code>async</code>","text":"<pre><code>change_member_role(\nid: int,\nverification_code: str,\nusername: str,\nrole: models.GroupRole,\n) -&gt; ResultT[models.GroupMembership]\n</code></pre> <p>Changes the role for a member in an existing group.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the group.</p> required <code>verification_code</code> <code>str</code> <p>The group verification code.</p> required <code>username</code> <code>str</code> <p>The username of the player to update.</p> required <code>role</code> <code>models.GroupRole</code> <p>The players new group role.</p> required <p>Returns:</p> Type Description <code>ResultT[models.GroupMembership]</code> <p>A <code>Result</code> containing the players group membership.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.change_member_role(\n123,\n\"111-111-111\",\n\"Jonxslays\",\nwom.GroupRole.Admiral\n)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def change_member_role(\nself, id: int, verification_code: str, username: str, role: models.GroupRole\n) -&gt; ResultT[models.GroupMembership]:\n\"\"\"Changes the role for a member in an existing group.\n    Args:\n        id: The ID of the group.\n        verification_code: The group verification code.\n        username: The username of the player to update.\n        role: The players new group role.\n    Returns:\n        A [`Result`][wom.Result] containing the players group\n            membership.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.change_member_role(\n            123,\n            \"111-111-111\",\n            \"Jonxslays\",\n            wom.GroupRole.Admiral\n        )\n        ```\n    \"\"\"\npayload = self._generate_map(\nverificationCode=verification_code, username=username, role=role.value\n)\nroute = routes.CHANGE_MEMBER_ROLE.compile(id)\ndata = await self._http.fetch(route, self._dict, payload=payload)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_group_membership(data))\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.create_group","title":"create_group  <code>async</code>","text":"<pre><code>create_group(\nname: str,\n*members: models.GroupMemberFragment,\nclan_chat: t.Optional[str] = None,\ndescription: t.Optional[str] = None,\nhomeworld: t.Optional[int] = None\n) -&gt; ResultT[models.GroupDetail]\n</code></pre> <p>Creates a new group.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name for the group.</p> required <code>*members</code> <code>models.GroupMemberFragment</code> <p>The optional members to add to the group.</p> <code>()</code> <p>Other Parameters:</p> Name Type Description <code>clan_chat</code> <code>t.Optional[str]</code> <p>The optional clan chat for the group. Defaults to <code>None</code>.</p> <code>description</code> <code>t.Optional[str]</code> <p>The optional group description.Defaults to <code>None</code>.</p> <code>homeworld</code> <code>t.Optional[int]</code> <p>The optional homeworld for the group. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[models.GroupDetail]</code> <p>A <code>Result</code> containing the group details.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.create_group(\n\"My new group\",\n\"Jonxslays\",\n\"Zezima\",\ndescription=\"The most epic group.\"\n)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def create_group(\nself,\nname: str,\n*members: models.GroupMemberFragment,\nclan_chat: t.Optional[str] = None,\ndescription: t.Optional[str] = None,\nhomeworld: t.Optional[int] = None,\n) -&gt; ResultT[models.GroupDetail]:\n\"\"\"Creates a new group.\n    Args:\n        name: The name for the group.\n        *members: The optional members to add to the group.\n    Keyword Args:\n        clan_chat: The optional clan chat for the group. Defaults to\n            `None`.\n        description: The optional group description.Defaults to\n            `None`.\n        homeworld: The optional homeworld for the group. Defaults to\n            `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the group details.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.create_group(\n            \"My new group\",\n            \"Jonxslays\",\n            \"Zezima\",\n            description=\"The most epic group.\"\n        )\n        ```\n    \"\"\"\npayload = self._generate_map(\nname=name,\nclanChat=clan_chat,\nhomeworld=homeworld,\ndescription=description,\nmembers=self._prepare_member_fragments(members),\n)\nroute = routes.CREATE_GROUP.compile()\ndata = await self._http.fetch(route, self._dict, payload=payload)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\n# Verification code is only present on new group creations\ngroup = self._serializer.deserialize_group_details(data[\"group\"])\ngroup.verification_code = data[\"verificationCode\"]\nreturn result.Ok(group)\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.delete_group","title":"delete_group  <code>async</code>","text":"<pre><code>delete_group(\nid: int, verification_code: str\n) -&gt; ResultT[models.HttpSuccessResponse]\n</code></pre> <p>Deletes an existing group.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the group.</p> required <code>verification_code</code> <code>str</code> <p>The group verification code.</p> required <p>Returns:</p> Type Description <code>ResultT[models.HttpSuccessResponse]</code> <p>A <code>Result</code> containing the success response message.</p> <p>Warning</p> <p>This action is irreversible.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.delete_group(123, \"111-111-111\")\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def delete_group(\nself, id: int, verification_code: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Deletes an existing group.\n    Args:\n        id: The ID of the group.\n        verification_code: The group verification code.\n    Returns:\n        A [`Result`][wom.Result] containing the success response\n            message.\n    !!! warning\n        This action is irreversible.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.delete_group(123, \"111-111-111\")\n        ```\n    \"\"\"\npayload = self._generate_map(verificationCode=verification_code)\nroute = routes.DELETE_GROUP.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.edit_group","title":"edit_group  <code>async</code>","text":"<pre><code>edit_group(\nid: int,\nverification_code: str,\n*,\nname: t.Optional[str] = None,\nmembers: t.Optional[\nt.Iterable[models.GroupMemberFragment]\n] = None,\nclan_chat: t.Optional[str] = None,\ndescription: t.Optional[str] = None,\nhomeworld: t.Optional[int] = None\n) -&gt; ResultT[models.GroupDetail]\n</code></pre> <p>Edits an existing group.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the group.</p> required <code>verification_code</code> <code>str</code> <p>The group verification code.</p> required <p>Other Parameters:</p> Name Type Description <code>name</code> <code>t.Optional[str]</code> <p>The optional new name for the group. Defaults to <code>None</code>.</p> <code>members</code> <code>t.Optional[t.Iterable[models.GroupMemberFragment]]</code> <p>The optional iterable of members to replace the existing group members with. Defaults to <code>None</code>.</p> <code>clan_chat</code> <code>t.Optional[str]</code> <p>The optional new clan chat for the group. Defaults to <code>None</code>.</p> <code>description</code> <code>t.Optional[str]</code> <p>The optional new group description.Defaults to <code>None</code>.</p> <code>homeworld</code> <code>t.Optional[int]</code> <p>The optional new homeworld for the group. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[models.GroupDetail]</code> <p>A <code>Result</code> containing the group details.</p> <p>Warning</p> <p>The members list provided will completely replace the existing members. If you want to add members, see <code>add_members()</code></p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.edit_group(\n123,\n\"111-111-111\",\nname=\"My new group name\",\nmembers=[\"Jonxslays\"],\ndescription=\"Some new description.\"\n)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def edit_group(\nself,\nid: int,\nverification_code: str,\n*,\nname: t.Optional[str] = None,\nmembers: t.Optional[t.Iterable[models.GroupMemberFragment]] = None,\nclan_chat: t.Optional[str] = None,\ndescription: t.Optional[str] = None,\nhomeworld: t.Optional[int] = None,\n) -&gt; ResultT[models.GroupDetail]:\n\"\"\"Edits an existing group.\n    Args:\n        id: The ID of the group.\n        verification_code: The group verification code.\n    Keyword Args:\n        name: The optional new name for the group. Defaults to\n            `None`.\n        members: The optional iterable of members to replace the\n            existing group members with. Defaults to `None`.\n        clan_chat: The optional new clan chat for the group.\n            Defaults to `None`.\n        description: The optional new group description.Defaults to\n            `None`.\n        homeworld: The optional new homeworld for the group.\n            Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the group details.\n    !!! warning\n        The members list provided will completely replace the\n        existing members. If you want to add members, see\n        [`add_members()`][wom.GroupService.add_members]\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.edit_group(\n            123,\n            \"111-111-111\",\n            name=\"My new group name\",\n            members=[\"Jonxslays\"],\n            description=\"Some new description.\"\n        )\n        ```\n    \"\"\"\npayload = self._generate_map(\nname=name,\nclanChat=clan_chat,\nhomeworld=homeworld,\ndescription=description,\nverificationCode=verification_code,\nmembers=self._prepare_member_fragments(members) if members else None,\n)\nroute = routes.EDIT_GROUP.compile(id)\ndata = await self._http.fetch(route, self._dict, payload=payload)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_group_details(data))\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.get_achievements","title":"get_achievements  <code>async</code>","text":"<pre><code>get_achievements(\nid: int,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.Achievement]]\n</code></pre> <p>Gets the achievements for the group.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the group.</p> required <p>Other Parameters:</p> Name Type Description <code>limit</code> <code>t.Optional[int]</code> <p>The optional pagination limit. Defaults to <code>None</code>.</p> <code>offset</code> <code>t.Optional[int]</code> <p>The optional pagination offset. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.Achievement]]</code> <p>A <code>Result</code> containing the list of achievements.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.get_achievements(123, limit=10)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def get_achievements(\nself,\nid: int,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.Achievement]]:\n\"\"\"Gets the achievements for the group.\n    Args:\n        id: The ID of the group.\n    Keyword Args:\n        limit: The optional pagination limit. Defaults to `None`.\n        offset: The optional pagination offset. Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the list of\n            achievements.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.get_achievements(123, limit=10)\n        ```\n    \"\"\"\nparams = self._generate_map(limit=limit, offset=offset)\nroute = routes.GROUP_ACHIEVEMENTS.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_achievement(a) for a in data])\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.get_competitions","title":"get_competitions  <code>async</code>","text":"<pre><code>get_competitions(\nid: int,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.Competition]]\n</code></pre> <p>Gets competitions for a given group.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the group.</p> required <p>Other Parameters:</p> Name Type Description <code>limit</code> <code>t.Optional[int]</code> <p>The optional pagination limit. Defaults to <code>None</code>.</p> <code>offset</code> <code>t.Optional[int]</code> <p>The optional pagination offset. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.Competition]]</code> <p>A <code>Result</code> containing the list of competitions.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.get_competitions(123, limit=10)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def get_competitions(\nself, id: int, *, limit: t.Optional[int] = None, offset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.Competition]]:\n\"\"\"Gets competitions for a given group.\n    Args:\n        id: The ID of the group.\n    Keyword Args:\n        limit: The optional pagination limit. Defaults to `None`.\n        offset: The optional pagination offset. Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the list of\n            competitions.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.get_competitions(123, limit=10)\n        ```\n    \"\"\"\nparams = self._generate_map(limit=limit, offset=offset)\nroute = routes.GROUP_COMPETITIONS.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_competition(c) for c in data])\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.get_details","title":"get_details  <code>async</code>","text":"<pre><code>get_details(id: int) -&gt; ResultT[models.GroupDetail]\n</code></pre> <p>Gets the details for the given group id.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The group ID to get details for.</p> required <p>Returns:</p> Type Description <code>ResultT[models.GroupDetail]</code> <p>A <code>Result</code> containing the group details.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.get_details(1234)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def get_details(self, id: int) -&gt; ResultT[models.GroupDetail]:\n\"\"\"Gets the details for the given group id.\n    Args:\n        id: The group ID to get details for.\n    Returns:\n        A [`Result`][wom.Result] containing the group details.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.get_details(1234)\n        ```\n    \"\"\"\nroute = routes.GROUP_DETAILS.compile(id)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_group_details(data))\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.get_gains","title":"get_gains  <code>async</code>","text":"<pre><code>get_gains(\nid: int,\nmetric: enums.Metric,\n*,\nperiod: t.Optional[enums.Period] = None,\nstart_date: t.Optional[datetime] = None,\nend_date: t.Optional[datetime] = None,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.DeltaLeaderboardEntry]]\n</code></pre> <p>Gets the gains for a group over a particular time frame.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the group.</p> required <code>metric</code> <code>enums.Metric</code> <p>The metric to filter on.</p> required <p>Other Parameters:</p> Name Type Description <code>period</code> <code>t.Optional[enums.Period]</code> <p>The optional period of time to get gains for. Defaults to <code>None</code>.</p> <code>start_date</code> <code>t.Optional[datetime]</code> <p>The minimum date to get the gains from. Defaults to <code>None</code>.</p> <code>end_date</code> <code>t.Optional[datetime]</code> <p>The maximum date to get the gains from. Defaults to <code>None</code>.</p> <code>limit</code> <code>t.Optional[int]</code> <p>The optional pagination limit. Defaults to <code>None</code>.</p> <code>offset</code> <code>t.Optional[int]</code> <p>The optional pagination offset. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.DeltaLeaderboardEntry]]</code> <p>A <code>Result</code> containing the list of delta leaderboard entries.</p> <p>Info</p> <p>You can pass either (<code>period</code>) or (<code>start_date</code> + <code>end_date</code>), but not both.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.get_gains(\n123, wom.Bosses.Zulrah, limit=10\n)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def get_gains(\nself,\nid: int,\nmetric: enums.Metric,\n*,\nperiod: t.Optional[enums.Period] = None,\nstart_date: t.Optional[datetime] = None,\nend_date: t.Optional[datetime] = None,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.DeltaLeaderboardEntry]]:\n\"\"\"Gets the gains for a group over a particular time frame.\n    Args:\n        id: The ID of the group.\n        metric: The metric to filter on.\n    Keyword Args:\n        period: The optional period of time to get gains for.\n            Defaults to `None`.\n        start_date: The minimum date to get the gains from. Defaults\n            to `None`.\n        end_date: The maximum date to get the gains from. Defaults\n            to `None`.\n        limit: The optional pagination limit. Defaults to `None`.\n        offset: The optional pagination offset. Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the list of delta\n            leaderboard entries.\n    !!! info\n        You can pass either (`period`) or (`start_date` +\n        `end_date`), but not both.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.get_gains(\n            123, wom.Bosses.Zulrah, limit=10\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(\nlimit=limit,\noffset=offset,\nmetric=metric.value,\nperiod=period.value if period else None,\nendDate=end_date.isoformat() if end_date else None,\nstartDate=start_date.isoformat() if start_date else None,\n)\nroute = routes.GROUP_GAINS.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_delta_leaderboard_entry(d) for d in data])\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.get_hiscores","title":"get_hiscores  <code>async</code>","text":"<pre><code>get_hiscores(\nid: int,\nmetric: enums.Metric,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.GroupHiscoresEntry]]\n</code></pre> <p>Gets the hiscores for the group.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the group.</p> required <code>metric</code> <code>enums.Metric</code> <p>The metric to filter on.</p> required <p>Other Parameters:</p> Name Type Description <code>limit</code> <code>t.Optional[int]</code> <p>The optional pagination limit. Defaults to <code>None</code>.</p> <code>offset</code> <code>t.Optional[int]</code> <p>The optional pagination offset. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.GroupHiscoresEntry]]</code> <p>A <code>Result</code> containing the list of hiscores entries.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.get_hiscores(\n123, wom.Skills.Runecrafting, limit=10\n)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def get_hiscores(\nself,\nid: int,\nmetric: enums.Metric,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.GroupHiscoresEntry]]:\n\"\"\"Gets the hiscores for the group.\n    Args:\n        id: The ID of the group.\n        metric: The metric to filter on.\n    Keyword Args:\n        limit: The optional pagination limit. Defaults to `None`.\n        offset: The optional pagination offset. Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the list of hiscores\n            entries.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.get_hiscores(\n            123, wom.Skills.Runecrafting, limit=10\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(limit=limit, offset=offset, metric=metric.value)\nroute = routes.GROUP_HISCORES.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_group_hiscores_entry(h) for h in data])\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.get_name_changes","title":"get_name_changes  <code>async</code>","text":"<pre><code>get_name_changes(\nid: int,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.NameChange]]\n</code></pre> <p>Gets the past name changes for the group.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the group.</p> required <p>Other Parameters:</p> Name Type Description <code>limit</code> <code>t.Optional[int]</code> <p>The optional pagination limit. Defaults to <code>None</code>.</p> <code>offset</code> <code>t.Optional[int]</code> <p>The optional pagination offset. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.NameChange]]</code> <p>A <code>Result</code> containing the list name changes.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.get_name_changes(123, limit=10)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def get_name_changes(\nself, id: int, *, limit: t.Optional[int] = None, offset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.NameChange]]:\n\"\"\"Gets the past name changes for the group.\n    Args:\n        id: The ID of the group.\n    Keyword Args:\n        limit: The optional pagination limit. Defaults to `None`.\n        offset: The optional pagination offset. Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the list name changes.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.get_name_changes(123, limit=10)\n        ```\n    \"\"\"\nparams = self._generate_map(limit=limit, offset=offset)\nroute = routes.GROUP_NAME_CHANGES.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_name_change(n) for n in data])\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.get_records","title":"get_records  <code>async</code>","text":"<pre><code>get_records(\nid: int,\nmetric: enums.Metric,\nperiod: enums.Period,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.RecordLeaderboardEntry]]\n</code></pre> <p>Gets the records held by players in the group.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the group.</p> required <code>metric</code> <code>enums.Metric</code> <p>The metric to filter on.</p> required <code>period</code> <code>enums.Period</code> <p>The period of time to get records for.</p> required <p>Other Parameters:</p> Name Type Description <code>limit</code> <code>t.Optional[int]</code> <p>The optional pagination limit. Defaults to <code>None</code>.</p> <code>offset</code> <code>t.Optional[int]</code> <p>The optional pagination offset. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.RecordLeaderboardEntry]]</code> <p>A <code>Result</code> containing the list of record leaderboard entries.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.get_records(\n123, wom.Bosses.Zulrah, wom.Period.Day, limit=3\n)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def get_records(\nself,\nid: int,\nmetric: enums.Metric,\nperiod: enums.Period,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.RecordLeaderboardEntry]]:\n\"\"\"Gets the records held by players in the group.\n    Args:\n        id: The ID of the group.\n        metric: The metric to filter on.\n        period: The period of time to get records for.\n    Keyword Args:\n        limit: The optional pagination limit. Defaults to `None`.\n        offset: The optional pagination offset. Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the list of record\n            leaderboard entries.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.get_records(\n            123, wom.Bosses.Zulrah, wom.Period.Day, limit=3\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(\nlimit=limit,\noffset=offset,\nmetric=metric.value,\nperiod=period.value,\n)\nroute = routes.GROUP_RECORDS.compile(id).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_record_leaderboard_entry(a) for a in data])\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.get_statistics","title":"get_statistics  <code>async</code>","text":"<pre><code>get_statistics(id: int) -&gt; ResultT[models.GroupStatistics]\n</code></pre> <p>Gets the statistics for the group.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the group.</p> required <p>Returns:</p> Type Description <code>ResultT[models.GroupStatistics]</code> <p>A <code>Result</code> containing the statistics.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.get_statistics(123)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def get_statistics(self, id: int) -&gt; ResultT[models.GroupStatistics]:\n\"\"\"Gets the statistics for the group.\n    Args:\n        id: The ID of the group.\n    Returns:\n        A [`Result`][wom.Result] containing the statistics.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.get_statistics(123)\n        ```\n    \"\"\"\nroute = routes.GROUP_STATISTICS.compile(id)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_group_statistics(data))\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.remove_members","title":"remove_members  <code>async</code>","text":"<pre><code>remove_members(\nid: int, verification_code: str, *members: str\n) -&gt; ResultT[models.HttpSuccessResponse]\n</code></pre> <p>Removes members from an existing group.</p> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the group.</p> required <code>verification_code</code> <code>str</code> <p>The group verification code.</p> required <code>*members</code> <code>str</code> <p>The members to remove from the group.</p> <code>()</code> <p>Returns:</p> Type Description <code>ResultT[models.HttpSuccessResponse]</code> <p>A <code>Result</code> containing the success response message.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.remove_members(\n123,\n\"111-111-111\",\n\"Jonxslays\",\n\"Zezima\",\n)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def remove_members(\nself, id: int, verification_code: str, *members: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Removes members from an existing group.\n    Args:\n        id: The ID of the group.\n        verification_code: The group verification code.\n        *members: The members to remove from the group.\n    Returns:\n        A [`Result`][wom.Result] containing the success response\n            message.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.remove_members(\n            123,\n            \"111-111-111\",\n            \"Jonxslays\",\n            \"Zezima\",\n        )\n        ```\n    \"\"\"\npayload = self._generate_map(verificationCode=verification_code, members=members)\nroute = routes.REMOVE_MEMBERS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif not data.message.startswith(\"Success\"):\nreturn result.Err(data)\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.search_groups","title":"search_groups  <code>async</code>","text":"<pre><code>search_groups(\nname: t.Optional[str] = None,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.Group]]\n</code></pre> <p>Searches for groups that at least partially match the given name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>t.Optional[str]</code> <p>The group name to search for.</p> <code>None</code> <code>limit</code> <code>t.Optional[int]</code> <p>The pagination limit.</p> <code>None</code> <code>offset</code> <code>t.Optional[int]</code> <p>The pagination offset.</p> <code>None</code> <p>Returns:</p> Type Description <code>ResultT[t.List[models.Group]]</code> <p>A <code>Result</code> containing the list of matching groups.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nawait client.groups.search_groups(\"Some group\", limit=3)\n</code></pre> Source code in <code>wom/services/groups.py</code> <pre><code>async def search_groups(\nself,\nname: t.Optional[str] = None,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.Group]]:\n\"\"\"Searches for groups that at least partially match the given\n    name.\n    Args:\n        name: The group name to search for.\n        limit: The pagination limit.\n        offset: The pagination offset.\n    Returns:\n        A [`Result`][wom.Result] containing the list of matching\n            groups.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        await client.groups.search_groups(\"Some group\", limit=3)\n        ```\n    \"\"\"\nparams = self._generate_map(name=name, limit=limit, offset=offset)\nroute = routes.SEARCH_GROUPS.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_group(p) for p in data])\n</code></pre>"},{"location":"reference/services/#wom.services.groups.GroupService.update_outdated_members","title":"update_outdated_members  <code>async</code>","text":"<pre><code>update_outdated_members(\nid: int, verification_code: str\n) -&gt; ResultT[models.HttpSuccessResponse]\n</code></pre> <p>Attempts to update all outdated group members.</p> <p>Info</p> <p>Group members are considered outdated when they haven't been updated in over 24h.</p> <p>Warning</p> <p>This method adds every outdated member to an \"update queue\", and the WOM servers try to update players in the queue one by one, with a delay in between each. For each player in the queue, an attempt is made to update it up to 3 times, with 30s in between each attempt.</p> <p>Please note that this is dependent on the OSRS hiscores functioning correctly, and therefore this method does NOT guarantee the players will be updated, it only guarantees that an attempt will be made to update them, up to 3 times.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.groups.update_outdated_members(\n123, \"111-111-111\"\n)\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>id</code> <code>int</code> <p>The ID of the group.</p> required <code>verification_code</code> <code>str</code> <p>The verification code for the group.</p> required <p>Returns:</p> Type Description <code>ResultT[models.HttpSuccessResponse]</code> <p>A <code>Result</code> containing the success response message.</p> Source code in <code>wom/services/groups.py</code> <pre><code>async def update_outdated_members(\nself, id: int, verification_code: str\n) -&gt; ResultT[models.HttpSuccessResponse]:\n\"\"\"Attempts to update all outdated group members.\n    !!! info\n        Group members are considered outdated when they haven't been\n        updated in over 24h.\n    !!! warning\n        This method adds every outdated member to an \"update queue\",\n        and the WOM servers try to update players in the queue one\n        by one, with a delay in between each. For each player in the\n        queue, an attempt is made to update it up to 3 times, with\n        30s in between each attempt.\n        Please note that this is dependent on the OSRS hiscores\n        functioning correctly, and therefore this method does NOT\n        guarantee the players will be updated, it only guarantees\n        that an attempt will be made to update them, up to 3 times.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.groups.update_outdated_members(\n            123, \"111-111-111\"\n        )\n        ```\n    Args:\n        id: The ID of the group.\n        verification_code: The verification code for the group.\n    Returns:\n        A [`Result`][wom.Result] containing the success response\n            message.\n    \"\"\"\npayload = self._generate_map(verificationCode=verification_code)\nroute = routes.UPDATE_OUTDATED_MEMBERS.compile(id)\ndata = await self._http.fetch(route, models.HttpErrorResponse, payload=payload)\nif \"players are being updated\" in data.message:\nreturn result.Ok(models.HttpSuccessResponse(data.status, data.message))\nreturn result.Err(data)\n</code></pre>"},{"location":"reference/services/#wom.services.HttpService","title":"HttpService","text":"<p>The HTTP service used to make requests to the WOM API.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>t.Optional[str]</code> <p>The optional api key to use.</p> required <code>user_agent</code> <code>t.Optional[str]</code> <p>The optional user agent to use.</p> required <code>api_base_url</code> <code>t.Optional[str]</code> <p>The optional api base url to use.</p> required Source code in <code>wom/services/http.py</code> <pre><code>class HttpService:\n\"\"\"The HTTP service used to make requests to the WOM API.\n    Args:\n        api_key: The optional api key to use.\n        user_agent: The optional user agent to use.\n        api_base_url: The optional api base url to use.\n    \"\"\"\n__slots__ = (\"_base_url\", \"_headers\", \"_method_mapping\", \"_session\")\ndef __init__(\nself,\napi_key: t.Optional[str],\nuser_agent: t.Optional[str],\napi_base_url: t.Optional[str],\n) -&gt; None:\nself._headers = {\n\"x-user-agent\": (\nf\"{constants.USER_AGENT_BASE} {user_agent}\"\nif user_agent\nelse constants.DEFAULT_USER_AGENT\n)\n}\nif api_key:\nself._headers[\"x-api-key\"] = api_key\nself._base_url = api_base_url or constants.WOM_BASE_URL\nasync def _try_get_json(self, response: aiohttp.ClientResponse) -&gt; t.Any:\ntry:\nreturn await response.json()\nexcept Exception:\nreturn models.HttpErrorResponse(\nresponse.status, \"Unable to deserialize response, the api is likely down.\"\n)\nasync def _request(\nself, req: t.Callable[..., t.Awaitable[t.Any]], url: str, **kwargs: t.Any\n) -&gt; t.Any:\nresponse = await req(url, **kwargs)\ndata = await self._try_get_json(response)\nif isinstance(data, models.HttpErrorResponse):\nreturn data\nif not response.ok or \"message\" in data:\nreturn models.HttpErrorResponse(\nresponse.status,\ndata.get(\"message\", \"An unexpected error occurred while making the request.\"),\n)\nreturn data\ndef _get_request_func(self, method: str) -&gt; t.Callable[..., t.Awaitable[t.Any]]:\nif not hasattr(self, \"_method_mapping\"):\nraise RuntimeError(\"HttpService.start was never called, aborting...\")\nreturn self._method_mapping[method]  # type: ignore\nasync def _init_session(self) -&gt; None:\nself._session = aiohttp.ClientSession()\nself._method_mapping = {\n\"GET\": self._session.get,\n\"POST\": self._session.post,\n\"PUT\": self._session.put,\n\"PATCH\": self._session.patch,\n\"DELETE\": self._session.delete,\n}\ndef set_api_key(self, api_key: str) -&gt; None:\n\"\"\"Sets the api key used by the http service.\n        Args:\n            api_key: The new api key to use.\n        \"\"\"\nself._headers[\"x-api-key\"] = api_key\ndef unset_api_key(self) -&gt; None:\n\"\"\"Un-sets the current api key so it isn't sent with requests.\"\"\"\nif \"x-api-key\" in self._headers:\ndel self._headers[\"x-api-key\"]\ndef set_user_agent(self, user_agent: str) -&gt; None:\n\"\"\"Sets the user agent used by the http service.\n        Args:\n            user_agent: The new user agent to use.\n        \"\"\"\nself._headers[\"x-user-agent\"] = user_agent\ndef set_base_url(self, base_url: str) -&gt; None:\n\"\"\"Sets the api base url used by the http service.\n        Args:\n            base_url: The new base url to use.\n        \"\"\"\nself._base_url = base_url\nasync def start(self) -&gt; None:\n\"\"\"Starts the client session to be used by the http service.\"\"\"\nif not hasattr(self, \"_session\"):\nawait self._init_session()\nasync def close(self) -&gt; None:\n\"\"\"Closes the existing client session, if it's still open.\"\"\"\nif hasattr(self, \"_session\") and not self._session.closed:\nawait self._session.close()\nasync def fetch(\nself,\nroute: routes.CompiledRoute,\n_: t.Type[T],\n*,\npayload: t.Optional[t.Dict[str, t.Any]] = None,\n) -&gt; T | models.HttpErrorResponse:\n\"\"\"Fetches the given route.\n        Args:\n            route: The route to make the request to.\n            _: The type expected to be returned.\n            payload: The optional payload to send in the request\n                body.\n        Returns:\n            The requested json data or the error response.\n        \"\"\"\nreturn await self._request(  # type: ignore\nself._get_request_func(route.method),\nself._base_url + route.uri,\nheaders=self._headers,\nparams=route.params,\njson=payload or None,\n)\n</code></pre>"},{"location":"reference/services/#wom.services.http.HttpService.close","title":"close  <code>async</code>","text":"<pre><code>close() -&gt; None\n</code></pre> <p>Closes the existing client session, if it's still open.</p> Source code in <code>wom/services/http.py</code> <pre><code>async def close(self) -&gt; None:\n\"\"\"Closes the existing client session, if it's still open.\"\"\"\nif hasattr(self, \"_session\") and not self._session.closed:\nawait self._session.close()\n</code></pre>"},{"location":"reference/services/#wom.services.http.HttpService.fetch","title":"fetch  <code>async</code>","text":"<pre><code>fetch(\nroute: routes.CompiledRoute,\n_: t.Type[T],\n*,\npayload: t.Optional[t.Dict[str, t.Any]] = None\n) -&gt; T | models.HttpErrorResponse\n</code></pre> <p>Fetches the given route.</p> <p>Parameters:</p> Name Type Description Default <code>route</code> <code>routes.CompiledRoute</code> <p>The route to make the request to.</p> required <code>_</code> <code>t.Type[T]</code> <p>The type expected to be returned.</p> required <code>payload</code> <code>t.Optional[t.Dict[str, t.Any]]</code> <p>The optional payload to send in the request body.</p> <code>None</code> <p>Returns:</p> Type Description <code>T | models.HttpErrorResponse</code> <p>The requested json data or the error response.</p> Source code in <code>wom/services/http.py</code> <pre><code>async def fetch(\nself,\nroute: routes.CompiledRoute,\n_: t.Type[T],\n*,\npayload: t.Optional[t.Dict[str, t.Any]] = None,\n) -&gt; T | models.HttpErrorResponse:\n\"\"\"Fetches the given route.\n    Args:\n        route: The route to make the request to.\n        _: The type expected to be returned.\n        payload: The optional payload to send in the request\n            body.\n    Returns:\n        The requested json data or the error response.\n    \"\"\"\nreturn await self._request(  # type: ignore\nself._get_request_func(route.method),\nself._base_url + route.uri,\nheaders=self._headers,\nparams=route.params,\njson=payload or None,\n)\n</code></pre>"},{"location":"reference/services/#wom.services.http.HttpService.set_api_key","title":"set_api_key","text":"<pre><code>set_api_key(api_key: str) -&gt; None\n</code></pre> <p>Sets the api key used by the http service.</p> <p>Parameters:</p> Name Type Description Default <code>api_key</code> <code>str</code> <p>The new api key to use.</p> required Source code in <code>wom/services/http.py</code> <pre><code>def set_api_key(self, api_key: str) -&gt; None:\n\"\"\"Sets the api key used by the http service.\n    Args:\n        api_key: The new api key to use.\n    \"\"\"\nself._headers[\"x-api-key\"] = api_key\n</code></pre>"},{"location":"reference/services/#wom.services.http.HttpService.set_base_url","title":"set_base_url","text":"<pre><code>set_base_url(base_url: str) -&gt; None\n</code></pre> <p>Sets the api base url used by the http service.</p> <p>Parameters:</p> Name Type Description Default <code>base_url</code> <code>str</code> <p>The new base url to use.</p> required Source code in <code>wom/services/http.py</code> <pre><code>def set_base_url(self, base_url: str) -&gt; None:\n\"\"\"Sets the api base url used by the http service.\n    Args:\n        base_url: The new base url to use.\n    \"\"\"\nself._base_url = base_url\n</code></pre>"},{"location":"reference/services/#wom.services.http.HttpService.set_user_agent","title":"set_user_agent","text":"<pre><code>set_user_agent(user_agent: str) -&gt; None\n</code></pre> <p>Sets the user agent used by the http service.</p> <p>Parameters:</p> Name Type Description Default <code>user_agent</code> <code>str</code> <p>The new user agent to use.</p> required Source code in <code>wom/services/http.py</code> <pre><code>def set_user_agent(self, user_agent: str) -&gt; None:\n\"\"\"Sets the user agent used by the http service.\n    Args:\n        user_agent: The new user agent to use.\n    \"\"\"\nself._headers[\"x-user-agent\"] = user_agent\n</code></pre>"},{"location":"reference/services/#wom.services.http.HttpService.start","title":"start  <code>async</code>","text":"<pre><code>start() -&gt; None\n</code></pre> <p>Starts the client session to be used by the http service.</p> Source code in <code>wom/services/http.py</code> <pre><code>async def start(self) -&gt; None:\n\"\"\"Starts the client session to be used by the http service.\"\"\"\nif not hasattr(self, \"_session\"):\nawait self._init_session()\n</code></pre>"},{"location":"reference/services/#wom.services.http.HttpService.unset_api_key","title":"unset_api_key","text":"<pre><code>unset_api_key() -&gt; None\n</code></pre> <p>Un-sets the current api key so it isn't sent with requests.</p> Source code in <code>wom/services/http.py</code> <pre><code>def unset_api_key(self) -&gt; None:\n\"\"\"Un-sets the current api key so it isn't sent with requests.\"\"\"\nif \"x-api-key\" in self._headers:\ndel self._headers[\"x-api-key\"]\n</code></pre>"},{"location":"reference/services/#wom.services.NameChangeService","title":"NameChangeService","text":"<p>         Bases: <code>BaseService</code></p> <p>Handles endpoints related to name changes.</p> Source code in <code>wom/services/names.py</code> <pre><code>class NameChangeService(BaseService):\n\"\"\"Handles endpoints related to name changes.\"\"\"\n__slots__ = ()\nasync def search_name_changes(\nself,\nusername: t.Optional[str] = None,\n*,\nstatus: t.Optional[models.NameChangeStatus] = None,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.NameChange]]:\n\"\"\"Searches for name changes.\n        Args:\n            username: The optional username to search for.\n        Keyword Args:\n            status: The optional name change status to filter on.\n                Defaults to `None`.\n            limit: The optional maximum items to return on this page\n                from the API. Defaults to `None`.\n            offset: The optional page offset. Defaults to\n                `None`.\n        Returns:\n            A [`Result`][wom.Result] containing a list of name changes.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.names.search_name_changes(\n                \"Jonxslays\", limit=1\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(username=username, status=status, limit=limit, offset=offset)\nroute = routes.SEARCH_NAME_CHANGES.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_name_change(c) for c in data])\nasync def submit_name_change(self, old_name: str, new_name: str) -&gt; ResultT[models.NameChange]:\n\"\"\"Submits a new name change.\n        Args:\n            old_name: The old name for the player.\n            new_name: The new name for the player.\n        Returns:\n            A [`Result`][wom.Result] containing the name change.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.names.submit_name_change(\n                \"Jonxslays\", \"I Mahatma I\"\n            )\n            ```\n        \"\"\"\npayload = self._generate_map(oldName=old_name, newName=new_name)\nroute = routes.SUBMIT_NAME_CHANGE.compile()\ndata = await self._http.fetch(route, self._dict, payload=payload)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_name_change(data))\n</code></pre>"},{"location":"reference/services/#wom.services.names.NameChangeService.search_name_changes","title":"search_name_changes  <code>async</code>","text":"<pre><code>search_name_changes(\nusername: t.Optional[str] = None,\n*,\nstatus: t.Optional[models.NameChangeStatus] = None,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.NameChange]]\n</code></pre> <p>Searches for name changes.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>t.Optional[str]</code> <p>The optional username to search for.</p> <code>None</code> <p>Other Parameters:</p> Name Type Description <code>status</code> <code>t.Optional[models.NameChangeStatus]</code> <p>The optional name change status to filter on. Defaults to <code>None</code>.</p> <code>limit</code> <code>t.Optional[int]</code> <p>The optional maximum items to return on this page from the API. Defaults to <code>None</code>.</p> <code>offset</code> <code>t.Optional[int]</code> <p>The optional page offset. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.NameChange]]</code> <p>A <code>Result</code> containing a list of name changes.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.names.search_name_changes(\n\"Jonxslays\", limit=1\n)\n</code></pre> Source code in <code>wom/services/names.py</code> <pre><code>async def search_name_changes(\nself,\nusername: t.Optional[str] = None,\n*,\nstatus: t.Optional[models.NameChangeStatus] = None,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\n) -&gt; ResultT[t.List[models.NameChange]]:\n\"\"\"Searches for name changes.\n    Args:\n        username: The optional username to search for.\n    Keyword Args:\n        status: The optional name change status to filter on.\n            Defaults to `None`.\n        limit: The optional maximum items to return on this page\n            from the API. Defaults to `None`.\n        offset: The optional page offset. Defaults to\n            `None`.\n    Returns:\n        A [`Result`][wom.Result] containing a list of name changes.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.names.search_name_changes(\n            \"Jonxslays\", limit=1\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(username=username, status=status, limit=limit, offset=offset)\nroute = routes.SEARCH_NAME_CHANGES.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_name_change(c) for c in data])\n</code></pre>"},{"location":"reference/services/#wom.services.names.NameChangeService.submit_name_change","title":"submit_name_change  <code>async</code>","text":"<pre><code>submit_name_change(\nold_name: str, new_name: str\n) -&gt; ResultT[models.NameChange]\n</code></pre> <p>Submits a new name change.</p> <p>Parameters:</p> Name Type Description Default <code>old_name</code> <code>str</code> <p>The old name for the player.</p> required <code>new_name</code> <code>str</code> <p>The new name for the player.</p> required <p>Returns:</p> Type Description <code>ResultT[models.NameChange]</code> <p>A <code>Result</code> containing the name change.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.names.submit_name_change(\n\"Jonxslays\", \"I Mahatma I\"\n)\n</code></pre> Source code in <code>wom/services/names.py</code> <pre><code>async def submit_name_change(self, old_name: str, new_name: str) -&gt; ResultT[models.NameChange]:\n\"\"\"Submits a new name change.\n    Args:\n        old_name: The old name for the player.\n        new_name: The new name for the player.\n    Returns:\n        A [`Result`][wom.Result] containing the name change.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.names.submit_name_change(\n            \"Jonxslays\", \"I Mahatma I\"\n        )\n        ```\n    \"\"\"\npayload = self._generate_map(oldName=old_name, newName=new_name)\nroute = routes.SUBMIT_NAME_CHANGE.compile()\ndata = await self._http.fetch(route, self._dict, payload=payload)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_name_change(data))\n</code></pre>"},{"location":"reference/services/#wom.services.PlayerService","title":"PlayerService","text":"<p>         Bases: <code>BaseService</code></p> <p>Handles endpoints related to players.</p> Source code in <code>wom/services/players.py</code> <pre><code>class PlayerService(BaseService):\n\"\"\"Handles endpoints related to players.\"\"\"\n__slots__ = ()\nasync def search_players(\nself, username: str, *, limit: t.Optional[int] = None, offset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.Player]]:\n\"\"\"Searches for a player by partial username.\n        Args:\n            username: The username to search for.\n        Keyword Args:\n            limit: The maximum number of paginated items to receive.\n                Defaults to `None` (I think thats 20 items?).\n            offset: The page offset for requesting multiple pages.\n                Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the list of matching\n                players.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.search_players(\"Jonxslays\", limit=3)\n            ```\n        \"\"\"\nparams = self._generate_map(username=username, limit=limit, offset=offset)\nroute = routes.SEARCH_PLAYERS.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_player(player) for player in data])\nasync def update_player(self, username: str) -&gt; ResultT[models.PlayerDetail]:\n\"\"\"Updates the given player.\n        Args:\n            username: The username to update.\n        Returns:\n            A [`Result`][wom.Result] containing the updated player\n                details.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.update_player(\"Jonxslays\")\n            ```\n        \"\"\"\nroute = routes.UPDATE_PLAYER.compile(username)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_player_details(data))\nasync def assert_player_type(self, username: str) -&gt; ResultT[models.AssertPlayerType]:\n\"\"\"Asserts, and fixes, a players type.\n        Args:\n            username: The username to assert the type for.\n        Returns:\n            A [`Result`][wom.Result] containing the asserted player\n                type.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.assert_player_type(\"Jonxslays\")\n            ```\n        \"\"\"\nroute = routes.ASSERT_PLAYER_TYPE.compile(username)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_asserted_player_type(data))\nasync def get_details(self, username: str) -&gt; ResultT[models.PlayerDetail]:\n\"\"\"Gets the details for a given player.\n        Args:\n            username: The username to get the details for.\n        Returns:\n            A [`Result`][wom.Result] containing the player details.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.get_details(\"Jonxslays\")\n            ```\n        \"\"\"\nroute = routes.PLAYER_DETAILS.compile(username)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_player_details(data))\nasync def get_details_by_id(self, player_id: int) -&gt; ResultT[models.PlayerDetail]:\n\"\"\"Gets the details for a given player id.\n        Args:\n            player_id: The is of the player to get the details for.\n        Returns:\n            A [`Result`][wom.Result] containing the player details.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.get_details_by_id(1234)\n            ```\n        \"\"\"\nroute = routes.PLAYER_DETAILS_BY_ID.compile(player_id)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_player_details(data))\nasync def get_achievements(self, username: str) -&gt; ResultT[t.List[models.Achievement]]:\n\"\"\"Gets the achievements for a given player.\n        Args:\n            username: The username to get the achievements for.\n        Returns:\n            A [`Result`][wom.Result] containing the list of player\n                achievements.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.get_achievements(\"Jonxslays\")\n            ```\n        \"\"\"\nroute = routes.PLAYER_ACHIEVEMENTS.compile(username)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_achievement(a) for a in data])\nasync def get_achievement_progress(\nself, username: str\n) -&gt; ResultT[t.List[models.PlayerAchievementProgress]]:\n\"\"\"Gets the progress towards achievements for a given player.\n        Args:\n            username: The username to get the achievement progress for.\n        Returns:\n            A [`Result`][wom.Result] containing the list of player\n                achievement progress.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.get_achievement_progress(\"Jonxslays\")\n            ```\n        \"\"\"\nroute = routes.PLAYER_ACHIEVEMENT_PROGRESS.compile(username)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(\n[self._serializer.deserialize_player_achievement_progress(p) for p in data]\n)\nasync def get_competition_participations(\nself,\nusername: str,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\nstatus: t.Optional[models.CompetitionStatus] = None,\n) -&gt; ResultT[t.List[models.PlayerParticipation]]:\n\"\"\"Gets the competition participations for a given player.\n        Args:\n            username: The username to get the participations for.\n        Keyword Args:\n            limit: The maximum number of paginated items to receive.\n                Defaults to `None` (I think thats 20 items?).\n            offset: The page offset for requesting multiple pages.\n                Defaults to `None`.\n            status: The optional [`CompetitionStatus`]\n                [wom.CompetitionStatus] to filter on. Defaults to\n                `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the list of competition\n                participations.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.get_achievement_progress(\"Jonxslays\")\n            ```\n        \"\"\"\nparams = self._generate_map(\nstatus=status.value if status else None, limit=limit, offset=offset\n)\nroute = routes.PLAYER_COMPETITION_PARTICIPATION.compile(username).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_player_participation(p) for p in data])\nasync def get_competition_standings(\nself,\nusername: str,\nstatus: models.CompetitionStatus,\n) -&gt; ResultT[t.List[models.PlayerCompetitionStanding]]:\n\"\"\"Gets the competition standings for a given player.\n        Args:\n            username: The username to get the standings for.\n            status: The competition status to get standings for.\n        Returns:\n            A [`Result`][wom.Result] containing the list of competition\n                standings.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.get_competition_standings(\n                \"Jonxslays\", wom.CompetitionStatus.Ongoing\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(status=status.value)\nroute = routes.PLAYER_COMPETITION_STANDINGS.compile(username).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(\n[self._serializer.deserialize_player_competition_standing(s) for s in data]\n)\nasync def get_group_memberships(\nself, username: str, *, limit: t.Optional[int] = None, offset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.PlayerMembership]]:\n\"\"\"Gets the group memberships for the given player.\n        Args:\n            username: The username to get the memberships for.\n        Keyword Args:\n            limit: The maximum number of paginated items to receive.\n                Defaults to `None` (I think thats 20 items?).\n            offset: The page offset for requesting multiple pages.\n                Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the list of group\n                memberships.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.get_group_memberships(\n                \"Jonxslays\", limit=3\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(limit=limit, offset=offset)\nroute = routes.PLAYER_GROUP_MEMBERSHIPS.compile(username).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_player_membership(m) for m in data])\nasync def get_gains(\nself,\nusername: str,\n*,\nperiod: t.Optional[enums.Period] = None,\nstart_date: t.Optional[datetime] = None,\nend_date: t.Optional[datetime] = None,\n) -&gt; ResultT[models.PlayerGains]:\n\"\"\"Gets the gains made by this player over the given time span.\n        Args:\n            username: The username to get the gains for.\n        Keyword Args:\n            period: The optional period of time to get gains for.\n                Defaults to `None`.\n            start_date: The minimum date to get the gains from. Defaults\n                to `None`.\n            end_date: The maximum date to get the gains from. Defaults\n                to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the players gains.\n        !!! info\n            You can pass either (`period`) or (`start_date` +\n            `end_date`), but not both.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.get_gains(\n                \"Jonxslays\", period=wom.Period.Day\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(\nperiod=period.value if period else None,\nstartDate=start_date.isoformat() if start_date else None,\nendDate=end_date.isoformat() if end_date else None,\n)\nroute = routes.PLAYER_GAINS.compile(username).with_params(params)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_player_gains(data))\nasync def get_records(\nself,\nusername: str,\n*,\nperiod: t.Optional[enums.Period] = None,\nmetric: t.Optional[enums.Metric] = None,\n) -&gt; ResultT[t.List[models.Record]]:\n\"\"\"Gets the records held by this player.\n        Args:\n            username: The username to get the gains for.\n        Keyword Args:\n            period: The optional period of time to get gains for.\n                Defaults to `None`.\n            metric: The optional metric to filter the records on.\n                Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing a list of the players\n                records.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.get_records(\n                \"Jonxslays\", period=wom.Period.Day, metric=wom.Skills.Attack\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(\nperiod=period.value if period else None, metric=metric.value if metric else None\n)\nroute = routes.PLAYER_RECORDS.compile(username).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_record(r) for r in data])\nasync def get_snapshots(\nself,\nusername: str,\n*,\nperiod: t.Optional[enums.Period] = None,\nstart_date: t.Optional[datetime] = None,\nend_date: t.Optional[datetime] = None,\n) -&gt; ResultT[t.List[models.Snapshot]]:\n\"\"\"Gets the snapshots for the player.\n        Args:\n            username: The username to get the snapshots for.\n        Keyword Args:\n            period: The optional period of time to get snapshots for.\n                Defaults to `None`.\n            start_date: The minimum date to get the snapshots from.\n                Defaults to `None`.\n            end_date: The maximum date to get the snapshots from.\n                Defaults to `None`.\n        Returns:\n            A [`Result`][wom.Result] containing the list of snapshots.\n        !!! info\n            You can pass either (`period`) or (`start_date` +\n            `end_date`), but not both.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.get_snapshots(\n                \"Jonxslays\", period=wom.Period.Week\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(\nperiod=period.value if period else None,\nstartDate=start_date.isoformat() if start_date else None,\nendDate=end_date.isoformat() if end_date else None,\n)\nroute = routes.PLAYER_SNAPSHOTS.compile(username).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_snapshot(s) for s in data])\nasync def get_name_changes(self, username: str) -&gt; ResultT[t.List[models.NameChange]]:\n\"\"\"Gets the name changes for the player.\n        Args:\n            username: The username to get the name changes for.\n        Returns:\n            A [`Result`][wom.Result] containing the list of name changes.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.players.get_name_changes(\"Jonxslays\")\n            ```\n        \"\"\"\nroute = routes.PLAYER_NAME_CHANGES.compile(username)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_name_change(c) for c in data])\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.assert_player_type","title":"assert_player_type  <code>async</code>","text":"<pre><code>assert_player_type(\nusername: str,\n) -&gt; ResultT[models.AssertPlayerType]\n</code></pre> <p>Asserts, and fixes, a players type.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to assert the type for.</p> required <p>Returns:</p> Type Description <code>ResultT[models.AssertPlayerType]</code> <p>A <code>Result</code> containing the asserted player type.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.assert_player_type(\"Jonxslays\")\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def assert_player_type(self, username: str) -&gt; ResultT[models.AssertPlayerType]:\n\"\"\"Asserts, and fixes, a players type.\n    Args:\n        username: The username to assert the type for.\n    Returns:\n        A [`Result`][wom.Result] containing the asserted player\n            type.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.assert_player_type(\"Jonxslays\")\n        ```\n    \"\"\"\nroute = routes.ASSERT_PLAYER_TYPE.compile(username)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_asserted_player_type(data))\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.get_achievement_progress","title":"get_achievement_progress  <code>async</code>","text":"<pre><code>get_achievement_progress(\nusername: str,\n) -&gt; ResultT[t.List[models.PlayerAchievementProgress]]\n</code></pre> <p>Gets the progress towards achievements for a given player.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to get the achievement progress for.</p> required <p>Returns:</p> Type Description <code>ResultT[t.List[models.PlayerAchievementProgress]]</code> <p>A <code>Result</code> containing the list of player achievement progress.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.get_achievement_progress(\"Jonxslays\")\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def get_achievement_progress(\nself, username: str\n) -&gt; ResultT[t.List[models.PlayerAchievementProgress]]:\n\"\"\"Gets the progress towards achievements for a given player.\n    Args:\n        username: The username to get the achievement progress for.\n    Returns:\n        A [`Result`][wom.Result] containing the list of player\n            achievement progress.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.get_achievement_progress(\"Jonxslays\")\n        ```\n    \"\"\"\nroute = routes.PLAYER_ACHIEVEMENT_PROGRESS.compile(username)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(\n[self._serializer.deserialize_player_achievement_progress(p) for p in data]\n)\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.get_achievements","title":"get_achievements  <code>async</code>","text":"<pre><code>get_achievements(\nusername: str,\n) -&gt; ResultT[t.List[models.Achievement]]\n</code></pre> <p>Gets the achievements for a given player.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to get the achievements for.</p> required <p>Returns:</p> Type Description <code>ResultT[t.List[models.Achievement]]</code> <p>A <code>Result</code> containing the list of player achievements.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.get_achievements(\"Jonxslays\")\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def get_achievements(self, username: str) -&gt; ResultT[t.List[models.Achievement]]:\n\"\"\"Gets the achievements for a given player.\n    Args:\n        username: The username to get the achievements for.\n    Returns:\n        A [`Result`][wom.Result] containing the list of player\n            achievements.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.get_achievements(\"Jonxslays\")\n        ```\n    \"\"\"\nroute = routes.PLAYER_ACHIEVEMENTS.compile(username)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_achievement(a) for a in data])\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.get_competition_participations","title":"get_competition_participations  <code>async</code>","text":"<pre><code>get_competition_participations(\nusername: str,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\nstatus: t.Optional[models.CompetitionStatus] = None\n) -&gt; ResultT[t.List[models.PlayerParticipation]]\n</code></pre> <p>Gets the competition participations for a given player.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to get the participations for.</p> required <p>Other Parameters:</p> Name Type Description <code>limit</code> <code>t.Optional[int]</code> <p>The maximum number of paginated items to receive. Defaults to <code>None</code> (I think thats 20 items?).</p> <code>offset</code> <code>t.Optional[int]</code> <p>The page offset for requesting multiple pages. Defaults to <code>None</code>.</p> <code>status</code> <code>t.Optional[models.CompetitionStatus]</code> <p>The optional <code>CompetitionStatus</code> to filter on. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.PlayerParticipation]]</code> <p>A <code>Result</code> containing the list of competition participations.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.get_achievement_progress(\"Jonxslays\")\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def get_competition_participations(\nself,\nusername: str,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None,\nstatus: t.Optional[models.CompetitionStatus] = None,\n) -&gt; ResultT[t.List[models.PlayerParticipation]]:\n\"\"\"Gets the competition participations for a given player.\n    Args:\n        username: The username to get the participations for.\n    Keyword Args:\n        limit: The maximum number of paginated items to receive.\n            Defaults to `None` (I think thats 20 items?).\n        offset: The page offset for requesting multiple pages.\n            Defaults to `None`.\n        status: The optional [`CompetitionStatus`]\n            [wom.CompetitionStatus] to filter on. Defaults to\n            `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the list of competition\n            participations.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.get_achievement_progress(\"Jonxslays\")\n        ```\n    \"\"\"\nparams = self._generate_map(\nstatus=status.value if status else None, limit=limit, offset=offset\n)\nroute = routes.PLAYER_COMPETITION_PARTICIPATION.compile(username).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_player_participation(p) for p in data])\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.get_competition_standings","title":"get_competition_standings  <code>async</code>","text":"<pre><code>get_competition_standings(\nusername: str, status: models.CompetitionStatus\n) -&gt; ResultT[t.List[models.PlayerCompetitionStanding]]\n</code></pre> <p>Gets the competition standings for a given player.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to get the standings for.</p> required <code>status</code> <code>models.CompetitionStatus</code> <p>The competition status to get standings for.</p> required <p>Returns:</p> Type Description <code>ResultT[t.List[models.PlayerCompetitionStanding]]</code> <p>A <code>Result</code> containing the list of competition standings.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.get_competition_standings(\n\"Jonxslays\", wom.CompetitionStatus.Ongoing\n)\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def get_competition_standings(\nself,\nusername: str,\nstatus: models.CompetitionStatus,\n) -&gt; ResultT[t.List[models.PlayerCompetitionStanding]]:\n\"\"\"Gets the competition standings for a given player.\n    Args:\n        username: The username to get the standings for.\n        status: The competition status to get standings for.\n    Returns:\n        A [`Result`][wom.Result] containing the list of competition\n            standings.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.get_competition_standings(\n            \"Jonxslays\", wom.CompetitionStatus.Ongoing\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(status=status.value)\nroute = routes.PLAYER_COMPETITION_STANDINGS.compile(username).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(\n[self._serializer.deserialize_player_competition_standing(s) for s in data]\n)\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.get_details","title":"get_details  <code>async</code>","text":"<pre><code>get_details(username: str) -&gt; ResultT[models.PlayerDetail]\n</code></pre> <p>Gets the details for a given player.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to get the details for.</p> required <p>Returns:</p> Type Description <code>ResultT[models.PlayerDetail]</code> <p>A <code>Result</code> containing the player details.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.get_details(\"Jonxslays\")\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def get_details(self, username: str) -&gt; ResultT[models.PlayerDetail]:\n\"\"\"Gets the details for a given player.\n    Args:\n        username: The username to get the details for.\n    Returns:\n        A [`Result`][wom.Result] containing the player details.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.get_details(\"Jonxslays\")\n        ```\n    \"\"\"\nroute = routes.PLAYER_DETAILS.compile(username)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_player_details(data))\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.get_details_by_id","title":"get_details_by_id  <code>async</code>","text":"<pre><code>get_details_by_id(\nplayer_id: int,\n) -&gt; ResultT[models.PlayerDetail]\n</code></pre> <p>Gets the details for a given player id.</p> <p>Parameters:</p> Name Type Description Default <code>player_id</code> <code>int</code> <p>The is of the player to get the details for.</p> required <p>Returns:</p> Type Description <code>ResultT[models.PlayerDetail]</code> <p>A <code>Result</code> containing the player details.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.get_details_by_id(1234)\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def get_details_by_id(self, player_id: int) -&gt; ResultT[models.PlayerDetail]:\n\"\"\"Gets the details for a given player id.\n    Args:\n        player_id: The is of the player to get the details for.\n    Returns:\n        A [`Result`][wom.Result] containing the player details.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.get_details_by_id(1234)\n        ```\n    \"\"\"\nroute = routes.PLAYER_DETAILS_BY_ID.compile(player_id)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_player_details(data))\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.get_gains","title":"get_gains  <code>async</code>","text":"<pre><code>get_gains(\nusername: str,\n*,\nperiod: t.Optional[enums.Period] = None,\nstart_date: t.Optional[datetime] = None,\nend_date: t.Optional[datetime] = None\n) -&gt; ResultT[models.PlayerGains]\n</code></pre> <p>Gets the gains made by this player over the given time span.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to get the gains for.</p> required <p>Other Parameters:</p> Name Type Description <code>period</code> <code>t.Optional[enums.Period]</code> <p>The optional period of time to get gains for. Defaults to <code>None</code>.</p> <code>start_date</code> <code>t.Optional[datetime]</code> <p>The minimum date to get the gains from. Defaults to <code>None</code>.</p> <code>end_date</code> <code>t.Optional[datetime]</code> <p>The maximum date to get the gains from. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[models.PlayerGains]</code> <p>A <code>Result</code> containing the players gains.</p> <p>Info</p> <p>You can pass either (<code>period</code>) or (<code>start_date</code> + <code>end_date</code>), but not both.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.get_gains(\n\"Jonxslays\", period=wom.Period.Day\n)\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def get_gains(\nself,\nusername: str,\n*,\nperiod: t.Optional[enums.Period] = None,\nstart_date: t.Optional[datetime] = None,\nend_date: t.Optional[datetime] = None,\n) -&gt; ResultT[models.PlayerGains]:\n\"\"\"Gets the gains made by this player over the given time span.\n    Args:\n        username: The username to get the gains for.\n    Keyword Args:\n        period: The optional period of time to get gains for.\n            Defaults to `None`.\n        start_date: The minimum date to get the gains from. Defaults\n            to `None`.\n        end_date: The maximum date to get the gains from. Defaults\n            to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the players gains.\n    !!! info\n        You can pass either (`period`) or (`start_date` +\n        `end_date`), but not both.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.get_gains(\n            \"Jonxslays\", period=wom.Period.Day\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(\nperiod=period.value if period else None,\nstartDate=start_date.isoformat() if start_date else None,\nendDate=end_date.isoformat() if end_date else None,\n)\nroute = routes.PLAYER_GAINS.compile(username).with_params(params)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_player_gains(data))\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.get_group_memberships","title":"get_group_memberships  <code>async</code>","text":"<pre><code>get_group_memberships(\nusername: str,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.PlayerMembership]]\n</code></pre> <p>Gets the group memberships for the given player.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to get the memberships for.</p> required <p>Other Parameters:</p> Name Type Description <code>limit</code> <code>t.Optional[int]</code> <p>The maximum number of paginated items to receive. Defaults to <code>None</code> (I think thats 20 items?).</p> <code>offset</code> <code>t.Optional[int]</code> <p>The page offset for requesting multiple pages. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.PlayerMembership]]</code> <p>A <code>Result</code> containing the list of group memberships.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.get_group_memberships(\n\"Jonxslays\", limit=3\n)\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def get_group_memberships(\nself, username: str, *, limit: t.Optional[int] = None, offset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.PlayerMembership]]:\n\"\"\"Gets the group memberships for the given player.\n    Args:\n        username: The username to get the memberships for.\n    Keyword Args:\n        limit: The maximum number of paginated items to receive.\n            Defaults to `None` (I think thats 20 items?).\n        offset: The page offset for requesting multiple pages.\n            Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the list of group\n            memberships.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.get_group_memberships(\n            \"Jonxslays\", limit=3\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(limit=limit, offset=offset)\nroute = routes.PLAYER_GROUP_MEMBERSHIPS.compile(username).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_player_membership(m) for m in data])\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.get_name_changes","title":"get_name_changes  <code>async</code>","text":"<pre><code>get_name_changes(\nusername: str,\n) -&gt; ResultT[t.List[models.NameChange]]\n</code></pre> <p>Gets the name changes for the player.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to get the name changes for.</p> required <p>Returns:</p> Type Description <code>ResultT[t.List[models.NameChange]]</code> <p>A <code>Result</code> containing the list of name changes.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.get_name_changes(\"Jonxslays\")\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def get_name_changes(self, username: str) -&gt; ResultT[t.List[models.NameChange]]:\n\"\"\"Gets the name changes for the player.\n    Args:\n        username: The username to get the name changes for.\n    Returns:\n        A [`Result`][wom.Result] containing the list of name changes.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.get_name_changes(\"Jonxslays\")\n        ```\n    \"\"\"\nroute = routes.PLAYER_NAME_CHANGES.compile(username)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_name_change(c) for c in data])\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.get_records","title":"get_records  <code>async</code>","text":"<pre><code>get_records(\nusername: str,\n*,\nperiod: t.Optional[enums.Period] = None,\nmetric: t.Optional[enums.Metric] = None\n) -&gt; ResultT[t.List[models.Record]]\n</code></pre> <p>Gets the records held by this player.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to get the gains for.</p> required <p>Other Parameters:</p> Name Type Description <code>period</code> <code>t.Optional[enums.Period]</code> <p>The optional period of time to get gains for. Defaults to <code>None</code>.</p> <code>metric</code> <code>t.Optional[enums.Metric]</code> <p>The optional metric to filter the records on. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.Record]]</code> <p>A <code>Result</code> containing a list of the players records.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.get_records(\n\"Jonxslays\", period=wom.Period.Day, metric=wom.Skills.Attack\n)\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def get_records(\nself,\nusername: str,\n*,\nperiod: t.Optional[enums.Period] = None,\nmetric: t.Optional[enums.Metric] = None,\n) -&gt; ResultT[t.List[models.Record]]:\n\"\"\"Gets the records held by this player.\n    Args:\n        username: The username to get the gains for.\n    Keyword Args:\n        period: The optional period of time to get gains for.\n            Defaults to `None`.\n        metric: The optional metric to filter the records on.\n            Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing a list of the players\n            records.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.get_records(\n            \"Jonxslays\", period=wom.Period.Day, metric=wom.Skills.Attack\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(\nperiod=period.value if period else None, metric=metric.value if metric else None\n)\nroute = routes.PLAYER_RECORDS.compile(username).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_record(r) for r in data])\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.get_snapshots","title":"get_snapshots  <code>async</code>","text":"<pre><code>get_snapshots(\nusername: str,\n*,\nperiod: t.Optional[enums.Period] = None,\nstart_date: t.Optional[datetime] = None,\nend_date: t.Optional[datetime] = None\n) -&gt; ResultT[t.List[models.Snapshot]]\n</code></pre> <p>Gets the snapshots for the player.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to get the snapshots for.</p> required <p>Other Parameters:</p> Name Type Description <code>period</code> <code>t.Optional[enums.Period]</code> <p>The optional period of time to get snapshots for. Defaults to <code>None</code>.</p> <code>start_date</code> <code>t.Optional[datetime]</code> <p>The minimum date to get the snapshots from. Defaults to <code>None</code>.</p> <code>end_date</code> <code>t.Optional[datetime]</code> <p>The maximum date to get the snapshots from. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.Snapshot]]</code> <p>A <code>Result</code> containing the list of snapshots.</p> <p>Info</p> <p>You can pass either (<code>period</code>) or (<code>start_date</code> + <code>end_date</code>), but not both.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.get_snapshots(\n\"Jonxslays\", period=wom.Period.Week\n)\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def get_snapshots(\nself,\nusername: str,\n*,\nperiod: t.Optional[enums.Period] = None,\nstart_date: t.Optional[datetime] = None,\nend_date: t.Optional[datetime] = None,\n) -&gt; ResultT[t.List[models.Snapshot]]:\n\"\"\"Gets the snapshots for the player.\n    Args:\n        username: The username to get the snapshots for.\n    Keyword Args:\n        period: The optional period of time to get snapshots for.\n            Defaults to `None`.\n        start_date: The minimum date to get the snapshots from.\n            Defaults to `None`.\n        end_date: The maximum date to get the snapshots from.\n            Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the list of snapshots.\n    !!! info\n        You can pass either (`period`) or (`start_date` +\n        `end_date`), but not both.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.get_snapshots(\n            \"Jonxslays\", period=wom.Period.Week\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(\nperiod=period.value if period else None,\nstartDate=start_date.isoformat() if start_date else None,\nendDate=end_date.isoformat() if end_date else None,\n)\nroute = routes.PLAYER_SNAPSHOTS.compile(username).with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_snapshot(s) for s in data])\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.search_players","title":"search_players  <code>async</code>","text":"<pre><code>search_players(\nusername: str,\n*,\nlimit: t.Optional[int] = None,\noffset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.Player]]\n</code></pre> <p>Searches for a player by partial username.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to search for.</p> required <p>Other Parameters:</p> Name Type Description <code>limit</code> <code>t.Optional[int]</code> <p>The maximum number of paginated items to receive. Defaults to <code>None</code> (I think thats 20 items?).</p> <code>offset</code> <code>t.Optional[int]</code> <p>The page offset for requesting multiple pages. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.Player]]</code> <p>A <code>Result</code> containing the list of matching players.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.search_players(\"Jonxslays\", limit=3)\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def search_players(\nself, username: str, *, limit: t.Optional[int] = None, offset: t.Optional[int] = None\n) -&gt; ResultT[t.List[models.Player]]:\n\"\"\"Searches for a player by partial username.\n    Args:\n        username: The username to search for.\n    Keyword Args:\n        limit: The maximum number of paginated items to receive.\n            Defaults to `None` (I think thats 20 items?).\n        offset: The page offset for requesting multiple pages.\n            Defaults to `None`.\n    Returns:\n        A [`Result`][wom.Result] containing the list of matching\n            players.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.search_players(\"Jonxslays\", limit=3)\n        ```\n    \"\"\"\nparams = self._generate_map(username=username, limit=limit, offset=offset)\nroute = routes.SEARCH_PLAYERS.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_player(player) for player in data])\n</code></pre>"},{"location":"reference/services/#wom.services.players.PlayerService.update_player","title":"update_player  <code>async</code>","text":"<pre><code>update_player(\nusername: str,\n) -&gt; ResultT[models.PlayerDetail]\n</code></pre> <p>Updates the given player.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>The username to update.</p> required <p>Returns:</p> Type Description <code>ResultT[models.PlayerDetail]</code> <p>A <code>Result</code> containing the updated player details.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.players.update_player(\"Jonxslays\")\n</code></pre> Source code in <code>wom/services/players.py</code> <pre><code>async def update_player(self, username: str) -&gt; ResultT[models.PlayerDetail]:\n\"\"\"Updates the given player.\n    Args:\n        username: The username to update.\n    Returns:\n        A [`Result`][wom.Result] containing the updated player\n            details.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.players.update_player(\"Jonxslays\")\n        ```\n    \"\"\"\nroute = routes.UPDATE_PLAYER.compile(username)\ndata = await self._http.fetch(route, self._dict)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok(self._serializer.deserialize_player_details(data))\n</code></pre>"},{"location":"reference/services/#wom.services.RecordService","title":"RecordService","text":"<p>         Bases: <code>BaseService</code></p> <p>Handles endpoints related to records.</p> Source code in <code>wom/services/records.py</code> <pre><code>class RecordService(BaseService):\n\"\"\"Handles endpoints related to records.\"\"\"\n__slots__ = ()\nasync def get_global_record_leaderboards(\nself,\nmetric: enums.Metric,\nperiod: enums.Period,\n*,\nplayer_type: t.Optional[models.PlayerType] = None,\nplayer_build: t.Optional[models.PlayerBuild] = None,\ncountry: t.Optional[models.Country] = None,\n) -&gt; ResultT[t.List[models.RecordLeaderboardEntry]]:\n\"\"\"Gets the global record leaderboards.\n        Args:\n            metric: The metric to filter on.\n            period: The period of time to filter on.\n        Keyword Args:\n            player_type: The optional player type to filter on. Defaults\n                to `None`.\n            player_build: The optional player build to filter on.\n                Defaults to `None`.\n            country: The optional country to filter on. Defaults to\n                `None`.\n        Returns:\n            A [`Result`][wom.Result] containing a list of record\n                leaderboard entries.\n        ??? example\n            ```py\n            import wom\n            client = wom.Client(...)\n            await client.start()\n            result = await client.records.get_global_record_leaderboards(\n                wom.Skills.Attack,\n                wom.Period.Day,\n                country=wom.Country.Us,\n            )\n            ```\n        \"\"\"\nparams = self._generate_map(\nmetric=metric.value,\nperiod=period.value,\nplayerType=player_type.value if player_type else None,\nplayerBuild=player_build.value if player_build else None,\ncountry=country.value if country else None,\n)\nroute = routes.GLOBAL_RECORD_LEADERS.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_record_leaderboard_entry(r) for r in data])\n</code></pre>"},{"location":"reference/services/#wom.services.records.RecordService.get_global_record_leaderboards","title":"get_global_record_leaderboards  <code>async</code>","text":"<pre><code>get_global_record_leaderboards(\nmetric: enums.Metric,\nperiod: enums.Period,\n*,\nplayer_type: t.Optional[models.PlayerType] = None,\nplayer_build: t.Optional[models.PlayerBuild] = None,\ncountry: t.Optional[models.Country] = None\n) -&gt; ResultT[t.List[models.RecordLeaderboardEntry]]\n</code></pre> <p>Gets the global record leaderboards.</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>enums.Metric</code> <p>The metric to filter on.</p> required <code>period</code> <code>enums.Period</code> <p>The period of time to filter on.</p> required <p>Other Parameters:</p> Name Type Description <code>player_type</code> <code>t.Optional[models.PlayerType]</code> <p>The optional player type to filter on. Defaults to <code>None</code>.</p> <code>player_build</code> <code>t.Optional[models.PlayerBuild]</code> <p>The optional player build to filter on. Defaults to <code>None</code>.</p> <code>country</code> <code>t.Optional[models.Country]</code> <p>The optional country to filter on. Defaults to <code>None</code>.</p> <p>Returns:</p> Type Description <code>ResultT[t.List[models.RecordLeaderboardEntry]]</code> <p>A <code>Result</code> containing a list of record leaderboard entries.</p> Example <pre><code>import wom\nclient = wom.Client(...)\nawait client.start()\nresult = await client.records.get_global_record_leaderboards(\nwom.Skills.Attack,\nwom.Period.Day,\ncountry=wom.Country.Us,\n)\n</code></pre> Source code in <code>wom/services/records.py</code> <pre><code>async def get_global_record_leaderboards(\nself,\nmetric: enums.Metric,\nperiod: enums.Period,\n*,\nplayer_type: t.Optional[models.PlayerType] = None,\nplayer_build: t.Optional[models.PlayerBuild] = None,\ncountry: t.Optional[models.Country] = None,\n) -&gt; ResultT[t.List[models.RecordLeaderboardEntry]]:\n\"\"\"Gets the global record leaderboards.\n    Args:\n        metric: The metric to filter on.\n        period: The period of time to filter on.\n    Keyword Args:\n        player_type: The optional player type to filter on. Defaults\n            to `None`.\n        player_build: The optional player build to filter on.\n            Defaults to `None`.\n        country: The optional country to filter on. Defaults to\n            `None`.\n    Returns:\n        A [`Result`][wom.Result] containing a list of record\n            leaderboard entries.\n    ??? example\n        ```py\n        import wom\n        client = wom.Client(...)\n        await client.start()\n        result = await client.records.get_global_record_leaderboards(\n            wom.Skills.Attack,\n            wom.Period.Day,\n            country=wom.Country.Us,\n        )\n        ```\n    \"\"\"\nparams = self._generate_map(\nmetric=metric.value,\nperiod=period.value,\nplayerType=player_type.value if player_type else None,\nplayerBuild=player_build.value if player_build else None,\ncountry=country.value if country else None,\n)\nroute = routes.GLOBAL_RECORD_LEADERS.compile().with_params(params)\ndata = await self._http.fetch(route, self._list)\nif isinstance(data, models.HttpErrorResponse):\nreturn result.Err(data)\nreturn result.Ok([self._serializer.deserialize_record_leaderboard_entry(r) for r in data])\n</code></pre>"}]}